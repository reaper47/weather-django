
weather-station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d000  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000840  0800d1a0  0800d1a0  0001d1a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d9e0  0800d9e0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d9e0  0800d9e0  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d9e0  0800d9e0  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d9e0  0800d9e0  0001d9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d9e4  0800d9e4  0001d9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800d9e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d00  200001e8  0800dbd0  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ee8  0800dbd0  00020ee8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fe2f  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004289  00000000  00000000  00040047  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017a0  00000000  00000000  000442d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015a8  00000000  00000000  00045a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c2e  00000000  00000000  00047018  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016828  00000000  00000000  00069c46  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c34d4  00000000  00000000  0008046e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00143942  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e38  00000000  00000000  001439c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d188 	.word	0x0800d188

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800d188 	.word	0x0800d188

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b084      	sub	sp, #16
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    /* chip id read try count */
    uint8_t try_count = 5;
 8000ca0:	2305      	movs	r3, #5
 8000ca2:	73bb      	strb	r3, [r7, #14]
    uint8_t chip_id = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f001 fa25 	bl	80020f8 <null_ptr_check>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d133      	bne.n	8000d22 <bme280_init+0x8a>
    {
        while (try_count)
 8000cba:	e028      	b.n	8000d0e <bme280_init+0x76>
        {
            /* Read the chip-id of bme280 sensor */
            rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000cbc:	f107 010d 	add.w	r1, r7, #13
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	20d0      	movs	r0, #208	; 0xd0
 8000cc6:	f000 f832 	bl	8000d2e <bme280_get_regs>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	73fb      	strb	r3, [r7, #15]

            /* Check for chip id validity */
            if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID))
 8000cce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d114      	bne.n	8000d00 <bme280_init+0x68>
 8000cd6:	7b7b      	ldrb	r3, [r7, #13]
 8000cd8:	2b60      	cmp	r3, #96	; 0x60
 8000cda:	d111      	bne.n	8000d00 <bme280_init+0x68>
            {
                dev->chip_id = chip_id;
 8000cdc:	7b7a      	ldrb	r2, [r7, #13]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	701a      	strb	r2, [r3, #0]

                /* Reset the sensor */
                rslt = bme280_soft_reset(dev);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f000 f978 	bl	8000fd8 <bme280_soft_reset>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	73fb      	strb	r3, [r7, #15]
                if (rslt == BME280_OK)
 8000cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d110      	bne.n	8000d16 <bme280_init+0x7e>
                {
                    /* Read the calibration data */
                    rslt = get_calib_data(dev);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f001 f877 	bl	8001de8 <get_calib_data>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8000cfe:	e00a      	b.n	8000d16 <bme280_init+0x7e>
            }

            /* Wait for 1 ms */
            dev->delay_ms(1);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	2001      	movs	r0, #1
 8000d06:	4798      	blx	r3
            --try_count;
 8000d08:	7bbb      	ldrb	r3, [r7, #14]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	73bb      	strb	r3, [r7, #14]
        while (try_count)
 8000d0e:	7bbb      	ldrb	r3, [r7, #14]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d1d3      	bne.n	8000cbc <bme280_init+0x24>
 8000d14:	e000      	b.n	8000d18 <bme280_init+0x80>
                break;
 8000d16:	bf00      	nop
        }

        /* Chip id check failed */
        if (!try_count)
 8000d18:	7bbb      	ldrb	r3, [r7, #14]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d101      	bne.n	8000d22 <bme280_init+0x8a>
        {
            rslt = BME280_E_DEV_NOT_FOUND;
 8000d1e:	23fe      	movs	r3, #254	; 0xfe
 8000d20:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000d26:	4618      	mov	r0, r3
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000d2e:	b590      	push	{r4, r7, lr}
 8000d30:	b087      	sub	sp, #28
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	4603      	mov	r3, r0
 8000d3a:	73fb      	strb	r3, [r7, #15]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	81bb      	strh	r3, [r7, #12]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000d40:	6878      	ldr	r0, [r7, #4]
 8000d42:	f001 f9d9 	bl	80020f8 <null_ptr_check>
 8000d46:	4603      	mov	r3, r0
 8000d48:	75fb      	strb	r3, [r7, #23]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000d4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d117      	bne.n	8000d82 <bme280_get_regs+0x54>
    {
        /* If interface selected is SPI */
        if (dev->intf != BME280_I2C_INTF)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	789b      	ldrb	r3, [r3, #2]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d003      	beq.n	8000d62 <bme280_get_regs+0x34>
        {
            reg_addr = reg_addr | 0x80;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d60:	73fb      	strb	r3, [r7, #15]
        }

        /* Read the data  */
        rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	685c      	ldr	r4, [r3, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	7858      	ldrb	r0, [r3, #1]
 8000d6a:	89bb      	ldrh	r3, [r7, #12]
 8000d6c:	7bf9      	ldrb	r1, [r7, #15]
 8000d6e:	68ba      	ldr	r2, [r7, #8]
 8000d70:	47a0      	blx	r4
 8000d72:	4603      	mov	r3, r0
 8000d74:	75fb      	strb	r3, [r7, #23]

        /* Check for communication error */
        if (rslt != BME280_OK)
 8000d76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <bme280_get_regs+0x54>
        {
            rslt = BME280_E_COMM_FAIL;
 8000d7e:	23fc      	movs	r3, #252	; 0xfc
 8000d80:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8000d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	371c      	adds	r7, #28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd90      	pop	{r4, r7, pc}

08000d8e <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8000d8e:	b590      	push	{r4, r7, lr}
 8000d90:	b08d      	sub	sp, #52	; 0x34
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	603b      	str	r3, [r7, #0]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

    if (len > 10)
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
 8000da0:	2b0a      	cmp	r3, #10
 8000da2:	d901      	bls.n	8000da8 <bme280_set_regs+0x1a>
    {
        len = 10;
 8000da4:	230a      	movs	r3, #10
 8000da6:	71fb      	strb	r3, [r7, #7]
    }
    uint16_t temp_len;
    uint8_t reg_addr_cnt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000da8:	6838      	ldr	r0, [r7, #0]
 8000daa:	f001 f9a5 	bl	80020f8 <null_ptr_check>
 8000dae:	4603      	mov	r3, r0
 8000db0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check for arguments validity */
    if ((rslt == BME280_OK) && (reg_addr != NULL) && (reg_data != NULL))
 8000db4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d156      	bne.n	8000e6a <bme280_set_regs+0xdc>
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d053      	beq.n	8000e6a <bme280_set_regs+0xdc>
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d050      	beq.n	8000e6a <bme280_set_regs+0xdc>
    {
        if (len != 0)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d049      	beq.n	8000e62 <bme280_set_regs+0xd4>
        {
            temp_buff[0] = reg_data[0];
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	753b      	strb	r3, [r7, #20]

            /* If interface selected is SPI */
            if (dev->intf != BME280_I2C_INTF)
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	789b      	ldrb	r3, [r3, #2]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d01a      	beq.n	8000e12 <bme280_set_regs+0x84>
            {
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000de2:	e011      	b.n	8000e08 <bme280_set_regs+0x7a>
                {
                    reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 8000de4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000de8:	68fa      	ldr	r2, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	781a      	ldrb	r2, [r3, #0]
 8000dee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000df2:	68f9      	ldr	r1, [r7, #12]
 8000df4:	440b      	add	r3, r1
 8000df6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	701a      	strb	r2, [r3, #0]
                for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8000dfe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e02:	3301      	adds	r3, #1
 8000e04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8000e08:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8000e0c:	79fb      	ldrb	r3, [r7, #7]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d3e8      	bcc.n	8000de4 <bme280_set_regs+0x56>
                }
            }

            /* Burst write mode */
            if (len > 1)
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d90d      	bls.n	8000e34 <bme280_set_regs+0xa6>
            {
                /* Interleave register address w.r.t data for
                 * burst write
                 */
                interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8000e18:	79fb      	ldrb	r3, [r7, #7]
 8000e1a:	f107 0114 	add.w	r1, r7, #20
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	68f8      	ldr	r0, [r7, #12]
 8000e22:	f001 f825 	bl	8001e70 <interleave_reg_addr>
                temp_len = ((len * 2) - 1);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	b29b      	uxth	r3, r3
 8000e2e:	3b01      	subs	r3, #1
 8000e30:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8000e32:	e001      	b.n	8000e38 <bme280_set_regs+0xaa>
            }
            else
            {
                temp_len = len;
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	85bb      	strh	r3, [r7, #44]	; 0x2c
            }
            rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	689c      	ldr	r4, [r3, #8]
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	7858      	ldrb	r0, [r3, #1]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	7819      	ldrb	r1, [r3, #0]
 8000e44:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000e46:	f107 0214 	add.w	r2, r7, #20
 8000e4a:	47a0      	blx	r4
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            /* Check for communication error */
            if (rslt != BME280_OK)
 8000e52:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d00b      	beq.n	8000e72 <bme280_set_regs+0xe4>
            {
                rslt = BME280_E_COMM_FAIL;
 8000e5a:	23fc      	movs	r3, #252	; 0xfc
 8000e5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8000e60:	e007      	b.n	8000e72 <bme280_set_regs+0xe4>
            }
        }
        else
        {
            rslt = BME280_E_INVALID_LEN;
 8000e62:	23fd      	movs	r3, #253	; 0xfd
 8000e64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (len != 0)
 8000e68:	e003      	b.n	8000e72 <bme280_set_regs+0xe4>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8000e6a:	23ff      	movs	r3, #255	; 0xff
 8000e6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e70:	e000      	b.n	8000e74 <bme280_set_regs+0xe6>
        if (len != 0)
 8000e72:	bf00      	nop
    }

    return rslt;
 8000e74:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3734      	adds	r7, #52	; 0x34
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd90      	pop	{r4, r7, pc}

08000e80 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t sensor_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000e8c:	6838      	ldr	r0, [r7, #0]
 8000e8e:	f001 f933 	bl	80020f8 <null_ptr_check>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d13f      	bne.n	8000f1e <bme280_set_sensor_settings+0x9e>
    {
        rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8000e9e:	f107 030e 	add.w	r3, r7, #14
 8000ea2:	6839      	ldr	r1, [r7, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 f874 	bl	8000f92 <bme280_get_sensor_mode>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	73fb      	strb	r3, [r7, #15]
        if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d107      	bne.n	8000ec6 <bme280_set_sensor_settings+0x46>
 8000eb6:	7bbb      	ldrb	r3, [r7, #14]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d004      	beq.n	8000ec6 <bme280_set_sensor_settings+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8000ebc:	6838      	ldr	r0, [r7, #0]
 8000ebe:	f000 fb75 	bl	80015ac <put_device_to_sleep>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	73fb      	strb	r3, [r7, #15]
        }
        if (rslt == BME280_OK)
 8000ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d127      	bne.n	8000f1e <bme280_set_sensor_settings+0x9e>
        {
            /* Check if user wants to change oversampling
             * settings
             */
            if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	2007      	movs	r0, #7
 8000ed4:	f001 f8f4 	bl	80020c0 <are_settings_changed>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d009      	beq.n	8000ef2 <bme280_set_sensor_settings+0x72>
            {
                rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	683a      	ldr	r2, [r7, #0]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f9b1 	bl	8001250 <set_osr_settings>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73fb      	strb	r3, [r7, #15]
            }

            /* Check if user wants to change filter and/or
             * standby settings
             */
            if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d111      	bne.n	8000f1e <bme280_set_sensor_settings+0x9e>
 8000efa:	79fb      	ldrb	r3, [r7, #7]
 8000efc:	4619      	mov	r1, r3
 8000efe:	2018      	movs	r0, #24
 8000f00:	f001 f8de 	bl	80020c0 <are_settings_changed>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d009      	beq.n	8000f1e <bme280_set_sensor_settings+0x9e>
            {
                rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 fa38 	bl	800138a <set_filter_standby_settings>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b084      	sub	sp, #16
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	4603      	mov	r3, r0
 8000f32:	6039      	str	r1, [r7, #0]
 8000f34:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t last_set_mode;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f36:	6838      	ldr	r0, [r7, #0]
 8000f38:	f001 f8de 	bl	80020f8 <null_ptr_check>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8000f40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d11e      	bne.n	8000f86 <bme280_set_sensor_mode+0x5c>
    {
        rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 8000f48:	f107 030e 	add.w	r3, r7, #14
 8000f4c:	6839      	ldr	r1, [r7, #0]
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f000 f81f 	bl	8000f92 <bme280_get_sensor_mode>
 8000f54:	4603      	mov	r3, r0
 8000f56:	73fb      	strb	r3, [r7, #15]

        /* If the sensor is not in sleep mode put the device to sleep
         * mode
         */
        if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 8000f58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d107      	bne.n	8000f70 <bme280_set_sensor_mode+0x46>
 8000f60:	7bbb      	ldrb	r3, [r7, #14]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d004      	beq.n	8000f70 <bme280_set_sensor_mode+0x46>
        {
            rslt = put_device_to_sleep(dev);
 8000f66:	6838      	ldr	r0, [r7, #0]
 8000f68:	f000 fb20 	bl	80015ac <put_device_to_sleep>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	73fb      	strb	r3, [r7, #15]
        }

        /* Set the power mode */
        if (rslt == BME280_OK)
 8000f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d106      	bne.n	8000f86 <bme280_set_sensor_mode+0x5c>
        {
            rslt = write_power_mode(sensor_mode, dev);
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	6839      	ldr	r1, [r7, #0]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f000 fae2 	bl	8001546 <write_power_mode>
 8000f82:	4603      	mov	r3, r0
 8000f84:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8000f86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000f9c:	6838      	ldr	r0, [r7, #0]
 8000f9e:	f001 f8ab 	bl	80020f8 <null_ptr_check>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10e      	bne.n	8000fcc <bme280_get_sensor_mode+0x3a>
    {
        /* Read the power mode register */
        rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	20f4      	movs	r0, #244	; 0xf4
 8000fb6:	f7ff feba 	bl	8000d2e <bme280_get_regs>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	73fb      	strb	r3, [r7, #15]

        /* Assign the power mode in the device structure */
        *sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	f003 0303 	and.w	r3, r3, #3
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	701a      	strb	r2, [r3, #0]
    }

    return rslt;
 8000fcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_RESET_ADDR;
 8000fe0:	23e0      	movs	r3, #224	; 0xe0
 8000fe2:	737b      	strb	r3, [r7, #13]
    uint8_t status_reg = 0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	733b      	strb	r3, [r7, #12]
    uint8_t try_run = 5;
 8000fe8:	2305      	movs	r3, #5
 8000fea:	73bb      	strb	r3, [r7, #14]

    /* 0xB6 is the soft reset command */
    uint8_t soft_rst_cmd = BME280_SOFT_RESET_COMMAND;
 8000fec:	23b6      	movs	r3, #182	; 0xb6
 8000fee:	72fb      	strb	r3, [r7, #11]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f001 f881 	bl	80020f8 <null_ptr_check>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	73fb      	strb	r3, [r7, #15]

    /* Proceed if null check is fine */
    if (rslt == BME280_OK)
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d12f      	bne.n	8001062 <bme280_soft_reset+0x8a>
    {
        /* Write the soft reset command in the sensor */
        rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8001002:	f107 010b 	add.w	r1, r7, #11
 8001006:	f107 000d 	add.w	r0, r7, #13
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f7ff febe 	bl	8000d8e <bme280_set_regs>
 8001012:	4603      	mov	r3, r0
 8001014:	73fb      	strb	r3, [r7, #15]

        if (rslt == BME280_OK)
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d121      	bne.n	8001062 <bme280_soft_reset+0x8a>
        {
            /* If NVM not copied yet, Wait for NVM to copy */
            do
            {
                /* As per data sheet - Table 1, startup time is 2 ms. */
                dev->delay_ms(2);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	68db      	ldr	r3, [r3, #12]
 8001022:	2002      	movs	r0, #2
 8001024:	4798      	blx	r3
                rslt = bme280_get_regs(BME280_STATUS_REG_ADDR, &status_reg, 1, dev);
 8001026:	f107 010c 	add.w	r1, r7, #12
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	2201      	movs	r2, #1
 800102e:	20f3      	movs	r0, #243	; 0xf3
 8001030:	f7ff fe7d 	bl	8000d2e <bme280_get_regs>
 8001034:	4603      	mov	r3, r0
 8001036:	73fb      	strb	r3, [r7, #15]
            } while ((rslt == BME280_OK) && (try_run--) && (status_reg & BME280_STATUS_IM_UPDATE));
 8001038:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d109      	bne.n	8001054 <bme280_soft_reset+0x7c>
 8001040:	7bbb      	ldrb	r3, [r7, #14]
 8001042:	1e5a      	subs	r2, r3, #1
 8001044:	73ba      	strb	r2, [r7, #14]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d004      	beq.n	8001054 <bme280_soft_reset+0x7c>
 800104a:	7b3b      	ldrb	r3, [r7, #12]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1e4      	bne.n	800101e <bme280_soft_reset+0x46>

            if (status_reg & BME280_STATUS_IM_UPDATE)
 8001054:	7b3b      	ldrb	r3, [r7, #12]
 8001056:	f003 0301 	and.w	r3, r3, #1
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <bme280_soft_reset+0x8a>
            {
                rslt = BME280_E_NVM_COPY_FAILED;
 800105e:	23fa      	movs	r3, #250	; 0xfa
 8001060:	73fb      	strb	r3, [r7, #15]
            }

        }
    }

    return rslt;
 8001062:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001066:	4618      	mov	r0, r3
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b08a      	sub	sp, #40	; 0x28
 8001072:	af00      	add	r7, sp, #0
 8001074:	4603      	mov	r3, r0
 8001076:	60b9      	str	r1, [r7, #8]
 8001078:	607a      	str	r2, [r7, #4]
 800107a:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Array to store the pressure, temperature and humidity data read from
     * the sensor
     */
    uint8_t reg_data[BME280_P_T_H_DATA_LEN] = { 0 };
 800107c:	f107 031c 	add.w	r3, r7, #28
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
    struct bme280_uncomp_data uncomp_data = { 0 };
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
 800108e:	605a      	str	r2, [r3, #4]
 8001090:	609a      	str	r2, [r3, #8]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f001 f830 	bl	80020f8 <null_ptr_check>
 8001098:	4603      	mov	r3, r0
 800109a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if ((rslt == BME280_OK) && (comp_data != NULL))
 800109e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d124      	bne.n	80010f0 <bme280_get_sensor_data+0x82>
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d021      	beq.n	80010f0 <bme280_get_sensor_data+0x82>
    {
        /* Read the pressure and temperature data from the sensor */
        rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 80010ac:	f107 011c 	add.w	r1, r7, #28
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2208      	movs	r2, #8
 80010b4:	20f7      	movs	r0, #247	; 0xf7
 80010b6:	f7ff fe3a 	bl	8000d2e <bme280_get_regs>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80010c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d116      	bne.n	80010f6 <bme280_get_sensor_data+0x88>
        {
            /* Parse the read data from the sensor */
            bme280_parse_sensor_data(reg_data, &uncomp_data);
 80010c8:	f107 0210 	add.w	r2, r7, #16
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4611      	mov	r1, r2
 80010d2:	4618      	mov	r0, r3
 80010d4:	f000 f815 	bl	8001102 <bme280_parse_sensor_data>

            /* Compensate the pressure and/or temperature and/or
             * humidity data from the sensor
             */
            rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	3310      	adds	r3, #16
 80010dc:	f107 0110 	add.w	r1, r7, #16
 80010e0:	7bf8      	ldrb	r0, [r7, #15]
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f000 f853 	bl	800118e <bme280_compensate_data>
 80010e8:	4603      	mov	r3, r0
 80010ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 80010ee:	e002      	b.n	80010f6 <bme280_get_sensor_data+0x88>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 80010f0:	23ff      	movs	r3, #255	; 0xff
 80010f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    return rslt;
 80010f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001102:	b480      	push	{r7}
 8001104:	b087      	sub	sp, #28
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
 800110a:	6039      	str	r1, [r7, #0]
    uint32_t data_xlsb;
    uint32_t data_lsb;
    uint32_t data_msb;

    /* Store the parsed register values for pressure data */
    data_msb = (uint32_t)reg_data[0] << 12;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	031b      	lsls	r3, r3, #12
 8001112:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[1] << 4;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3301      	adds	r3, #1
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	011b      	lsls	r3, r3, #4
 800111c:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[2] >> 4;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3302      	adds	r3, #2
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	b2db      	uxtb	r3, r3
 8001128:	60fb      	str	r3, [r7, #12]
    uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	431a      	orrs	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	431a      	orrs	r2, r3
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	601a      	str	r2, [r3, #0]

    /* Store the parsed register values for temperature data */
    data_msb = (uint32_t)reg_data[3] << 12;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3303      	adds	r3, #3
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	031b      	lsls	r3, r3, #12
 8001140:	617b      	str	r3, [r7, #20]
    data_lsb = (uint32_t)reg_data[4] << 4;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	3304      	adds	r3, #4
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	011b      	lsls	r3, r3, #4
 800114a:	613b      	str	r3, [r7, #16]
    data_xlsb = (uint32_t)reg_data[5] >> 4;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	3305      	adds	r3, #5
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	091b      	lsrs	r3, r3, #4
 8001154:	b2db      	uxtb	r3, r3
 8001156:	60fb      	str	r3, [r7, #12]
    uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 8001158:	697a      	ldr	r2, [r7, #20]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	431a      	orrs	r2, r3
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	431a      	orrs	r2, r3
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	605a      	str	r2, [r3, #4]

    /* Store the parsed register values for temperature data */
    data_lsb = (uint32_t)reg_data[6] << 8;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	3306      	adds	r3, #6
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	613b      	str	r3, [r7, #16]
    data_msb = (uint32_t)reg_data[7];
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3307      	adds	r3, #7
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	617b      	str	r3, [r7, #20]
    uncomp_data->humidity = data_msb | data_lsb;
 8001178:	697a      	ldr	r2, [r7, #20]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	431a      	orrs	r2, r3
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	609a      	str	r2, [r3, #8]
}
 8001182:	bf00      	nop
 8001184:	371c      	adds	r7, #28
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <bme280_compensate_data>:
 */
int8_t bme280_compensate_data(uint8_t sensor_comp,
                              const struct bme280_uncomp_data *uncomp_data,
                              struct bme280_data *comp_data,
                              struct bme280_calib_data *calib_data)
{
 800118e:	b590      	push	{r4, r7, lr}
 8001190:	b087      	sub	sp, #28
 8001192:	af00      	add	r7, sp, #0
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	603b      	str	r3, [r7, #0]
 800119a:	4603      	mov	r3, r0
 800119c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	75fb      	strb	r3, [r7, #23]

    if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL))
 80011a2:	68bb      	ldr	r3, [r7, #8]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d04b      	beq.n	8001240 <bme280_compensate_data+0xb2>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d048      	beq.n	8001240 <bme280_compensate_data+0xb2>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d045      	beq.n	8001240 <bme280_compensate_data+0xb2>
    {
        /* Initialize to zero */
        comp_data->temperature = 0;
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	f04f 0300 	mov.w	r3, #0
 80011ba:	f04f 0400 	mov.w	r4, #0
 80011be:	e9c2 3402 	strd	r3, r4, [r2, #8]
        comp_data->pressure = 0;
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	f04f 0400 	mov.w	r4, #0
 80011cc:	e9c2 3400 	strd	r3, r4, [r2]
        comp_data->humidity = 0;
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	f04f 0300 	mov.w	r3, #0
 80011d6:	f04f 0400 	mov.w	r4, #0
 80011da:	e9c2 3404 	strd	r3, r4, [r2, #16]

        /* If pressure or temperature component is selected */
        if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM))
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	f003 0307 	and.w	r3, r3, #7
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00a      	beq.n	80011fe <bme280_compensate_data+0x70>
        {
            /* Compensate the temperature data */
            comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 80011e8:	6839      	ldr	r1, [r7, #0]
 80011ea:	68b8      	ldr	r0, [r7, #8]
 80011ec:	f000 fa2c 	bl	8001648 <compensate_temperature>
 80011f0:	eeb0 7a40 	vmov.f32	s14, s0
 80011f4:	eef0 7a60 	vmov.f32	s15, s1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	ed83 7b02 	vstr	d7, [r3, #8]
        }
        if (sensor_comp & BME280_PRESS)
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00a      	beq.n	800121e <bme280_compensate_data+0x90>
        {
            /* Compensate the pressure data */
            comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 8001208:	6839      	ldr	r1, [r7, #0]
 800120a:	68b8      	ldr	r0, [r7, #8]
 800120c:	f000 faf0 	bl	80017f0 <compensate_pressure>
 8001210:	eeb0 7a40 	vmov.f32	s14, s0
 8001214:	eef0 7a60 	vmov.f32	s15, s1
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	ed83 7b00 	vstr	d7, [r3]
        }
        if (sensor_comp & BME280_HUM)
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00d      	beq.n	8001244 <bme280_compensate_data+0xb6>
        {
            /* Compensate the humidity data */
            comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 8001228:	6839      	ldr	r1, [r7, #0]
 800122a:	68b8      	ldr	r0, [r7, #8]
 800122c:	f000 fcb8 	bl	8001ba0 <compensate_humidity>
 8001230:	eeb0 7a40 	vmov.f32	s14, s0
 8001234:	eef0 7a60 	vmov.f32	s15, s1
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	ed83 7b04 	vstr	d7, [r3, #16]
        if (sensor_comp & BME280_HUM)
 800123e:	e001      	b.n	8001244 <bme280_compensate_data+0xb6>
        }
    }
    else
    {
        rslt = BME280_E_NULL_PTR;
 8001240:	23ff      	movs	r3, #255	; 0xff
 8001242:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001244:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001248:	4618      	mov	r0, r3
 800124a:	371c      	adds	r7, #28
 800124c:	46bd      	mov	sp, r7
 800124e:	bd90      	pop	{r4, r7, pc}

08001250 <set_osr_settings>:
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings,
                               const struct bme280_settings *settings,
                               const struct bme280_dev *dev)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
 800125c:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 800125e:	2301      	movs	r3, #1
 8001260:	75fb      	strb	r3, [r7, #23]

    if (desired_settings & BME280_OSR_HUM_SEL)
 8001262:	7bfb      	ldrb	r3, [r7, #15]
 8001264:	f003 0304 	and.w	r3, r3, #4
 8001268:	2b00      	cmp	r3, #0
 800126a:	d005      	beq.n	8001278 <set_osr_settings+0x28>
    {
        rslt = set_osr_humidity_settings(settings, dev);
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	68b8      	ldr	r0, [r7, #8]
 8001270:	f000 f815 	bl	800129e <set_osr_humidity_settings>
 8001274:	4603      	mov	r3, r0
 8001276:	75fb      	strb	r3, [r7, #23]
    }
    if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	f003 0303 	and.w	r3, r3, #3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d007      	beq.n	8001292 <set_osr_settings+0x42>
    {
        rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001282:	7bfb      	ldrb	r3, [r7, #15]
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	4618      	mov	r0, r3
 800128a:	f000 f842 	bl	8001312 <set_osr_press_temp_settings>
 800128e:	4603      	mov	r3, r0
 8001290:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8001292:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001296:	4618      	mov	r0, r3
 8001298:	3718      	adds	r7, #24
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}

0800129e <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t ctrl_hum;
    uint8_t ctrl_meas;
    uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80012a8:	23f2      	movs	r3, #242	; 0xf2
 80012aa:	733b      	strb	r3, [r7, #12]

    ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	789b      	ldrb	r3, [r3, #2]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	73bb      	strb	r3, [r7, #14]

    /* Write the humidity control value in the register */
    rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 80012b8:	f107 010e 	add.w	r1, r7, #14
 80012bc:	f107 000c 	add.w	r0, r7, #12
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f7ff fd63 	bl	8000d8e <bme280_set_regs>
 80012c8:	4603      	mov	r3, r0
 80012ca:	73fb      	strb	r3, [r7, #15]

    /* Humidity related changes will be only effective after a
     * write operation to ctrl_meas register
     */
    if (rslt == BME280_OK)
 80012cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d118      	bne.n	8001306 <set_osr_humidity_settings+0x68>
    {
        reg_addr = BME280_CTRL_MEAS_ADDR;
 80012d4:	23f4      	movs	r3, #244	; 0xf4
 80012d6:	733b      	strb	r3, [r7, #12]
        rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 80012d8:	7b38      	ldrb	r0, [r7, #12]
 80012da:	f107 010d 	add.w	r1, r7, #13
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	2201      	movs	r2, #1
 80012e2:	f7ff fd24 	bl	8000d2e <bme280_get_regs>
 80012e6:	4603      	mov	r3, r0
 80012e8:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME280_OK)
 80012ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d109      	bne.n	8001306 <set_osr_humidity_settings+0x68>
        {
            rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 80012f2:	f107 010d 	add.w	r1, r7, #13
 80012f6:	f107 000c 	add.w	r0, r7, #12
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f7ff fd46 	bl	8000d8e <bme280_set_regs>
 8001302:	4603      	mov	r3, r0
 8001304:	73fb      	strb	r3, [r7, #15]
        }
    }

    return rslt;
 8001306:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <set_osr_press_temp_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
 800131e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001320:	23f4      	movs	r3, #244	; 0xf4
 8001322:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001324:	7db8      	ldrb	r0, [r7, #22]
 8001326:	f107 0115 	add.w	r1, r7, #21
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2201      	movs	r2, #1
 800132e:	f7ff fcfe 	bl	8000d2e <bme280_get_regs>
 8001332:	4603      	mov	r3, r0
 8001334:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 8001336:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d11f      	bne.n	800137e <set_osr_press_temp_settings+0x6c>
    {
        if (desired_settings & BME280_OSR_PRESS_SEL)
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <set_osr_press_temp_settings+0x42>
        {
            fill_osr_press_settings(&reg_data, settings);
 8001348:	f107 0315 	add.w	r3, r7, #21
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	4618      	mov	r0, r3
 8001350:	f000 f88e 	bl	8001470 <fill_osr_press_settings>
        }
        if (desired_settings & BME280_OSR_TEMP_SEL)
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	2b00      	cmp	r3, #0
 800135c:	d005      	beq.n	800136a <set_osr_press_temp_settings+0x58>
        {
            fill_osr_temp_settings(&reg_data, settings);
 800135e:	f107 0315 	add.w	r3, r7, #21
 8001362:	68b9      	ldr	r1, [r7, #8]
 8001364:	4618      	mov	r0, r3
 8001366:	f000 f8a0 	bl	80014aa <fill_osr_temp_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 800136a:	f107 0115 	add.w	r1, r7, #21
 800136e:	f107 0016 	add.w	r0, r7, #22
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2201      	movs	r2, #1
 8001376:	f7ff fd0a 	bl	8000d8e <bme280_set_regs>
 800137a:	4603      	mov	r3, r0
 800137c:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 800137e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3718      	adds	r7, #24
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}

0800138a <set_filter_standby_settings>:
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings,
                                          const struct bme280_settings *settings,
                                          const struct bme280_dev *dev)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b086      	sub	sp, #24
 800138e:	af00      	add	r7, sp, #0
 8001390:	4603      	mov	r3, r0
 8001392:	60b9      	str	r1, [r7, #8]
 8001394:	607a      	str	r2, [r7, #4]
 8001396:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t reg_addr = BME280_CONFIG_ADDR;
 8001398:	23f5      	movs	r3, #245	; 0xf5
 800139a:	75bb      	strb	r3, [r7, #22]
    uint8_t reg_data;

    rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800139c:	7db8      	ldrb	r0, [r7, #22]
 800139e:	f107 0115 	add.w	r1, r7, #21
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f7ff fcc2 	bl	8000d2e <bme280_get_regs>
 80013aa:	4603      	mov	r3, r0
 80013ac:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 80013ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d11f      	bne.n	80013f6 <set_filter_standby_settings+0x6c>
    {
        if (desired_settings & BME280_FILTER_SEL)
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	f003 0308 	and.w	r3, r3, #8
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <set_filter_standby_settings+0x42>
        {
            fill_filter_settings(&reg_data, settings);
 80013c0:	f107 0315 	add.w	r3, r7, #21
 80013c4:	68b9      	ldr	r1, [r7, #8]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f81b 	bl	8001402 <fill_filter_settings>
        }
        if (desired_settings & BME280_STANDBY_SEL)
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	f003 0310 	and.w	r3, r3, #16
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d005      	beq.n	80013e2 <set_filter_standby_settings+0x58>
        {
            fill_standby_settings(&reg_data, settings);
 80013d6:	f107 0315 	add.w	r3, r7, #21
 80013da:	68b9      	ldr	r1, [r7, #8]
 80013dc:	4618      	mov	r0, r3
 80013de:	f000 f82d 	bl	800143c <fill_standby_settings>
        }

        /* Write the oversampling settings in the register */
        rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80013e2:	f107 0115 	add.w	r1, r7, #21
 80013e6:	f107 0016 	add.w	r0, r7, #22
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f7ff fcce 	bl	8000d8e <bme280_set_regs>
 80013f2:	4603      	mov	r3, r0
 80013f4:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 80013f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3718      	adds	r7, #24
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001402:	b480      	push	{r7}
 8001404:	b083      	sub	sp, #12
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b25b      	sxtb	r3, r3
 8001412:	f023 031c 	bic.w	r3, r3, #28
 8001416:	b25a      	sxtb	r2, r3
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	78db      	ldrb	r3, [r3, #3]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	b25b      	sxtb	r3, r3
 8001420:	f003 031c 	and.w	r3, r3, #28
 8001424:	b25b      	sxtb	r3, r3
 8001426:	4313      	orrs	r3, r2
 8001428:	b25b      	sxtb	r3, r3
 800142a:	b2da      	uxtb	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	701a      	strb	r2, [r3, #0]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
 8001444:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b25b      	sxtb	r3, r3
 800144c:	f003 031f 	and.w	r3, r3, #31
 8001450:	b25a      	sxtb	r2, r3
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	791b      	ldrb	r3, [r3, #4]
 8001456:	015b      	lsls	r3, r3, #5
 8001458:	b25b      	sxtb	r3, r3
 800145a:	4313      	orrs	r3, r2
 800145c:	b25b      	sxtb	r3, r3
 800145e:	b2da      	uxtb	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	701a      	strb	r2, [r3, #0]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	b25b      	sxtb	r3, r3
 8001480:	f023 031c 	bic.w	r3, r3, #28
 8001484:	b25a      	sxtb	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	b25b      	sxtb	r3, r3
 800148e:	f003 031c 	and.w	r3, r3, #28
 8001492:	b25b      	sxtb	r3, r3
 8001494:	4313      	orrs	r3, r2
 8001496:	b25b      	sxtb	r3, r3
 8001498:	b2da      	uxtb	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	370c      	adds	r7, #12
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr

080014aa <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
 80014b2:	6039      	str	r1, [r7, #0]
    *reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	b25b      	sxtb	r3, r3
 80014ba:	f003 031f 	and.w	r3, r3, #31
 80014be:	b25a      	sxtb	r2, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	785b      	ldrb	r3, [r3, #1]
 80014c4:	015b      	lsls	r3, r3, #5
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	4313      	orrs	r3, r2
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	701a      	strb	r2, [r3, #0]
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
 80014e6:	6039      	str	r1, [r7, #0]
    settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	f003 0307 	and.w	r3, r3, #7
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	709a      	strb	r2, [r3, #2]
    settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	3302      	adds	r3, #2
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	109b      	asrs	r3, r3, #2
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	f003 0307 	and.w	r3, r3, #7
 8001504:	b2da      	uxtb	r2, r3
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	701a      	strb	r2, [r3, #0]
    settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	3302      	adds	r3, #2
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	095b      	lsrs	r3, r3, #5
 8001512:	b2da      	uxtb	r2, r3
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	705a      	strb	r2, [r3, #1]
    settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3303      	adds	r3, #3
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	109b      	asrs	r3, r3, #2
 8001520:	b2db      	uxtb	r3, r3
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	b2da      	uxtb	r2, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	70da      	strb	r2, [r3, #3]
    settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3303      	adds	r3, #3
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	095b      	lsrs	r3, r3, #5
 8001534:	b2da      	uxtb	r2, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	711a      	strb	r2, [r3, #4]
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <write_power_mode>:

/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b084      	sub	sp, #16
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	6039      	str	r1, [r7, #0]
 8001550:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 8001552:	23f4      	movs	r3, #244	; 0xf4
 8001554:	73bb      	strb	r3, [r7, #14]

    /* Variable to store the value read from power mode register */
    uint8_t sensor_mode_reg_val;

    /* Read the power mode register */
    rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 8001556:	7bb8      	ldrb	r0, [r7, #14]
 8001558:	f107 010d 	add.w	r1, r7, #13
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	2201      	movs	r2, #1
 8001560:	f7ff fbe5 	bl	8000d2e <bme280_get_regs>
 8001564:	4603      	mov	r3, r0
 8001566:	73fb      	strb	r3, [r7, #15]

    /* Set the power mode */
    if (rslt == BME280_OK)
 8001568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d117      	bne.n	80015a0 <write_power_mode+0x5a>
    {
        sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001570:	7b7b      	ldrb	r3, [r7, #13]
 8001572:	b25b      	sxtb	r3, r3
 8001574:	f023 0303 	bic.w	r3, r3, #3
 8001578:	b25a      	sxtb	r2, r3
 800157a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157e:	f003 0303 	and.w	r3, r3, #3
 8001582:	b25b      	sxtb	r3, r3
 8001584:	4313      	orrs	r3, r2
 8001586:	b25b      	sxtb	r3, r3
 8001588:	b2db      	uxtb	r3, r3
 800158a:	737b      	strb	r3, [r7, #13]

        /* Write the power mode in the register */
        rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 800158c:	f107 010d 	add.w	r1, r7, #13
 8001590:	f107 000e 	add.w	r0, r7, #14
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2201      	movs	r2, #1
 8001598:	f7ff fbf9 	bl	8000d8e <bme280_set_regs>
 800159c:	4603      	mov	r3, r0
 800159e:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80015a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3710      	adds	r7, #16
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}

080015ac <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b086      	sub	sp, #24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data[4];
    struct bme280_settings settings;

    rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 80015b4:	f107 0110 	add.w	r1, r7, #16
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2204      	movs	r2, #4
 80015bc:	20f2      	movs	r0, #242	; 0xf2
 80015be:	f7ff fbb6 	bl	8000d2e <bme280_get_regs>
 80015c2:	4603      	mov	r3, r0
 80015c4:	75fb      	strb	r3, [r7, #23]
    if (rslt == BME280_OK)
 80015c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d118      	bne.n	8001600 <put_device_to_sleep+0x54>
    {
        parse_device_settings(reg_data, &settings);
 80015ce:	f107 0208 	add.w	r2, r7, #8
 80015d2:	f107 0310 	add.w	r3, r7, #16
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff ff80 	bl	80014de <parse_device_settings>
        rslt = bme280_soft_reset(dev);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fcfa 	bl	8000fd8 <bme280_soft_reset>
 80015e4:	4603      	mov	r3, r0
 80015e6:	75fb      	strb	r3, [r7, #23]
        if (rslt == BME280_OK)
 80015e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d107      	bne.n	8001600 <put_device_to_sleep+0x54>
        {
            rslt = reload_device_settings(&settings, dev);
 80015f0:	f107 0308 	add.w	r3, r7, #8
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f808 	bl	800160c <reload_device_settings>
 80015fc:	4603      	mov	r3, r0
 80015fe:	75fb      	strb	r3, [r7, #23]
        }
    }

    return rslt;
 8001600:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001604:	4618      	mov	r0, r3
 8001606:	3718      	adds	r7, #24
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
 8001614:	6039      	str	r1, [r7, #0]
    int8_t rslt;

    rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	201f      	movs	r0, #31
 800161c:	f7ff fe18 	bl	8001250 <set_osr_settings>
 8001620:	4603      	mov	r3, r0
 8001622:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME280_OK)
 8001624:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d106      	bne.n	800163a <reload_device_settings+0x2e>
    {
        rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	201f      	movs	r0, #31
 8001632:	f7ff feaa 	bl	800138a <set_filter_standby_settings>
 8001636:	4603      	mov	r3, r0
 8001638:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800163e:	4618      	mov	r0, r3
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <compensate_temperature>:
/*!
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data, struct bme280_calib_data *calib_data)
{
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b08c      	sub	sp, #48	; 0x30
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double temperature;
    double temperature_min = -40;
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	4c60      	ldr	r4, [pc, #384]	; (80017d8 <compensate_temperature+0x190>)
 8001658:	e9c7 3408 	strd	r3, r4, [r7, #32]
    double temperature_max = 85;
 800165c:	f04f 0300 	mov.w	r3, #0
 8001660:	4c5e      	ldr	r4, [pc, #376]	; (80017dc <compensate_temperature+0x194>)
 8001662:	e9c7 3406 	strd	r3, r4, [r7, #24]

    var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff52 	bl	8000514 <__aeabi_ui2d>
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	4b5a      	ldr	r3, [pc, #360]	; (80017e0 <compensate_temperature+0x198>)
 8001676:	f7ff f8f1 	bl	800085c <__aeabi_ddiv>
 800167a:	4603      	mov	r3, r0
 800167c:	460c      	mov	r4, r1
 800167e:	4625      	mov	r5, r4
 8001680:	461c      	mov	r4, r3
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7fe ff44 	bl	8000514 <__aeabi_ui2d>
 800168c:	f04f 0200 	mov.w	r2, #0
 8001690:	4b54      	ldr	r3, [pc, #336]	; (80017e4 <compensate_temperature+0x19c>)
 8001692:	f7ff f8e3 	bl	800085c <__aeabi_ddiv>
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	4620      	mov	r0, r4
 800169c:	4629      	mov	r1, r5
 800169e:	f7fe fdfb 	bl	8000298 <__aeabi_dsub>
 80016a2:	4603      	mov	r3, r0
 80016a4:	460c      	mov	r4, r1
 80016a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var1 = var1 * ((double)calib_data->dig_T2);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7fe ff3f 	bl	8000534 <__aeabi_i2d>
 80016b6:	4603      	mov	r3, r0
 80016b8:	460c      	mov	r4, r1
 80016ba:	461a      	mov	r2, r3
 80016bc:	4623      	mov	r3, r4
 80016be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016c2:	f7fe ffa1 	bl	8000608 <__aeabi_dmul>
 80016c6:	4603      	mov	r3, r0
 80016c8:	460c      	mov	r4, r1
 80016ca:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7fe ff1e 	bl	8000514 <__aeabi_ui2d>
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80016e0:	f7ff f8bc 	bl	800085c <__aeabi_ddiv>
 80016e4:	4603      	mov	r3, r0
 80016e6:	460c      	mov	r4, r1
 80016e8:	4625      	mov	r5, r4
 80016ea:	461c      	mov	r4, r3
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	881b      	ldrh	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7fe ff0f 	bl	8000514 <__aeabi_ui2d>
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	4b3b      	ldr	r3, [pc, #236]	; (80017e8 <compensate_temperature+0x1a0>)
 80016fc:	f7ff f8ae 	bl	800085c <__aeabi_ddiv>
 8001700:	4602      	mov	r2, r0
 8001702:	460b      	mov	r3, r1
 8001704:	4620      	mov	r0, r4
 8001706:	4629      	mov	r1, r5
 8001708:	f7fe fdc6 	bl	8000298 <__aeabi_dsub>
 800170c:	4603      	mov	r3, r0
 800170e:	460c      	mov	r4, r1
 8001710:	e9c7 3402 	strd	r3, r4, [r7, #8]
    var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8001714:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001718:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800171c:	f7fe ff74 	bl	8000608 <__aeabi_dmul>
 8001720:	4603      	mov	r3, r0
 8001722:	460c      	mov	r4, r1
 8001724:	4625      	mov	r5, r4
 8001726:	461c      	mov	r4, r3
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe ff00 	bl	8000534 <__aeabi_i2d>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4620      	mov	r0, r4
 800173a:	4629      	mov	r1, r5
 800173c:	f7fe ff64 	bl	8000608 <__aeabi_dmul>
 8001740:	4603      	mov	r3, r0
 8001742:	460c      	mov	r4, r1
 8001744:	e9c7 3402 	strd	r3, r4, [r7, #8]
    calib_data->t_fine = (int32_t)(var1 + var2);
 8001748:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800174c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001750:	f7fe fda4 	bl	800029c <__adddf3>
 8001754:	4603      	mov	r3, r0
 8001756:	460c      	mov	r4, r1
 8001758:	4618      	mov	r0, r3
 800175a:	4621      	mov	r1, r4
 800175c:	f7ff fa04 	bl	8000b68 <__aeabi_d2iz>
 8001760:	4602      	mov	r2, r0
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
    temperature = (var1 + var2) / 5120.0;
 8001766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800176a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800176e:	f7fe fd95 	bl	800029c <__adddf3>
 8001772:	4603      	mov	r3, r0
 8001774:	460c      	mov	r4, r1
 8001776:	4618      	mov	r0, r3
 8001778:	4621      	mov	r1, r4
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	4b1b      	ldr	r3, [pc, #108]	; (80017ec <compensate_temperature+0x1a4>)
 8001780:	f7ff f86c 	bl	800085c <__aeabi_ddiv>
 8001784:	4603      	mov	r3, r0
 8001786:	460c      	mov	r4, r1
 8001788:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    if (temperature < temperature_min)
 800178c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001790:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001794:	f7ff f9aa 	bl	8000aec <__aeabi_dcmplt>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d004      	beq.n	80017a8 <compensate_temperature+0x160>
    {
        temperature = temperature_min;
 800179e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80017a2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 80017a6:	e00c      	b.n	80017c2 <compensate_temperature+0x17a>
    }
    else if (temperature > temperature_max)
 80017a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017ac:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017b0:	f7ff f9ba 	bl	8000b28 <__aeabi_dcmpgt>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <compensate_temperature+0x17a>
    {
        temperature = temperature_max;
 80017ba:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80017be:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    }

    return temperature;
 80017c2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 80017c6:	ec44 3b17 	vmov	d7, r3, r4
}
 80017ca:	eeb0 0a47 	vmov.f32	s0, s14
 80017ce:	eef0 0a67 	vmov.f32	s1, s15
 80017d2:	3730      	adds	r7, #48	; 0x30
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bdb0      	pop	{r4, r5, r7, pc}
 80017d8:	c0440000 	.word	0xc0440000
 80017dc:	40554000 	.word	0x40554000
 80017e0:	40d00000 	.word	0x40d00000
 80017e4:	40900000 	.word	0x40900000
 80017e8:	40c00000 	.word	0x40c00000
 80017ec:	40b40000 	.word	0x40b40000

080017f0 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 80017f0:	b5b0      	push	{r4, r5, r7, lr}
 80017f2:	b08e      	sub	sp, #56	; 0x38
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	6039      	str	r1, [r7, #0]
    double var1;
    double var2;
    double var3;
    double pressure;
    double pressure_min = 30000.0;
 80017fa:	a4dd      	add	r4, pc, #884	; (adr r4, 8001b70 <compensate_pressure+0x380>)
 80017fc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001800:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    double pressure_max = 110000.0;
 8001804:	a4dc      	add	r4, pc, #880	; (adr r4, 8001b78 <compensate_pressure+0x388>)
 8001806:	e9d4 3400 	ldrd	r3, r4, [r4]
 800180a:	e9c7 3408 	strd	r3, r4, [r7, #32]

    var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	4618      	mov	r0, r3
 8001814:	f7fe fe8e 	bl	8000534 <__aeabi_i2d>
 8001818:	f04f 0200 	mov.w	r2, #0
 800181c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001820:	f7ff f81c 	bl	800085c <__aeabi_ddiv>
 8001824:	4603      	mov	r3, r0
 8001826:	460c      	mov	r4, r1
 8001828:	4618      	mov	r0, r3
 800182a:	4621      	mov	r1, r4
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	4bc5      	ldr	r3, [pc, #788]	; (8001b48 <compensate_pressure+0x358>)
 8001832:	f7fe fd31 	bl	8000298 <__aeabi_dsub>
 8001836:	4603      	mov	r3, r0
 8001838:	460c      	mov	r4, r1
 800183a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 800183e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001842:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001846:	f7fe fedf 	bl	8000608 <__aeabi_dmul>
 800184a:	4603      	mov	r3, r0
 800184c:	460c      	mov	r4, r1
 800184e:	4625      	mov	r5, r4
 8001850:	461c      	mov	r4, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe6b 	bl	8000534 <__aeabi_i2d>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4620      	mov	r0, r4
 8001864:	4629      	mov	r1, r5
 8001866:	f7fe fecf 	bl	8000608 <__aeabi_dmul>
 800186a:	4603      	mov	r3, r0
 800186c:	460c      	mov	r4, r1
 800186e:	4618      	mov	r0, r3
 8001870:	4621      	mov	r1, r4
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4bb5      	ldr	r3, [pc, #724]	; (8001b4c <compensate_pressure+0x35c>)
 8001878:	f7fe fff0 	bl	800085c <__aeabi_ddiv>
 800187c:	4603      	mov	r3, r0
 800187e:	460c      	mov	r4, r1
 8001880:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe52 	bl	8000534 <__aeabi_i2d>
 8001890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001894:	f7fe feb8 	bl	8000608 <__aeabi_dmul>
 8001898:	4603      	mov	r3, r0
 800189a:	460c      	mov	r4, r1
 800189c:	4618      	mov	r0, r3
 800189e:	4621      	mov	r1, r4
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	f7fe fcfa 	bl	800029c <__adddf3>
 80018a8:	4603      	mov	r3, r0
 80018aa:	460c      	mov	r4, r1
 80018ac:	461a      	mov	r2, r3
 80018ae:	4623      	mov	r3, r4
 80018b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018b4:	f7fe fcf2 	bl	800029c <__adddf3>
 80018b8:	4603      	mov	r3, r0
 80018ba:	460c      	mov	r4, r1
 80018bc:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	4ba2      	ldr	r3, [pc, #648]	; (8001b50 <compensate_pressure+0x360>)
 80018c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80018ca:	f7fe ffc7 	bl	800085c <__aeabi_ddiv>
 80018ce:	4603      	mov	r3, r0
 80018d0:	460c      	mov	r4, r1
 80018d2:	4625      	mov	r5, r4
 80018d4:	461c      	mov	r4, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7fe fe29 	bl	8000534 <__aeabi_i2d>
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	4b9b      	ldr	r3, [pc, #620]	; (8001b54 <compensate_pressure+0x364>)
 80018e8:	f7fe fe8e 	bl	8000608 <__aeabi_dmul>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4620      	mov	r0, r4
 80018f2:	4629      	mov	r1, r5
 80018f4:	f7fe fcd2 	bl	800029c <__adddf3>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001906:	4618      	mov	r0, r3
 8001908:	f7fe fe14 	bl	8000534 <__aeabi_i2d>
 800190c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001910:	f7fe fe7a 	bl	8000608 <__aeabi_dmul>
 8001914:	4603      	mov	r3, r0
 8001916:	460c      	mov	r4, r1
 8001918:	4618      	mov	r0, r3
 800191a:	4621      	mov	r1, r4
 800191c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001920:	f7fe fe72 	bl	8000608 <__aeabi_dmul>
 8001924:	4603      	mov	r3, r0
 8001926:	460c      	mov	r4, r1
 8001928:	4618      	mov	r0, r3
 800192a:	4621      	mov	r1, r4
 800192c:	f04f 0200 	mov.w	r2, #0
 8001930:	4b89      	ldr	r3, [pc, #548]	; (8001b58 <compensate_pressure+0x368>)
 8001932:	f7fe ff93 	bl	800085c <__aeabi_ddiv>
 8001936:	4603      	mov	r3, r0
 8001938:	460c      	mov	r4, r1
 800193a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fdf5 	bl	8000534 <__aeabi_i2d>
 800194a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800194e:	f7fe fe5b 	bl	8000608 <__aeabi_dmul>
 8001952:	4603      	mov	r3, r0
 8001954:	460c      	mov	r4, r1
 8001956:	4618      	mov	r0, r3
 8001958:	4621      	mov	r1, r4
 800195a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800195e:	f7fe fc9d 	bl	800029c <__adddf3>
 8001962:	4603      	mov	r3, r0
 8001964:	460c      	mov	r4, r1
 8001966:	4618      	mov	r0, r3
 8001968:	4621      	mov	r1, r4
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	4b7a      	ldr	r3, [pc, #488]	; (8001b58 <compensate_pressure+0x368>)
 8001970:	f7fe ff74 	bl	800085c <__aeabi_ddiv>
 8001974:	4603      	mov	r3, r0
 8001976:	460c      	mov	r4, r1
 8001978:	e9c7 3406 	strd	r3, r4, [r7, #24]
    var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 800197c:	f04f 0200 	mov.w	r2, #0
 8001980:	4b72      	ldr	r3, [pc, #456]	; (8001b4c <compensate_pressure+0x35c>)
 8001982:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001986:	f7fe ff69 	bl	800085c <__aeabi_ddiv>
 800198a:	4603      	mov	r3, r0
 800198c:	460c      	mov	r4, r1
 800198e:	4618      	mov	r0, r3
 8001990:	4621      	mov	r1, r4
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b71      	ldr	r3, [pc, #452]	; (8001b5c <compensate_pressure+0x36c>)
 8001998:	f7fe fc80 	bl	800029c <__adddf3>
 800199c:	4603      	mov	r3, r0
 800199e:	460c      	mov	r4, r1
 80019a0:	4625      	mov	r5, r4
 80019a2:	461c      	mov	r4, r3
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	88db      	ldrh	r3, [r3, #6]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7fe fdb3 	bl	8000514 <__aeabi_ui2d>
 80019ae:	4602      	mov	r2, r0
 80019b0:	460b      	mov	r3, r1
 80019b2:	4620      	mov	r0, r4
 80019b4:	4629      	mov	r1, r5
 80019b6:	f7fe fe27 	bl	8000608 <__aeabi_dmul>
 80019ba:	4603      	mov	r3, r0
 80019bc:	460c      	mov	r4, r1
 80019be:	e9c7 3406 	strd	r3, r4, [r7, #24]

    /* avoid exception caused by division by zero */
    if (var1)
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80019ce:	f7ff f883 	bl	8000ad8 <__aeabi_dcmpeq>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	f040 80d3 	bne.w	8001b80 <compensate_pressure+0x390>
    {
        pressure = 1048576.0 - (double) uncomp_data->pressure;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fd98 	bl	8000514 <__aeabi_ui2d>
 80019e4:	4603      	mov	r3, r0
 80019e6:	460c      	mov	r4, r1
 80019e8:	461a      	mov	r2, r3
 80019ea:	4623      	mov	r3, r4
 80019ec:	f04f 0000 	mov.w	r0, #0
 80019f0:	495b      	ldr	r1, [pc, #364]	; (8001b60 <compensate_pressure+0x370>)
 80019f2:	f7fe fc51 	bl	8000298 <__aeabi_dsub>
 80019f6:	4603      	mov	r3, r0
 80019f8:	460c      	mov	r4, r1
 80019fa:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 80019fe:	f04f 0200 	mov.w	r2, #0
 8001a02:	4b58      	ldr	r3, [pc, #352]	; (8001b64 <compensate_pressure+0x374>)
 8001a04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001a08:	f7fe ff28 	bl	800085c <__aeabi_ddiv>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	461a      	mov	r2, r3
 8001a12:	4623      	mov	r3, r4
 8001a14:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001a18:	f7fe fc3e 	bl	8000298 <__aeabi_dsub>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	460c      	mov	r4, r1
 8001a20:	4618      	mov	r0, r3
 8001a22:	4621      	mov	r1, r4
 8001a24:	a346      	add	r3, pc, #280	; (adr r3, 8001b40 <compensate_pressure+0x350>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	f7fe fded 	bl	8000608 <__aeabi_dmul>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	460c      	mov	r4, r1
 8001a32:	4618      	mov	r0, r3
 8001a34:	4621      	mov	r1, r4
 8001a36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a3a:	f7fe ff0f 	bl	800085c <__aeabi_ddiv>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	460c      	mov	r4, r1
 8001a42:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7fe fd71 	bl	8000534 <__aeabi_i2d>
 8001a52:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a56:	f7fe fdd7 	bl	8000608 <__aeabi_dmul>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	460c      	mov	r4, r1
 8001a5e:	4618      	mov	r0, r3
 8001a60:	4621      	mov	r1, r4
 8001a62:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a66:	f7fe fdcf 	bl	8000608 <__aeabi_dmul>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	460c      	mov	r4, r1
 8001a6e:	4618      	mov	r0, r3
 8001a70:	4621      	mov	r1, r4
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	4b3c      	ldr	r3, [pc, #240]	; (8001b68 <compensate_pressure+0x378>)
 8001a78:	f7fe fef0 	bl	800085c <__aeabi_ddiv>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	460c      	mov	r4, r1
 8001a80:	e9c7 3406 	strd	r3, r4, [r7, #24]
        var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe fd52 	bl	8000534 <__aeabi_i2d>
 8001a90:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001a94:	f7fe fdb8 	bl	8000608 <__aeabi_dmul>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	460c      	mov	r4, r1
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <compensate_pressure+0x35c>)
 8001aa6:	f7fe fed9 	bl	800085c <__aeabi_ddiv>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460c      	mov	r4, r1
 8001aae:	e9c7 3404 	strd	r3, r4, [r7, #16]
        pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001ab2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ab6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001aba:	f7fe fbef 	bl	800029c <__adddf3>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	460c      	mov	r4, r1
 8001ac2:	4625      	mov	r5, r4
 8001ac4:	461c      	mov	r4, r3
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fd31 	bl	8000534 <__aeabi_i2d>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	4620      	mov	r0, r4
 8001ad8:	4629      	mov	r1, r5
 8001ada:	f7fe fbdf 	bl	800029c <__adddf3>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460c      	mov	r4, r1
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	4621      	mov	r1, r4
 8001ae6:	f04f 0200 	mov.w	r2, #0
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <compensate_pressure+0x37c>)
 8001aec:	f7fe feb6 	bl	800085c <__aeabi_ddiv>
 8001af0:	4603      	mov	r3, r0
 8001af2:	460c      	mov	r4, r1
 8001af4:	461a      	mov	r2, r3
 8001af6:	4623      	mov	r3, r4
 8001af8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001afc:	f7fe fbce 	bl	800029c <__adddf3>
 8001b00:	4603      	mov	r3, r0
 8001b02:	460c      	mov	r4, r1
 8001b04:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
        if (pressure < pressure_min)
 8001b08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001b0c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b10:	f7fe ffec 	bl	8000aec <__aeabi_dcmplt>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <compensate_pressure+0x334>
        {
            pressure = pressure_min;
 8001b1a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001b1e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8001b22:	e031      	b.n	8001b88 <compensate_pressure+0x398>
        }
        else if (pressure > pressure_max)
 8001b24:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001b28:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001b2c:	f7fe fffc 	bl	8000b28 <__aeabi_dcmpgt>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d028      	beq.n	8001b88 <compensate_pressure+0x398>
        {
            pressure = pressure_max;
 8001b36:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001b3a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 8001b3e:	e023      	b.n	8001b88 <compensate_pressure+0x398>
 8001b40:	00000000 	.word	0x00000000
 8001b44:	40b86a00 	.word	0x40b86a00
 8001b48:	40ef4000 	.word	0x40ef4000
 8001b4c:	40e00000 	.word	0x40e00000
 8001b50:	40100000 	.word	0x40100000
 8001b54:	40f00000 	.word	0x40f00000
 8001b58:	41200000 	.word	0x41200000
 8001b5c:	3ff00000 	.word	0x3ff00000
 8001b60:	41300000 	.word	0x41300000
 8001b64:	40b00000 	.word	0x40b00000
 8001b68:	41e00000 	.word	0x41e00000
 8001b6c:	40300000 	.word	0x40300000
 8001b70:	00000000 	.word	0x00000000
 8001b74:	40dd4c00 	.word	0x40dd4c00
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	40fadb00 	.word	0x40fadb00
        }
    }
    else /* Invalid case */
    {
        pressure = pressure_min;
 8001b80:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8001b84:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    }

    return pressure;
 8001b88:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001b8c:	ec44 3b17 	vmov	d7, r3, r4
}
 8001b90:	eeb0 0a47 	vmov.f32	s0, s14
 8001b94:	eef0 0a67 	vmov.f32	s1, s15
 8001b98:	3738      	adds	r7, #56	; 0x38
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b9e:	bf00      	nop

08001ba0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
                                  const struct bme280_calib_data *calib_data)
{
 8001ba0:	b5b0      	push	{r4, r5, r7, lr}
 8001ba2:	b094      	sub	sp, #80	; 0x50
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
    double humidity;
    double humidity_min = 0.0;
 8001baa:	f04f 0300 	mov.w	r3, #0
 8001bae:	f04f 0400 	mov.w	r4, #0
 8001bb2:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    double humidity_max = 100.0;
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	4c83      	ldr	r4, [pc, #524]	; (8001dc8 <compensate_humidity+0x228>)
 8001bbc:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
    double var3;
    double var4;
    double var5;
    double var6;

    var1 = ((double)calib_data->t_fine) - 76800.0;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7fe fcb5 	bl	8000534 <__aeabi_i2d>
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	4b7f      	ldr	r3, [pc, #508]	; (8001dcc <compensate_humidity+0x22c>)
 8001bd0:	f7fe fb62 	bl	8000298 <__aeabi_dsub>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	460c      	mov	r4, r1
 8001bd8:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
    var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f7fe fca6 	bl	8000534 <__aeabi_i2d>
 8001be8:	f04f 0200 	mov.w	r2, #0
 8001bec:	4b78      	ldr	r3, [pc, #480]	; (8001dd0 <compensate_humidity+0x230>)
 8001bee:	f7fe fd0b 	bl	8000608 <__aeabi_dmul>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	460c      	mov	r4, r1
 8001bf6:	4625      	mov	r5, r4
 8001bf8:	461c      	mov	r4, r3
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7fe fc97 	bl	8000534 <__aeabi_i2d>
 8001c06:	f04f 0200 	mov.w	r2, #0
 8001c0a:	4b72      	ldr	r3, [pc, #456]	; (8001dd4 <compensate_humidity+0x234>)
 8001c0c:	f7fe fe26 	bl	800085c <__aeabi_ddiv>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4610      	mov	r0, r2
 8001c16:	4619      	mov	r1, r3
 8001c18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c1c:	f7fe fcf4 	bl	8000608 <__aeabi_dmul>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	4620      	mov	r0, r4
 8001c26:	4629      	mov	r1, r5
 8001c28:	f7fe fb38 	bl	800029c <__adddf3>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	460c      	mov	r4, r1
 8001c30:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
    var3 = uncomp_data->humidity - var2;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fc6b 	bl	8000514 <__aeabi_ui2d>
 8001c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001c42:	f7fe fb29 	bl	8000298 <__aeabi_dsub>
 8001c46:	4603      	mov	r3, r0
 8001c48:	460c      	mov	r4, r1
 8001c4a:	e9c7 3408 	strd	r3, r4, [r7, #32]
    var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc6d 	bl	8000534 <__aeabi_i2d>
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	4b5e      	ldr	r3, [pc, #376]	; (8001dd8 <compensate_humidity+0x238>)
 8001c60:	f7fe fdfc 	bl	800085c <__aeabi_ddiv>
 8001c64:	4603      	mov	r3, r0
 8001c66:	460c      	mov	r4, r1
 8001c68:	e9c7 3406 	strd	r3, r4, [r7, #24]
    var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	7f1b      	ldrb	r3, [r3, #28]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fc4f 	bl	8000514 <__aeabi_ui2d>
 8001c76:	f04f 0200 	mov.w	r2, #0
 8001c7a:	4b58      	ldr	r3, [pc, #352]	; (8001ddc <compensate_humidity+0x23c>)
 8001c7c:	f7fe fdee 	bl	800085c <__aeabi_ddiv>
 8001c80:	4603      	mov	r3, r0
 8001c82:	460c      	mov	r4, r1
 8001c84:	4618      	mov	r0, r3
 8001c86:	4621      	mov	r1, r4
 8001c88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c8c:	f7fe fcbc 	bl	8000608 <__aeabi_dmul>
 8001c90:	4603      	mov	r3, r0
 8001c92:	460c      	mov	r4, r1
 8001c94:	4618      	mov	r0, r3
 8001c96:	4621      	mov	r1, r4
 8001c98:	f04f 0200 	mov.w	r2, #0
 8001c9c:	4b50      	ldr	r3, [pc, #320]	; (8001de0 <compensate_humidity+0x240>)
 8001c9e:	f7fe fafd 	bl	800029c <__adddf3>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	460c      	mov	r4, r1
 8001ca6:	e9c7 3404 	strd	r3, r4, [r7, #16]
    var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fc3f 	bl	8000534 <__aeabi_i2d>
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b48      	ldr	r3, [pc, #288]	; (8001ddc <compensate_humidity+0x23c>)
 8001cbc:	f7fe fdce 	bl	800085c <__aeabi_ddiv>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	460c      	mov	r4, r1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ccc:	f7fe fc9c 	bl	8000608 <__aeabi_dmul>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	460c      	mov	r4, r1
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cdc:	f7fe fc94 	bl	8000608 <__aeabi_dmul>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	f04f 0200 	mov.w	r2, #0
 8001cec:	4b3c      	ldr	r3, [pc, #240]	; (8001de0 <compensate_humidity+0x240>)
 8001cee:	f7fe fad5 	bl	800029c <__adddf3>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	460c      	mov	r4, r1
 8001cf6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    var6 = var3 * var4 * (var5 * var6);
 8001cfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cfe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001d02:	f7fe fc81 	bl	8000608 <__aeabi_dmul>
 8001d06:	4603      	mov	r3, r0
 8001d08:	460c      	mov	r4, r1
 8001d0a:	4625      	mov	r5, r4
 8001d0c:	461c      	mov	r4, r3
 8001d0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001d16:	f7fe fc77 	bl	8000608 <__aeabi_dmul>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	460b      	mov	r3, r1
 8001d1e:	4620      	mov	r0, r4
 8001d20:	4629      	mov	r1, r5
 8001d22:	f7fe fc71 	bl	8000608 <__aeabi_dmul>
 8001d26:	4603      	mov	r3, r0
 8001d28:	460c      	mov	r4, r1
 8001d2a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	7e1b      	ldrb	r3, [r3, #24]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fbee 	bl	8000514 <__aeabi_ui2d>
 8001d38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d3c:	f7fe fc64 	bl	8000608 <__aeabi_dmul>
 8001d40:	4603      	mov	r3, r0
 8001d42:	460c      	mov	r4, r1
 8001d44:	4618      	mov	r0, r3
 8001d46:	4621      	mov	r1, r4
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <compensate_humidity+0x244>)
 8001d4e:	f7fe fd85 	bl	800085c <__aeabi_ddiv>
 8001d52:	4603      	mov	r3, r0
 8001d54:	460c      	mov	r4, r1
 8001d56:	461a      	mov	r2, r3
 8001d58:	4623      	mov	r3, r4
 8001d5a:	f04f 0000 	mov.w	r0, #0
 8001d5e:	4920      	ldr	r1, [pc, #128]	; (8001de0 <compensate_humidity+0x240>)
 8001d60:	f7fe fa9a 	bl	8000298 <__aeabi_dsub>
 8001d64:	4603      	mov	r3, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	461a      	mov	r2, r3
 8001d6a:	4623      	mov	r3, r4
 8001d6c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d70:	f7fe fc4a 	bl	8000608 <__aeabi_dmul>
 8001d74:	4603      	mov	r3, r0
 8001d76:	460c      	mov	r4, r1
 8001d78:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    if (humidity > humidity_max)
 8001d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d80:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001d84:	f7fe fed0 	bl	8000b28 <__aeabi_dcmpgt>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d004      	beq.n	8001d98 <compensate_humidity+0x1f8>
    {
        humidity = humidity_max;
 8001d8e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8001d92:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8001d96:	e00c      	b.n	8001db2 <compensate_humidity+0x212>
    }
    else if (humidity < humidity_min)
 8001d98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d9c:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001da0:	f7fe fea4 	bl	8000aec <__aeabi_dcmplt>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <compensate_humidity+0x212>
    {
        humidity = humidity_min;
 8001daa:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001dae:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    }

    return humidity;
 8001db2:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001db6:	ec44 3b17 	vmov	d7, r3, r4
}
 8001dba:	eeb0 0a47 	vmov.f32	s0, s14
 8001dbe:	eef0 0a67 	vmov.f32	s1, s15
 8001dc2:	3750      	adds	r7, #80	; 0x50
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8001dc8:	40590000 	.word	0x40590000
 8001dcc:	40f2c000 	.word	0x40f2c000
 8001dd0:	40500000 	.word	0x40500000
 8001dd4:	40d00000 	.word	0x40d00000
 8001dd8:	40f00000 	.word	0x40f00000
 8001ddc:	41900000 	.word	0x41900000
 8001de0:	3ff00000 	.word	0x3ff00000
 8001de4:	41200000 	.word	0x41200000

08001de8 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8001df0:	2388      	movs	r3, #136	; 0x88
 8001df2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    /* Array to store calibration data */
    uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = { 0 };
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
 8001dfe:	605a      	str	r2, [r3, #4]
 8001e00:	609a      	str	r2, [r3, #8]
 8001e02:	60da      	str	r2, [r3, #12]
 8001e04:	611a      	str	r2, [r3, #16]
 8001e06:	615a      	str	r2, [r3, #20]
 8001e08:	831a      	strh	r2, [r3, #24]

    /* Read the calibration data from the sensor */
    rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8001e0a:	f107 010c 	add.w	r1, r7, #12
 8001e0e:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	221a      	movs	r2, #26
 8001e16:	f7fe ff8a 	bl	8000d2e <bme280_get_regs>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (rslt == BME280_OK)
 8001e20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11d      	bne.n	8001e64 <get_calib_data+0x7c>
    {
        /* Parse temperature and pressure calibration data and store
         * it in device structure
         */
        parse_temp_press_calib_data(calib_data, dev);
 8001e28:	f107 030c 	add.w	r3, r7, #12
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f000 f849 	bl	8001ec6 <parse_temp_press_calib_data>
        reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 8001e34:	23e1      	movs	r3, #225	; 0xe1
 8001e36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

        /* Read the humidity calibration data from the sensor */
        rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8001e3a:	f107 010c 	add.w	r1, r7, #12
 8001e3e:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2207      	movs	r2, #7
 8001e46:	f7fe ff72 	bl	8000d2e <bme280_get_regs>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (rslt == BME280_OK)
 8001e50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d105      	bne.n	8001e64 <get_calib_data+0x7c>
        {
            /* Parse humidity calibration data and store it in
             * device structure
             */
            parse_humidity_calib_data(calib_data, dev);
 8001e58:	f107 030c 	add.w	r3, r7, #12
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f000 f8e0 	bl	8002024 <parse_humidity_calib_data>
        }
    }

    return rslt;
 8001e64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3728      	adds	r7, #40	; 0x28
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b087      	sub	sp, #28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	60b9      	str	r1, [r7, #8]
 8001e7a:	607a      	str	r2, [r7, #4]
 8001e7c:	70fb      	strb	r3, [r7, #3]
    uint8_t index;

    for (index = 1; index < len; index++)
 8001e7e:	2301      	movs	r3, #1
 8001e80:	75fb      	strb	r3, [r7, #23]
 8001e82:	e016      	b.n	8001eb2 <interleave_reg_addr+0x42>
    {
        temp_buff[(index * 2) - 1] = reg_addr[index];
 8001e84:	7dfb      	ldrb	r3, [r7, #23]
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	441a      	add	r2, r3
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	440b      	add	r3, r1
 8001e94:	7812      	ldrb	r2, [r2, #0]
 8001e96:	701a      	strb	r2, [r3, #0]
        temp_buff[index * 2] = reg_data[index];
 8001e98:	7dfb      	ldrb	r3, [r7, #23]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	441a      	add	r2, r3
 8001e9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	440b      	add	r3, r1
 8001ea8:	7812      	ldrb	r2, [r2, #0]
 8001eaa:	701a      	strb	r2, [r3, #0]
    for (index = 1; index < len; index++)
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	3301      	adds	r3, #1
 8001eb0:	75fb      	strb	r3, [r7, #23]
 8001eb2:	7dfa      	ldrb	r2, [r7, #23]
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d3e4      	bcc.n	8001e84 <interleave_reg_addr+0x14>
    }
}
 8001eba:	bf00      	nop
 8001ebc:	371c      	adds	r7, #28
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8001ec6:	b480      	push	{r7}
 8001ec8:	b085      	sub	sp, #20
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	6078      	str	r0, [r7, #4]
 8001ece:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	3310      	adds	r3, #16
 8001ed4:	60fb      	str	r3, [r7, #12]

    calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3301      	adds	r3, #1
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	b21a      	sxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	b21b      	sxth	r3, r3
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	801a      	strh	r2, [r3, #0]
    calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3303      	adds	r3, #3
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	021b      	lsls	r3, r3, #8
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	3302      	adds	r3, #2
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	b21b      	sxth	r3, r3
 8001f02:	4313      	orrs	r3, r2
 8001f04:	b21a      	sxth	r2, r3
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	805a      	strh	r2, [r3, #2]
    calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3305      	adds	r3, #5
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	021b      	lsls	r3, r3, #8
 8001f12:	b21a      	sxth	r2, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3304      	adds	r3, #4
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	b21a      	sxth	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	809a      	strh	r2, [r3, #4]
    calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	3307      	adds	r3, #7
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	021b      	lsls	r3, r3, #8
 8001f2c:	b21a      	sxth	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3306      	adds	r3, #6
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	b21b      	sxth	r3, r3
 8001f36:	4313      	orrs	r3, r2
 8001f38:	b21b      	sxth	r3, r3
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	80da      	strh	r2, [r3, #6]
    calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3309      	adds	r3, #9
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	021b      	lsls	r3, r3, #8
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	3308      	adds	r3, #8
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	4313      	orrs	r3, r2
 8001f54:	b21a      	sxth	r2, r3
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	811a      	strh	r2, [r3, #8]
    calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	330b      	adds	r3, #11
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	b21a      	sxth	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	330a      	adds	r3, #10
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	b21b      	sxth	r3, r3
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	b21a      	sxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	815a      	strh	r2, [r3, #10]
    calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	330d      	adds	r3, #13
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	021b      	lsls	r3, r3, #8
 8001f7c:	b21a      	sxth	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	330c      	adds	r3, #12
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	4313      	orrs	r3, r2
 8001f88:	b21a      	sxth	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	819a      	strh	r2, [r3, #12]
    calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	330f      	adds	r3, #15
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	b21a      	sxth	r2, r3
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	330e      	adds	r3, #14
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b21b      	sxth	r3, r3
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	b21a      	sxth	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	81da      	strh	r2, [r3, #14]
    calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3311      	adds	r3, #17
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	021b      	lsls	r3, r3, #8
 8001fb0:	b21a      	sxth	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3310      	adds	r3, #16
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	b21a      	sxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	821a      	strh	r2, [r3, #16]
    calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3313      	adds	r3, #19
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3312      	adds	r3, #18
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	b21a      	sxth	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	825a      	strh	r2, [r3, #18]
    calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	3315      	adds	r3, #21
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	b21a      	sxth	r2, r3
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	3314      	adds	r3, #20
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b21b      	sxth	r3, r3
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	b21a      	sxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	829a      	strh	r2, [r3, #20]
    calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3317      	adds	r3, #23
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	021b      	lsls	r3, r3, #8
 8001ffe:	b21a      	sxth	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3316      	adds	r3, #22
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	b21b      	sxth	r3, r3
 8002008:	4313      	orrs	r3, r2
 800200a:	b21a      	sxth	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	82da      	strh	r2, [r3, #22]
    calib_data->dig_H1 = reg_data[25];
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	7e5a      	ldrb	r2, [r3, #25]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	761a      	strb	r2, [r3, #24]
}
 8002018:	bf00      	nop
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002024:	b480      	push	{r7}
 8002026:	b087      	sub	sp, #28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
    struct bme280_calib_data *calib_data = &dev->calib_data;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	3310      	adds	r3, #16
 8002032:	617b      	str	r3, [r7, #20]
    int16_t dig_H4_lsb;
    int16_t dig_H4_msb;
    int16_t dig_H5_lsb;
    int16_t dig_H5_msb;

    calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3301      	adds	r3, #1
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	021b      	lsls	r3, r3, #8
 800203c:	b21a      	sxth	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	b21b      	sxth	r3, r3
 8002044:	4313      	orrs	r3, r2
 8002046:	b21a      	sxth	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	835a      	strh	r2, [r3, #26]
    calib_data->dig_H3 = reg_data[2];
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	789a      	ldrb	r2, [r3, #2]
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	771a      	strb	r2, [r3, #28]
    dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	3303      	adds	r3, #3
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	b25b      	sxtb	r3, r3
 800205c:	b29b      	uxth	r3, r3
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	b29b      	uxth	r3, r3
 8002062:	827b      	strh	r3, [r7, #18]
    dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	3304      	adds	r3, #4
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	b21b      	sxth	r3, r3
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	823b      	strh	r3, [r7, #16]
    calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 8002072:	8a7a      	ldrh	r2, [r7, #18]
 8002074:	8a3b      	ldrh	r3, [r7, #16]
 8002076:	4313      	orrs	r3, r2
 8002078:	b21a      	sxth	r2, r3
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	83da      	strh	r2, [r3, #30]
    dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	3305      	adds	r3, #5
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	b25b      	sxtb	r3, r3
 8002086:	b29b      	uxth	r3, r3
 8002088:	011b      	lsls	r3, r3, #4
 800208a:	b29b      	uxth	r3, r3
 800208c:	81fb      	strh	r3, [r7, #14]
    dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	3304      	adds	r3, #4
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	091b      	lsrs	r3, r3, #4
 8002096:	b2db      	uxtb	r3, r3
 8002098:	81bb      	strh	r3, [r7, #12]
    calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 800209a:	89fa      	ldrh	r2, [r7, #14]
 800209c:	89bb      	ldrh	r3, [r7, #12]
 800209e:	4313      	orrs	r3, r2
 80020a0:	b21a      	sxth	r2, r3
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	841a      	strh	r2, [r3, #32]
    calib_data->dig_H6 = (int8_t)reg_data[6];
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3306      	adds	r3, #6
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	b25a      	sxtb	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80020b4:	bf00      	nop
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	460a      	mov	r2, r1
 80020ca:	71fb      	strb	r3, [r7, #7]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71bb      	strb	r3, [r7, #6]
    uint8_t settings_changed = FALSE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73fb      	strb	r3, [r7, #15]

    if (sub_settings & desired_settings)
 80020d4:	79fa      	ldrb	r2, [r7, #7]
 80020d6:	79bb      	ldrb	r3, [r7, #6]
 80020d8:	4013      	ands	r3, r2
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d002      	beq.n	80020e6 <are_settings_changed+0x26>
    {
        /* User wants to modify this particular settings */
        settings_changed = TRUE;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
 80020e4:	e001      	b.n	80020ea <are_settings_changed+0x2a>
    }
    else
    {
        /* User don't want to modify this particular settings */
        settings_changed = FALSE;
 80020e6:	2300      	movs	r3, #0
 80020e8:	73fb      	strb	r3, [r7, #15]
    }

    return settings_changed;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3714      	adds	r7, #20
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d00b      	beq.n	800211e <null_ptr_check+0x26>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d007      	beq.n	800211e <null_ptr_check+0x26>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d003      	beq.n	800211e <null_ptr_check+0x26>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d102      	bne.n	8002124 <null_ptr_check+0x2c>
    {
        /* Device structure pointer is not valid */
        rslt = BME280_E_NULL_PTR;
 800211e:	23ff      	movs	r3, #255	; 0xff
 8002120:	73fb      	strb	r3, [r7, #15]
 8002122:	e001      	b.n	8002128 <null_ptr_check+0x30>
    }
    else
    {
        /* Device structure is fine */
        rslt = BME280_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8002128:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3714      	adds	r7, #20
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <BME280_Init>:
 * @brief User functions
 *
 *
 */
int8_t BME280_Init(I2C_HandleTypeDef *hi2c_bme280, uint8_t sensor_mode, uint8_t monitoring_mode)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
 8002144:	4613      	mov	r3, r2
 8002146:	70bb      	strb	r3, [r7, #2]
	hi2c = *hi2c_bme280;
 8002148:	4a16      	ldr	r2, [pc, #88]	; (80021a4 <BME280_Init+0x6c>)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4610      	mov	r0, r2
 800214e:	4619      	mov	r1, r3
 8002150:	234c      	movs	r3, #76	; 0x4c
 8002152:	461a      	mov	r2, r3
 8002154:	f008 fe24 	bl	800ada0 <memcpy>

	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8002158:	4b13      	ldr	r3, [pc, #76]	; (80021a8 <BME280_Init+0x70>)
 800215a:	2276      	movs	r2, #118	; 0x76
 800215c:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 800215e:	4b12      	ldr	r3, [pc, #72]	; (80021a8 <BME280_Init+0x70>)
 8002160:	2201      	movs	r2, #1
 8002162:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8002164:	4b10      	ldr	r3, [pc, #64]	; (80021a8 <BME280_Init+0x70>)
 8002166:	4a11      	ldr	r2, [pc, #68]	; (80021ac <BME280_Init+0x74>)
 8002168:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 800216a:	4b0f      	ldr	r3, [pc, #60]	; (80021a8 <BME280_Init+0x70>)
 800216c:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <BME280_Init+0x78>)
 800216e:	609a      	str	r2, [r3, #8]
	dev.delay_ms = DWT_DelayUs;
 8002170:	4b0d      	ldr	r3, [pc, #52]	; (80021a8 <BME280_Init+0x70>)
 8002172:	4a10      	ldr	r2, [pc, #64]	; (80021b4 <BME280_Init+0x7c>)
 8002174:	60da      	str	r2, [r3, #12]

	if (bme280_init(&dev) != BME280_OK)
 8002176:	480c      	ldr	r0, [pc, #48]	; (80021a8 <BME280_Init+0x70>)
 8002178:	f7fe fd8e 	bl	8000c98 <bme280_init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <BME280_Init+0x50>
		return BME280_E_DEV_NOT_FOUND;
 8002182:	f06f 0301 	mvn.w	r3, #1
 8002186:	e009      	b.n	800219c <BME280_Init+0x64>

	if (monitoring_mode == BME280_MONITORING_WEATHER)
 8002188:	78bb      	ldrb	r3, [r7, #2]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d103      	bne.n	8002196 <BME280_Init+0x5e>
		return set_weather_monitoring();
 800218e:	f000 f8ab 	bl	80022e8 <set_weather_monitoring>
 8002192:	4603      	mov	r3, r0
 8002194:	e002      	b.n	800219c <BME280_Init+0x64>
	return set_indoor_navigation();
 8002196:	f000 f871 	bl	800227c <set_indoor_navigation>
 800219a:	4603      	mov	r3, r0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	200009d0 	.word	0x200009d0
 80021a8:	20000978 	.word	0x20000978
 80021ac:	080021b9 	.word	0x080021b9
 80021b0:	08002211 	.word	0x08002211
 80021b4:	08003d5d 	.word	0x08003d5d

080021b8 <user_i2c_read>:

int8_t user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af02      	add	r7, sp, #8
 80021be:	603a      	str	r2, [r7, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	71fb      	strb	r3, [r7, #7]
 80021c6:	460b      	mov	r3, r1
 80021c8:	71bb      	strb	r3, [r7, #6]
 80021ca:	4613      	mov	r3, r2
 80021cc:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c, dev_id << 1 , &reg_addr, 1, 100);
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	b299      	uxth	r1, r3
 80021d6:	1dba      	adds	r2, r7, #6
 80021d8:	2364      	movs	r3, #100	; 0x64
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2301      	movs	r3, #1
 80021de:	480b      	ldr	r0, [pc, #44]	; (800220c <user_i2c_read+0x54>)
 80021e0:	f003 fbce 	bl	8005980 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c, (dev_id << 1)+1, reg_data, len, 100);
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	3301      	adds	r3, #1
 80021ee:	b299      	uxth	r1, r3
 80021f0:	88ba      	ldrh	r2, [r7, #4]
 80021f2:	2364      	movs	r3, #100	; 0x64
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	4613      	mov	r3, r2
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	4804      	ldr	r0, [pc, #16]	; (800220c <user_i2c_read+0x54>)
 80021fc:	f003 fcb4 	bl	8005b68 <HAL_I2C_Master_Receive>
	return 0;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200009d0 	.word	0x200009d0

08002210 <user_i2c_write>:

int8_t user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af02      	add	r7, sp, #8
 8002216:	603a      	str	r2, [r7, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	460b      	mov	r3, r1
 8002220:	71bb      	strb	r3, [r7, #6]
 8002222:	4613      	mov	r3, r2
 8002224:	80bb      	strh	r3, [r7, #4]
	int8_t *buf;
	buf = malloc(len +1);
 8002226:	88bb      	ldrh	r3, [r7, #4]
 8002228:	3301      	adds	r3, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f008 fda8 	bl	800ad80 <malloc>
 8002230:	4603      	mov	r3, r0
 8002232:	60fb      	str	r3, [r7, #12]
	buf[0] = reg_addr;
 8002234:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	701a      	strb	r2, [r3, #0]
	memcpy(buf +1, reg_data, len);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3301      	adds	r3, #1
 8002240:	88ba      	ldrh	r2, [r7, #4]
 8002242:	6839      	ldr	r1, [r7, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f008 fdab 	bl	800ada0 <memcpy>
	HAL_I2C_Master_Transmit(&hi2c, dev_id<<1, (uint8_t*)buf, len+1, 100);
 800224a:	79fb      	ldrb	r3, [r7, #7]
 800224c:	b29b      	uxth	r3, r3
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	b299      	uxth	r1, r3
 8002252:	88bb      	ldrh	r3, [r7, #4]
 8002254:	3301      	adds	r3, #1
 8002256:	b29a      	uxth	r2, r3
 8002258:	2364      	movs	r3, #100	; 0x64
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	4613      	mov	r3, r2
 800225e:	68fa      	ldr	r2, [r7, #12]
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <user_i2c_write+0x68>)
 8002262:	f003 fb8d 	bl	8005980 <HAL_I2C_Master_Transmit>
	free(buf);
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f008 fd92 	bl	800ad90 <free>
	return 0;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200009d0 	.word	0x200009d0

0800227c <set_indoor_navigation>:

int8_t set_indoor_navigation()
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <set_indoor_navigation+0x68>)
 8002284:	2201      	movs	r2, #1
 8002286:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <set_indoor_navigation+0x68>)
 800228c:	2205      	movs	r2, #5
 800228e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8002292:	4b14      	ldr	r3, [pc, #80]	; (80022e4 <set_indoor_navigation+0x68>)
 8002294:	2202      	movs	r2, #2
 8002296:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <set_indoor_navigation+0x68>)
 800229c:	2204      	movs	r2, #4
 800229e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	dev.settings.standby_time = BME280_STANDBY_TIME_62_5_MS;
 80022a2:	4b10      	ldr	r3, [pc, #64]	; (80022e4 <set_indoor_navigation+0x68>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	uint8_t settings_sel = BME280_OSR_PRESS_SEL;
 80022aa:	2301      	movs	r3, #1
 80022ac:	71fb      	strb	r3, [r7, #7]
	settings_sel |= BME280_OSR_TEMP_SEL;
 80022ae:	79fb      	ldrb	r3, [r7, #7]
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	71fb      	strb	r3, [r7, #7]
	settings_sel |= BME280_OSR_HUM_SEL;
 80022b6:	79fb      	ldrb	r3, [r7, #7]
 80022b8:	f043 0304 	orr.w	r3, r3, #4
 80022bc:	71fb      	strb	r3, [r7, #7]
	settings_sel |= BME280_STANDBY_SEL;
 80022be:	79fb      	ldrb	r3, [r7, #7]
 80022c0:	f043 0310 	orr.w	r3, r3, #16
 80022c4:	71fb      	strb	r3, [r7, #7]
	settings_sel |= BME280_FILTER_SEL;
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	f043 0308 	orr.w	r3, r3, #8
 80022cc:	71fb      	strb	r3, [r7, #7]

	return bme280_set_sensor_settings(settings_sel, &dev);
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	4904      	ldr	r1, [pc, #16]	; (80022e4 <set_indoor_navigation+0x68>)
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe fdd4 	bl	8000e80 <bme280_set_sensor_settings>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000978 	.word	0x20000978

080022e8 <set_weather_monitoring>:

int8_t set_weather_monitoring()
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80022ee:	4b18      	ldr	r3, [pc, #96]	; (8002350 <set_weather_monitoring+0x68>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_1X;
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <set_weather_monitoring+0x68>)
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_1X;
 80022fe:	4b14      	ldr	r3, [pc, #80]	; (8002350 <set_weather_monitoring+0x68>)
 8002300:	2201      	movs	r2, #1
 8002302:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_OFF;
 8002306:	4b12      	ldr	r3, [pc, #72]	; (8002350 <set_weather_monitoring+0x68>)
 8002308:	2200      	movs	r2, #0
 800230a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	dev.settings.standby_time = BME280_STANDBY_TIME_1000_MS;
 800230e:	4b10      	ldr	r3, [pc, #64]	; (8002350 <set_weather_monitoring+0x68>)
 8002310:	2205      	movs	r2, #5
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	uint8_t settings_sel = BME280_OSR_PRESS_SEL;
 8002316:	2301      	movs	r3, #1
 8002318:	71fb      	strb	r3, [r7, #7]
	settings_sel |= BME280_OSR_TEMP_SEL;
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	f043 0302 	orr.w	r3, r3, #2
 8002320:	71fb      	strb	r3, [r7, #7]
	settings_sel |= BME280_OSR_HUM_SEL;
 8002322:	79fb      	ldrb	r3, [r7, #7]
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	71fb      	strb	r3, [r7, #7]
	settings_sel |= BME280_STANDBY_SEL;
 800232a:	79fb      	ldrb	r3, [r7, #7]
 800232c:	f043 0310 	orr.w	r3, r3, #16
 8002330:	71fb      	strb	r3, [r7, #7]
	settings_sel |= BME280_FILTER_SEL;
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	f043 0308 	orr.w	r3, r3, #8
 8002338:	71fb      	strb	r3, [r7, #7]

	return bme280_set_sensor_settings(settings_sel, &dev);
 800233a:	79fb      	ldrb	r3, [r7, #7]
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <set_weather_monitoring+0x68>)
 800233e:	4618      	mov	r0, r3
 8002340:	f7fe fd9e 	bl	8000e80 <bme280_set_sensor_settings>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	20000978 	.word	0x20000978

08002354 <BME280_Sample>:

void BME280_Sample(bool is_forced)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	71fb      	strb	r3, [r7, #7]
	if (is_forced) {
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d007      	beq.n	8002374 <BME280_Sample+0x20>
		bme280_set_sensor_mode(BME280_FORCED_MODE, &dev);
 8002364:	4908      	ldr	r1, [pc, #32]	; (8002388 <BME280_Sample+0x34>)
 8002366:	2001      	movs	r0, #1
 8002368:	f7fe fddf 	bl	8000f2a <bme280_set_sensor_mode>
		dev.delay_ms(40);
 800236c:	4b06      	ldr	r3, [pc, #24]	; (8002388 <BME280_Sample+0x34>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2028      	movs	r0, #40	; 0x28
 8002372:	4798      	blx	r3
	}
	bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);
 8002374:	4a04      	ldr	r2, [pc, #16]	; (8002388 <BME280_Sample+0x34>)
 8002376:	4905      	ldr	r1, [pc, #20]	; (800238c <BME280_Sample+0x38>)
 8002378:	2007      	movs	r0, #7
 800237a:	f7fe fe78 	bl	800106e <bme280_get_sensor_data>
}
 800237e:	bf00      	nop
 8002380:	3708      	adds	r7, #8
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000978 	.word	0x20000978
 800238c:	200009b8 	.word	0x200009b8

08002390 <BME280_ToJson_Partial>:

void BME280_ToJson_Partial(char *buffer)
{
 8002390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002394:	ed2d 8b02 	vpush	{d8}
 8002398:	b091      	sub	sp, #68	; 0x44
 800239a:	af0c      	add	r7, sp, #48	; 0x30
 800239c:	60f8      	str	r0, [r7, #12]
	memset(buffer, 0, BME280_JSON_LENGTH);
 800239e:	227f      	movs	r2, #127	; 0x7f
 80023a0:	2100      	movs	r1, #0
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f008 fd07 	bl	800adb6 <memset>
	snprintf(buffer, BME280_JSON_LENGTH,
 80023a8:	4b31      	ldr	r3, [pc, #196]	; (8002470 <BME280_ToJson_Partial+0xe0>)
 80023aa:	e9d3 5602 	ldrd	r5, r6, [r3, #8]
			 "\"BME280\":{\"T_C\":%.2f,\"T_F\":%.2f,\"RH\":%.2f,\"P\":%.2f,\"P_kPa\":%.2f,\"P_mb\":%d}",
			 comp_data.temperature, to_fahrenheit(comp_data.temperature),
 80023ae:	4b30      	ldr	r3, [pc, #192]	; (8002470 <BME280_ToJson_Partial+0xe0>)
 80023b0:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 80023b4:	4618      	mov	r0, r3
 80023b6:	4621      	mov	r1, r4
 80023b8:	f7fe fc1e 	bl	8000bf8 <__aeabi_d2f>
 80023bc:	4603      	mov	r3, r0
 80023be:	ee00 3a10 	vmov	s0, r3
 80023c2:	f007 fbf1 	bl	8009ba8 <to_fahrenheit>
 80023c6:	ee10 3a10 	vmov	r3, s0
	snprintf(buffer, BME280_JSON_LENGTH,
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe f8c4 	bl	8000558 <__aeabi_f2d>
 80023d0:	e9c7 0100 	strd	r0, r1, [r7]
 80023d4:	4b26      	ldr	r3, [pc, #152]	; (8002470 <BME280_ToJson_Partial+0xe0>)
 80023d6:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 80023da:	4b25      	ldr	r3, [pc, #148]	; (8002470 <BME280_ToJson_Partial+0xe0>)
 80023dc:	e9d3 ab00 	ldrd	sl, fp, [r3]
			 comp_data.humidity, comp_data.pressure, comp_data.pressure*0.001, (int)(round(comp_data.pressure*0.01)));
 80023e0:	4b23      	ldr	r3, [pc, #140]	; (8002470 <BME280_ToJson_Partial+0xe0>)
 80023e2:	e9d3 0100 	ldrd	r0, r1, [r3]
	snprintf(buffer, BME280_JSON_LENGTH,
 80023e6:	a31e      	add	r3, pc, #120	; (adr r3, 8002460 <BME280_ToJson_Partial+0xd0>)
 80023e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023ec:	f7fe f90c 	bl	8000608 <__aeabi_dmul>
 80023f0:	4603      	mov	r3, r0
 80023f2:	460c      	mov	r4, r1
 80023f4:	ec44 3b18 	vmov	d8, r3, r4
			 comp_data.humidity, comp_data.pressure, comp_data.pressure*0.001, (int)(round(comp_data.pressure*0.01)));
 80023f8:	4b1d      	ldr	r3, [pc, #116]	; (8002470 <BME280_ToJson_Partial+0xe0>)
 80023fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023fe:	a31a      	add	r3, pc, #104	; (adr r3, 8002468 <BME280_ToJson_Partial+0xd8>)
 8002400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002404:	f7fe f900 	bl	8000608 <__aeabi_dmul>
 8002408:	4603      	mov	r3, r0
 800240a:	460c      	mov	r4, r1
 800240c:	ec44 3b17 	vmov	d7, r3, r4
 8002410:	eeb0 0a47 	vmov.f32	s0, s14
 8002414:	eef0 0a67 	vmov.f32	s1, s15
 8002418:	f00a fd60 	bl	800cedc <round>
 800241c:	ec54 3b10 	vmov	r3, r4, d0
	snprintf(buffer, BME280_JSON_LENGTH,
 8002420:	4618      	mov	r0, r3
 8002422:	4621      	mov	r1, r4
 8002424:	f7fe fba0 	bl	8000b68 <__aeabi_d2iz>
 8002428:	4603      	mov	r3, r0
 800242a:	930a      	str	r3, [sp, #40]	; 0x28
 800242c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8002430:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8002434:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8002438:	ed97 7b00 	vldr	d7, [r7]
 800243c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002440:	e9cd 5600 	strd	r5, r6, [sp]
 8002444:	4a0b      	ldr	r2, [pc, #44]	; (8002474 <BME280_ToJson_Partial+0xe4>)
 8002446:	217f      	movs	r1, #127	; 0x7f
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f009 f9d1 	bl	800b7f0 <sniprintf>
}
 800244e:	bf00      	nop
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	ecbd 8b02 	vpop	{d8}
 8002458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800245c:	f3af 8000 	nop.w
 8002460:	d2f1a9fc 	.word	0xd2f1a9fc
 8002464:	3f50624d 	.word	0x3f50624d
 8002468:	47ae147b 	.word	0x47ae147b
 800246c:	3f847ae1 	.word	0x3f847ae1
 8002470:	200009b8 	.word	0x200009b8
 8002474:	0800d1a0 	.word	0x0800d1a0

08002478 <BME280_GetTemperature>:
#endif
	HAL_UART_Transmit(huart, (uint8_t*)msg, (uint16_t) strlen(msg), HAL_MAX_DELAY);
}

double BME280_GetTemperature(bool in_celsius)
{
 8002478:	b590      	push	{r4, r7, lr}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	4603      	mov	r3, r0
 8002480:	71fb      	strb	r3, [r7, #7]
	if (in_celsius)
 8002482:	79fb      	ldrb	r3, [r7, #7]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <BME280_GetTemperature+0x18>
		return comp_data.temperature;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <BME280_GetTemperature+0x50>)
 800248a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800248e:	e012      	b.n	80024b6 <BME280_GetTemperature+0x3e>
	return to_fahrenheit(comp_data.temperature);
 8002490:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <BME280_GetTemperature+0x50>)
 8002492:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8002496:	4618      	mov	r0, r3
 8002498:	4621      	mov	r1, r4
 800249a:	f7fe fbad 	bl	8000bf8 <__aeabi_d2f>
 800249e:	4603      	mov	r3, r0
 80024a0:	ee00 3a10 	vmov	s0, r3
 80024a4:	f007 fb80 	bl	8009ba8 <to_fahrenheit>
 80024a8:	ee10 3a10 	vmov	r3, s0
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe f853 	bl	8000558 <__aeabi_f2d>
 80024b2:	4603      	mov	r3, r0
 80024b4:	460c      	mov	r4, r1
 80024b6:	ec44 3b17 	vmov	d7, r3, r4
}
 80024ba:	eeb0 0a47 	vmov.f32	s0, s14
 80024be:	eef0 0a67 	vmov.f32	s1, s15
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd90      	pop	{r4, r7, pc}
 80024c8:	200009b8 	.word	0x200009b8

080024cc <DHT_Init>:
#include "dht.h"

DHT_t dht;

void DHT_Init(uint8_t station_id)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	4603      	mov	r3, r0
 80024d4:	71fb      	strb	r3, [r7, #7]
	dht.heat_index_celsius = 0.0;
 80024d6:	4b0e      	ldr	r3, [pc, #56]	; (8002510 <DHT_Init+0x44>)
 80024d8:	f04f 0200 	mov.w	r2, #0
 80024dc:	611a      	str	r2, [r3, #16]
	dht.heat_index_fahrenheit = 0.0;
 80024de:	4b0c      	ldr	r3, [pc, #48]	; (8002510 <DHT_Init+0x44>)
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	615a      	str	r2, [r3, #20]
	dht.humidity = 0.0;
 80024e6:	4b0a      	ldr	r3, [pc, #40]	; (8002510 <DHT_Init+0x44>)
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	605a      	str	r2, [r3, #4]
	dht.station_id = station_id;
 80024ee:	4a08      	ldr	r2, [pc, #32]	; (8002510 <DHT_Init+0x44>)
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	7013      	strb	r3, [r2, #0]
	dht.temperature_celsius = 0.0;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <DHT_Init+0x44>)
 80024f6:	f04f 0200 	mov.w	r2, #0
 80024fa:	609a      	str	r2, [r3, #8]
	dht.temperature_fahrenheit = 0.0;
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <DHT_Init+0x44>)
 80024fe:	f04f 0200 	mov.w	r2, #0
 8002502:	60da      	str	r2, [r3, #12]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	20000a1c 	.word	0x20000a1c

08002514 <DHT_ToJson_Partial>:
    		 "\r\n", endpoint, host, strlen(json), json);
}


void DHT_ToJson_Partial(char *buffer)
{
 8002514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002518:	b08f      	sub	sp, #60	; 0x3c
 800251a:	af0a      	add	r7, sp, #40	; 0x28
 800251c:	60f8      	str	r0, [r7, #12]
	memset(buffer, 0, DHT_JSON_LENGTH);
 800251e:	2264      	movs	r2, #100	; 0x64
 8002520:	2100      	movs	r1, #0
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f008 fc47 	bl	800adb6 <memset>
	         "\"RH\":%.1f,"
	         "\"T_C\":%.1f,"
	         "\"T_F\":%.1f,"
	         "\"HI_C\":%.1f,"
	         "\"HI_F\":%.1f}",
			 dht.station_id, dht.humidity, dht.temperature_celsius,
 8002528:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <DHT_ToJson_Partial+0x90>)
 800252a:	781b      	ldrb	r3, [r3, #0]
	snprintf(buffer, DHT_JSON_LENGTH,
 800252c:	461e      	mov	r6, r3
			 dht.station_id, dht.humidity, dht.temperature_celsius,
 800252e:	4b1d      	ldr	r3, [pc, #116]	; (80025a4 <DHT_ToJson_Partial+0x90>)
 8002530:	685b      	ldr	r3, [r3, #4]
	snprintf(buffer, DHT_JSON_LENGTH,
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe f810 	bl	8000558 <__aeabi_f2d>
 8002538:	4604      	mov	r4, r0
 800253a:	460d      	mov	r5, r1
			 dht.station_id, dht.humidity, dht.temperature_celsius,
 800253c:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <DHT_ToJson_Partial+0x90>)
 800253e:	689b      	ldr	r3, [r3, #8]
	snprintf(buffer, DHT_JSON_LENGTH,
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe f809 	bl	8000558 <__aeabi_f2d>
 8002546:	4680      	mov	r8, r0
 8002548:	4689      	mov	r9, r1
			 dht.temperature_fahrenheit, dht.heat_index_celsius, dht.heat_index_fahrenheit);
 800254a:	4b16      	ldr	r3, [pc, #88]	; (80025a4 <DHT_ToJson_Partial+0x90>)
 800254c:	68db      	ldr	r3, [r3, #12]
	snprintf(buffer, DHT_JSON_LENGTH,
 800254e:	4618      	mov	r0, r3
 8002550:	f7fe f802 	bl	8000558 <__aeabi_f2d>
 8002554:	4682      	mov	sl, r0
 8002556:	468b      	mov	fp, r1
			 dht.temperature_fahrenheit, dht.heat_index_celsius, dht.heat_index_fahrenheit);
 8002558:	4b12      	ldr	r3, [pc, #72]	; (80025a4 <DHT_ToJson_Partial+0x90>)
 800255a:	691b      	ldr	r3, [r3, #16]
	snprintf(buffer, DHT_JSON_LENGTH,
 800255c:	4618      	mov	r0, r3
 800255e:	f7fd fffb 	bl	8000558 <__aeabi_f2d>
 8002562:	e9c7 0100 	strd	r0, r1, [r7]
			 dht.temperature_fahrenheit, dht.heat_index_celsius, dht.heat_index_fahrenheit);
 8002566:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <DHT_ToJson_Partial+0x90>)
 8002568:	695b      	ldr	r3, [r3, #20]
	snprintf(buffer, DHT_JSON_LENGTH,
 800256a:	4618      	mov	r0, r3
 800256c:	f7fd fff4 	bl	8000558 <__aeabi_f2d>
 8002570:	4602      	mov	r2, r0
 8002572:	460b      	mov	r3, r1
 8002574:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002578:	ed97 7b00 	vldr	d7, [r7]
 800257c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002580:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002584:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002588:	e9cd 4500 	strd	r4, r5, [sp]
 800258c:	4633      	mov	r3, r6
 800258e:	4a06      	ldr	r2, [pc, #24]	; (80025a8 <DHT_ToJson_Partial+0x94>)
 8002590:	2164      	movs	r1, #100	; 0x64
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f009 f92c 	bl	800b7f0 <sniprintf>
}
 8002598:	bf00      	nop
 800259a:	3714      	adds	r7, #20
 800259c:	46bd      	mov	sp, r7
 800259e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025a2:	bf00      	nop
 80025a4:	20000a1c 	.word	0x20000a1c
 80025a8:	0800d338 	.word	0x0800d338
 80025ac:	00000000 	.word	0x00000000

080025b0 <DHT_Sample>:


void DHT_Sample()
{
 80025b0:	b5b0      	push	{r4, r5, r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
	uint8_t buffer[DHT_N_BYTES] = {0};
 80025b6:	463b      	mov	r3, r7
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	711a      	strb	r2, [r3, #4]

	_DHT_StartSignal();
 80025be:	f000 f8c3 	bl	8002748 <_DHT_StartSignal>
	if (_DHT_IsResponseValid())
 80025c2:	f000 f8e1 	bl	8002788 <_DHT_IsResponseValid>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <DHT_Sample+0x24>
		_DHT_Read(buffer);
 80025cc:	463b      	mov	r3, r7
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f8fe 	bl	80027d0 <_DHT_Read>

	float temperature_celsius = 0.0;
 80025d4:	f04f 0300 	mov.w	r3, #0
 80025d8:	617b      	str	r3, [r7, #20]
	float temperature_fahrenheit = 0.0;
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	613b      	str	r3, [r7, #16]
	float humidity = 0.0;
 80025e0:	f04f 0300 	mov.w	r3, #0
 80025e4:	60fb      	str	r3, [r7, #12]
	float heat_index_fahrenheit = 0.0;
 80025e6:	f04f 0300 	mov.w	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]

	if (_DHT_IsReadValid(buffer)) {
 80025ec:	463b      	mov	r3, r7
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f94c 	bl	800288c <_DHT_IsReadValid>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	f000 8084 	beq.w	8002704 <DHT_Sample+0x154>
		if (_DHT_IsDht11(buffer)) {
 80025fc:	463b      	mov	r3, r7
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f968 	bl	80028d4 <_DHT_IsDht11>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d03a      	beq.n	8002680 <DHT_Sample+0xd0>
			humidity = buffer[IDX_BYTE_IRH] + buffer[IDX_BYTE_DRH]/10.0;
 800260a:	783b      	ldrb	r3, [r7, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd ff91 	bl	8000534 <__aeabi_i2d>
 8002612:	4604      	mov	r4, r0
 8002614:	460d      	mov	r5, r1
 8002616:	787b      	ldrb	r3, [r7, #1]
 8002618:	4618      	mov	r0, r3
 800261a:	f7fd ff8b 	bl	8000534 <__aeabi_i2d>
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	4b47      	ldr	r3, [pc, #284]	; (8002740 <DHT_Sample+0x190>)
 8002624:	f7fe f91a 	bl	800085c <__aeabi_ddiv>
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4620      	mov	r0, r4
 800262e:	4629      	mov	r1, r5
 8002630:	f7fd fe34 	bl	800029c <__adddf3>
 8002634:	4603      	mov	r3, r0
 8002636:	460c      	mov	r4, r1
 8002638:	4618      	mov	r0, r3
 800263a:	4621      	mov	r1, r4
 800263c:	f7fe fadc 	bl	8000bf8 <__aeabi_d2f>
 8002640:	4603      	mov	r3, r0
 8002642:	60fb      	str	r3, [r7, #12]
			temperature_celsius = buffer[IDX_BYTE_ITP] + buffer[IDX_BYTE_DTP]/10.0;
 8002644:	78bb      	ldrb	r3, [r7, #2]
 8002646:	4618      	mov	r0, r3
 8002648:	f7fd ff74 	bl	8000534 <__aeabi_i2d>
 800264c:	4604      	mov	r4, r0
 800264e:	460d      	mov	r5, r1
 8002650:	78fb      	ldrb	r3, [r7, #3]
 8002652:	4618      	mov	r0, r3
 8002654:	f7fd ff6e 	bl	8000534 <__aeabi_i2d>
 8002658:	f04f 0200 	mov.w	r2, #0
 800265c:	4b38      	ldr	r3, [pc, #224]	; (8002740 <DHT_Sample+0x190>)
 800265e:	f7fe f8fd 	bl	800085c <__aeabi_ddiv>
 8002662:	4602      	mov	r2, r0
 8002664:	460b      	mov	r3, r1
 8002666:	4620      	mov	r0, r4
 8002668:	4629      	mov	r1, r5
 800266a:	f7fd fe17 	bl	800029c <__adddf3>
 800266e:	4603      	mov	r3, r0
 8002670:	460c      	mov	r4, r1
 8002672:	4618      	mov	r0, r3
 8002674:	4621      	mov	r1, r4
 8002676:	f7fe fabf 	bl	8000bf8 <__aeabi_d2f>
 800267a:	4603      	mov	r3, r0
 800267c:	617b      	str	r3, [r7, #20]
 800267e:	e033      	b.n	80026e8 <DHT_Sample+0x138>
		} else {
			humidity = ((buffer[IDX_BYTE_IRH] << 8) | buffer[IDX_BYTE_DRH])*0.1;
 8002680:	783b      	ldrb	r3, [r7, #0]
 8002682:	021b      	lsls	r3, r3, #8
 8002684:	787a      	ldrb	r2, [r7, #1]
 8002686:	4313      	orrs	r3, r2
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff53 	bl	8000534 <__aeabi_i2d>
 800268e:	a32a      	add	r3, pc, #168	; (adr r3, 8002738 <DHT_Sample+0x188>)
 8002690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002694:	f7fd ffb8 	bl	8000608 <__aeabi_dmul>
 8002698:	4603      	mov	r3, r0
 800269a:	460c      	mov	r4, r1
 800269c:	4618      	mov	r0, r3
 800269e:	4621      	mov	r1, r4
 80026a0:	f7fe faaa 	bl	8000bf8 <__aeabi_d2f>
 80026a4:	4603      	mov	r3, r0
 80026a6:	60fb      	str	r3, [r7, #12]
			temperature_celsius = (((buffer[IDX_BYTE_ITP] & 0x7F) << 8) | buffer[IDX_BYTE_DTP])*0.1;
 80026a8:	78bb      	ldrb	r3, [r7, #2]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 80026b0:	78fa      	ldrb	r2, [r7, #3]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fd ff3d 	bl	8000534 <__aeabi_i2d>
 80026ba:	a31f      	add	r3, pc, #124	; (adr r3, 8002738 <DHT_Sample+0x188>)
 80026bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026c0:	f7fd ffa2 	bl	8000608 <__aeabi_dmul>
 80026c4:	4603      	mov	r3, r0
 80026c6:	460c      	mov	r4, r1
 80026c8:	4618      	mov	r0, r3
 80026ca:	4621      	mov	r1, r4
 80026cc:	f7fe fa94 	bl	8000bf8 <__aeabi_d2f>
 80026d0:	4603      	mov	r3, r0
 80026d2:	617b      	str	r3, [r7, #20]
			if (buffer[IDX_BYTE_ITP] & 0x80)
 80026d4:	78bb      	ldrb	r3, [r7, #2]
 80026d6:	b25b      	sxtb	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	da05      	bge.n	80026e8 <DHT_Sample+0x138>
				temperature_celsius *= -1;
 80026dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80026e0:	eef1 7a67 	vneg.f32	s15, s15
 80026e4:	edc7 7a05 	vstr	s15, [r7, #20]
		}

		temperature_fahrenheit = to_fahrenheit(temperature_celsius);
 80026e8:	ed97 0a05 	vldr	s0, [r7, #20]
 80026ec:	f007 fa5c 	bl	8009ba8 <to_fahrenheit>
 80026f0:	ed87 0a04 	vstr	s0, [r7, #16]
		heat_index_fahrenheit = calculate_heat_index_fahrenheit(temperature_fahrenheit, humidity);
 80026f4:	edd7 0a03 	vldr	s1, [r7, #12]
 80026f8:	ed97 0a04 	vldr	s0, [r7, #16]
 80026fc:	f006 ffec 	bl	80096d8 <calculate_heat_index_fahrenheit>
 8002700:	ed87 0a02 	vstr	s0, [r7, #8]
	}

	dht.humidity = humidity;
 8002704:	4a0f      	ldr	r2, [pc, #60]	; (8002744 <DHT_Sample+0x194>)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6053      	str	r3, [r2, #4]
	dht.temperature_celsius = temperature_celsius;
 800270a:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <DHT_Sample+0x194>)
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	6093      	str	r3, [r2, #8]
	dht.temperature_fahrenheit = temperature_fahrenheit;
 8002710:	4a0c      	ldr	r2, [pc, #48]	; (8002744 <DHT_Sample+0x194>)
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	60d3      	str	r3, [r2, #12]
	dht.heat_index_celsius = to_celsius(heat_index_fahrenheit);
 8002716:	ed97 0a02 	vldr	s0, [r7, #8]
 800271a:	f007 fa71 	bl	8009c00 <to_celsius>
 800271e:	eef0 7a40 	vmov.f32	s15, s0
 8002722:	4b08      	ldr	r3, [pc, #32]	; (8002744 <DHT_Sample+0x194>)
 8002724:	edc3 7a04 	vstr	s15, [r3, #16]
	dht.heat_index_fahrenheit = heat_index_fahrenheit;
 8002728:	4a06      	ldr	r2, [pc, #24]	; (8002744 <DHT_Sample+0x194>)
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	6153      	str	r3, [r2, #20]
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bdb0      	pop	{r4, r5, r7, pc}
 8002736:	bf00      	nop
 8002738:	9999999a 	.word	0x9999999a
 800273c:	3fb99999 	.word	0x3fb99999
 8002740:	40240000 	.word	0x40240000
 8002744:	20000a1c 	.word	0x20000a1c

08002748 <_DHT_StartSignal>:


void _DHT_StartSignal(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
	GPIO_SetOutput(DHT_GPIO_Port, DHT_Pin);
 800274c:	2120      	movs	r1, #32
 800274e:	480d      	ldr	r0, [pc, #52]	; (8002784 <_DHT_StartSignal+0x3c>)
 8002750:	f001 f812 	bl	8003778 <GPIO_SetOutput>
	HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, 0);
 8002754:	2200      	movs	r2, #0
 8002756:	2120      	movs	r1, #32
 8002758:	480a      	ldr	r0, [pc, #40]	; (8002784 <_DHT_StartSignal+0x3c>)
 800275a:	f003 f869 	bl	8005830 <HAL_GPIO_WritePin>
	DWT_DelayUs(18000);
 800275e:	f244 6050 	movw	r0, #18000	; 0x4650
 8002762:	f001 fafb 	bl	8003d5c <DWT_DelayUs>
	HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, 1);
 8002766:	2201      	movs	r2, #1
 8002768:	2120      	movs	r1, #32
 800276a:	4806      	ldr	r0, [pc, #24]	; (8002784 <_DHT_StartSignal+0x3c>)
 800276c:	f003 f860 	bl	8005830 <HAL_GPIO_WritePin>
	DWT_DelayUs(40);
 8002770:	2028      	movs	r0, #40	; 0x28
 8002772:	f001 faf3 	bl	8003d5c <DWT_DelayUs>
	GPIO_SetInput(DHT_GPIO_Port, DHT_Pin);
 8002776:	2120      	movs	r1, #32
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <_DHT_StartSignal+0x3c>)
 800277a:	f001 f819 	bl	80037b0 <GPIO_SetInput>
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	48000800 	.word	0x48000800

08002788 <_DHT_IsResponseValid>:


bool _DHT_IsResponseValid(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
	bool is_checked = false;
 800278e:	2300      	movs	r3, #0
 8002790:	71fb      	strb	r3, [r7, #7]
	if (!(HAL_GPIO_ReadPin(DHT_GPIO_Port, DHT_Pin))) {
 8002792:	2120      	movs	r1, #32
 8002794:	480d      	ldr	r0, [pc, #52]	; (80027cc <_DHT_IsResponseValid+0x44>)
 8002796:	f003 f833 	bl	8005800 <HAL_GPIO_ReadPin>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d10f      	bne.n	80027c0 <_DHT_IsResponseValid+0x38>
		DWT_DelayUs(80);
 80027a0:	2050      	movs	r0, #80	; 0x50
 80027a2:	f001 fadb 	bl	8003d5c <DWT_DelayUs>
		is_checked = HAL_GPIO_ReadPin(DHT_GPIO_Port, DHT_Pin);
 80027a6:	2120      	movs	r1, #32
 80027a8:	4808      	ldr	r0, [pc, #32]	; (80027cc <_DHT_IsResponseValid+0x44>)
 80027aa:	f003 f829 	bl	8005800 <HAL_GPIO_ReadPin>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf14      	ite	ne
 80027b4:	2301      	movne	r3, #1
 80027b6:	2300      	moveq	r3, #0
 80027b8:	71fb      	strb	r3, [r7, #7]
		DWT_DelayUs(80);
 80027ba:	2050      	movs	r0, #80	; 0x50
 80027bc:	f001 face 	bl	8003d5c <DWT_DelayUs>
	}
	return is_checked;
 80027c0:	79fb      	ldrb	r3, [r7, #7]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3708      	adds	r7, #8
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	48000800 	.word	0x48000800

080027d0 <_DHT_Read>:


void _DHT_Read(uint8_t buffer[DHT_N_BYTES])
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < DHT_N_BITS; i++) {
 80027d8:	2300      	movs	r3, #0
 80027da:	73fb      	strb	r3, [r7, #15]
 80027dc:	e04d      	b.n	800287a <_DHT_Read+0xaa>
		while (!(HAL_GPIO_ReadPin (DHT_GPIO_Port, DHT_Pin)));
 80027de:	bf00      	nop
 80027e0:	2120      	movs	r1, #32
 80027e2:	4829      	ldr	r0, [pc, #164]	; (8002888 <_DHT_Read+0xb8>)
 80027e4:	f003 f80c 	bl	8005800 <HAL_GPIO_ReadPin>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d0f8      	beq.n	80027e0 <_DHT_Read+0x10>
		DWT_DelayUs(40);
 80027ee:	2028      	movs	r0, #40	; 0x28
 80027f0:	f001 fab4 	bl	8003d5c <DWT_DelayUs>
		if (HAL_GPIO_ReadPin(DHT_GPIO_Port, DHT_Pin) == 0)
 80027f4:	2120      	movs	r1, #32
 80027f6:	4824      	ldr	r0, [pc, #144]	; (8002888 <_DHT_Read+0xb8>)
 80027f8:	f003 f802 	bl	8005800 <HAL_GPIO_ReadPin>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d119      	bne.n	8002836 <_DHT_Read+0x66>
			ClearBit(buffer, i);
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	08db      	lsrs	r3, r3, #3
 8002806:	b2d8      	uxtb	r0, r3
 8002808:	4602      	mov	r2, r0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4413      	add	r3, r2
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	b25a      	sxtb	r2, r3
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	43db      	mvns	r3, r3
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	2101      	movs	r1, #1
 800281c:	fa01 f303 	lsl.w	r3, r1, r3
 8002820:	b25b      	sxtb	r3, r3
 8002822:	43db      	mvns	r3, r3
 8002824:	b25b      	sxtb	r3, r3
 8002826:	4013      	ands	r3, r2
 8002828:	b25a      	sxtb	r2, r3
 800282a:	4601      	mov	r1, r0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	440b      	add	r3, r1
 8002830:	b2d2      	uxtb	r2, r2
 8002832:	701a      	strb	r2, [r3, #0]
 8002834:	e016      	b.n	8002864 <_DHT_Read+0x94>
		else
			SetBit(buffer, i);
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	08db      	lsrs	r3, r3, #3
 800283a:	b2d8      	uxtb	r0, r3
 800283c:	4602      	mov	r2, r0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	b25a      	sxtb	r2, r3
 8002846:	7bfb      	ldrb	r3, [r7, #15]
 8002848:	43db      	mvns	r3, r3
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	2101      	movs	r1, #1
 8002850:	fa01 f303 	lsl.w	r3, r1, r3
 8002854:	b25b      	sxtb	r3, r3
 8002856:	4313      	orrs	r3, r2
 8002858:	b25a      	sxtb	r2, r3
 800285a:	4601      	mov	r1, r0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	440b      	add	r3, r1
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	701a      	strb	r2, [r3, #0]
		while (HAL_GPIO_ReadPin(DHT_GPIO_Port, DHT_Pin));
 8002864:	bf00      	nop
 8002866:	2120      	movs	r1, #32
 8002868:	4807      	ldr	r0, [pc, #28]	; (8002888 <_DHT_Read+0xb8>)
 800286a:	f002 ffc9 	bl	8005800 <HAL_GPIO_ReadPin>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1f8      	bne.n	8002866 <_DHT_Read+0x96>
	for (uint8_t i = 0; i < DHT_N_BITS; i++) {
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	3301      	adds	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b27      	cmp	r3, #39	; 0x27
 800287e:	d9ae      	bls.n	80027de <_DHT_Read+0xe>
	}
}
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	48000800 	.word	0x48000800

0800288c <_DHT_IsReadValid>:


bool _DHT_IsReadValid(uint8_t buffer[DHT_N_BYTES])
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	uint8_t sum = buffer[IDX_BYTE_IRH] + buffer[IDX_BYTE_DRH] + buffer[IDX_BYTE_ITP] + buffer[IDX_BYTE_DTP];
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	781a      	ldrb	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3301      	adds	r3, #1
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3302      	adds	r3, #2
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	4413      	add	r3, r2
 80028aa:	b2da      	uxtb	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3303      	adds	r3, #3
 80028b0:	781b      	ldrb	r3, [r3, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	73fb      	strb	r3, [r7, #15]
	return sum == buffer[IDX_BYTE_CHK];
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	7bfa      	ldrb	r2, [r7, #15]
 80028be:	429a      	cmp	r2, r3
 80028c0:	bf0c      	ite	eq
 80028c2:	2301      	moveq	r3, #1
 80028c4:	2300      	movne	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	3714      	adds	r7, #20
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <_DHT_IsDht11>:


bool _DHT_IsDht11(uint8_t buffer[DHT_N_BYTES])
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
	return (buffer[IDX_BYTE_DRH] == 0 && buffer[IDX_BYTE_DTP] == 0);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3301      	adds	r3, #1
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <_DHT_IsDht11+0x20>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3303      	adds	r3, #3
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <_DHT_IsDht11+0x20>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <_DHT_IsDht11+0x22>
 80028f4:	2300      	movs	r3, #0
 80028f6:	f003 0301 	and.w	r3, r3, #1
 80028fa:	b2db      	uxtb	r3, r3
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <DHT_GetTemperature>:


float DHT_GetTemperature(bool in_celsius)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]
	if (in_celsius)
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d002      	beq.n	800291e <DHT_GetTemperature+0x16>
		return dht.temperature_celsius;
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <DHT_GetTemperature+0x2c>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	e001      	b.n	8002922 <DHT_GetTemperature+0x1a>
	return dht.temperature_fahrenheit;
 800291e:	4b05      	ldr	r3, [pc, #20]	; (8002934 <DHT_GetTemperature+0x2c>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	ee07 3a90 	vmov	s15, r3
}
 8002926:	eeb0 0a67 	vmov.f32	s0, s15
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr
 8002934:	20000a1c 	.word	0x20000a1c

08002938 <DS18B20_StartAll>:

//
//	Start conversion on all sensors
//
void DS18B20_StartAll()
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
	OneWire_Reset(&OneWire); // Reset the bus
 800293c:	4806      	ldr	r0, [pc, #24]	; (8002958 <DS18B20_StartAll+0x20>)
 800293e:	f000 ffa4 	bl	800388a <OneWire_Reset>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_SKIPROM); // Skip ROM command
 8002942:	21cc      	movs	r1, #204	; 0xcc
 8002944:	4804      	ldr	r0, [pc, #16]	; (8002958 <DS18B20_StartAll+0x20>)
 8002946:	f001 f823 	bl	8003990 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, DS18B20_CMD_CONVERTTEMP); // Start conversion on all sensors
 800294a:	2144      	movs	r1, #68	; 0x44
 800294c:	4802      	ldr	r0, [pc, #8]	; (8002958 <DS18B20_StartAll+0x20>)
 800294e:	f001 f81f 	bl	8003990 <OneWire_WriteByte>
}
 8002952:	bf00      	nop
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000a70 	.word	0x20000a70

0800295c <DS18B20_Read>:

//
//	Read one sensor
//
uint8_t DS18B20_Read(uint8_t number, float *destination)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b089      	sub	sp, #36	; 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	6039      	str	r1, [r7, #0]
 8002966:	71fb      	strb	r3, [r7, #7]
	if( number >= TempSensorCount) // If read sensor is not availible
 8002968:	4b54      	ldr	r3, [pc, #336]	; (8002abc <DS18B20_Read+0x160>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	79fa      	ldrb	r2, [r7, #7]
 800296e:	429a      	cmp	r2, r3
 8002970:	d301      	bcc.n	8002976 <DS18B20_Read+0x1a>
		return 0;
 8002972:	2300      	movs	r3, #0
 8002974:	e09e      	b.n	8002ab4 <DS18B20_Read+0x158>

	uint16_t temperature;
	uint8_t resolution;
	float result;
	uint8_t i = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	76fb      	strb	r3, [r7, #27]
	uint8_t crc;

#endif


	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address)) // Check if sensor is DS18B20 family
 800297a:	79fb      	ldrb	r3, [r7, #7]
 800297c:	011b      	lsls	r3, r3, #4
 800297e:	4a50      	ldr	r2, [pc, #320]	; (8002ac0 <DS18B20_Read+0x164>)
 8002980:	4413      	add	r3, r2
 8002982:	4618      	mov	r0, r3
 8002984:	f000 f94a 	bl	8002c1c <DS18B20_Is>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <DS18B20_Read+0x36>
		return 0;
 800298e:	2300      	movs	r3, #0
 8002990:	e090      	b.n	8002ab4 <DS18B20_Read+0x158>

	if (!OneWire_ReadBit(&OneWire)) // Check if the bus is released
 8002992:	484c      	ldr	r0, [pc, #304]	; (8002ac4 <DS18B20_Read+0x168>)
 8002994:	f000 ffd2 	bl	800393c <OneWire_ReadBit>
 8002998:	4603      	mov	r3, r0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <DS18B20_Read+0x46>
		return 0; // Busy bus - conversion is not finished
 800299e:	2300      	movs	r3, #0
 80029a0:	e088      	b.n	8002ab4 <DS18B20_Read+0x158>

	OneWire_Reset(&OneWire); // Reset the bus
 80029a2:	4848      	ldr	r0, [pc, #288]	; (8002ac4 <DS18B20_Read+0x168>)
 80029a4:	f000 ff71 	bl	800388a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 80029a8:	79fb      	ldrb	r3, [r7, #7]
 80029aa:	011b      	lsls	r3, r3, #4
 80029ac:	4a44      	ldr	r2, [pc, #272]	; (8002ac0 <DS18B20_Read+0x164>)
 80029ae:	4413      	add	r3, r2
 80029b0:	4619      	mov	r1, r3
 80029b2:	4844      	ldr	r0, [pc, #272]	; (8002ac4 <DS18B20_Read+0x168>)
 80029b4:	f001 f920 	bl	8003bf8 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 80029b8:	21be      	movs	r1, #190	; 0xbe
 80029ba:	4842      	ldr	r0, [pc, #264]	; (8002ac4 <DS18B20_Read+0x168>)
 80029bc:	f000 ffe8 	bl	8003990 <OneWire_WriteByte>

	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 80029c0:	2300      	movs	r3, #0
 80029c2:	76fb      	strb	r3, [r7, #27]
 80029c4:	e00d      	b.n	80029e2 <DS18B20_Read+0x86>
		data[i] = OneWire_ReadByte(&OneWire);
 80029c6:	7efc      	ldrb	r4, [r7, #27]
 80029c8:	483e      	ldr	r0, [pc, #248]	; (8002ac4 <DS18B20_Read+0x168>)
 80029ca:	f000 fffe 	bl	80039ca <OneWire_ReadByte>
 80029ce:	4603      	mov	r3, r0
 80029d0:	461a      	mov	r2, r3
 80029d2:	f107 0320 	add.w	r3, r7, #32
 80029d6:	4423      	add	r3, r4
 80029d8:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < DS18B20_DATA_LEN; i++) // Read scratchpad
 80029dc:	7efb      	ldrb	r3, [r7, #27]
 80029de:	3301      	adds	r3, #1
 80029e0:	76fb      	strb	r3, [r7, #27]
 80029e2:	7efb      	ldrb	r3, [r7, #27]
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d9ee      	bls.n	80029c6 <DS18B20_Read+0x6a>

#ifdef _DS18B20_USE_CRC
	crc = OneWire_CRC8(data, 8); // CRC calculation
 80029e8:	f107 030c 	add.w	r3, r7, #12
 80029ec:	2108      	movs	r1, #8
 80029ee:	4618      	mov	r0, r3
 80029f0:	f001 f93c 	bl	8003c6c <OneWire_CRC8>
 80029f4:	4603      	mov	r3, r0
 80029f6:	76bb      	strb	r3, [r7, #26]

	if (crc != data[8])
 80029f8:	7d3b      	ldrb	r3, [r7, #20]
 80029fa:	7eba      	ldrb	r2, [r7, #26]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <DS18B20_Read+0xa8>
		return 0; // CRC invalid
 8002a00:	2300      	movs	r3, #0
 8002a02:	e057      	b.n	8002ab4 <DS18B20_Read+0x158>
#endif
	temperature = data[0] | (data[1] << 8); // Temperature is 16-bit length
 8002a04:	7b3b      	ldrb	r3, [r7, #12]
 8002a06:	b21a      	sxth	r2, r3
 8002a08:	7b7b      	ldrb	r3, [r7, #13]
 8002a0a:	021b      	lsls	r3, r3, #8
 8002a0c:	b21b      	sxth	r3, r3
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	833b      	strh	r3, [r7, #24]

	OneWire_Reset(&OneWire); // Reset the bus
 8002a14:	482b      	ldr	r0, [pc, #172]	; (8002ac4 <DS18B20_Read+0x168>)
 8002a16:	f000 ff38 	bl	800388a <OneWire_Reset>

	resolution = ((data[4] & 0x60) >> 5) + 9; // Sensor's resolution from scratchpad's byte 4
 8002a1a:	7c3b      	ldrb	r3, [r7, #16]
 8002a1c:	115b      	asrs	r3, r3, #5
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	3309      	adds	r3, #9
 8002a28:	75fb      	strb	r3, [r7, #23]

	switch (resolution) // Chceck the correct value dur to resolution
 8002a2a:	7dfb      	ldrb	r3, [r7, #23]
 8002a2c:	3b09      	subs	r3, #9
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d83a      	bhi.n	8002aa8 <DS18B20_Read+0x14c>
 8002a32:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <DS18B20_Read+0xdc>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a49 	.word	0x08002a49
 8002a3c:	08002a61 	.word	0x08002a61
 8002a40:	08002a79 	.word	0x08002a79
 8002a44:	08002a91 	.word	0x08002a91
	{
		case DS18B20_Resolution_9bits:
			result = temperature*(float)DS18B20_STEP_9BIT;
 8002a48:	8b3b      	ldrh	r3, [r7, #24]
 8002a4a:	ee07 3a90 	vmov	s15, r3
 8002a4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002a56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a5a:	edc7 7a07 	vstr	s15, [r7, #28]
		break;
 8002a5e:	e025      	b.n	8002aac <DS18B20_Read+0x150>
		case DS18B20_Resolution_10bits:
			result = temperature*(float)DS18B20_STEP_10BIT;
 8002a60:	8b3b      	ldrh	r3, [r7, #24]
 8002a62:	ee07 3a90 	vmov	s15, r3
 8002a66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a6a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a72:	edc7 7a07 	vstr	s15, [r7, #28]
		 break;
 8002a76:	e019      	b.n	8002aac <DS18B20_Read+0x150>
		case DS18B20_Resolution_11bits:
			result = temperature*(float)DS18B20_STEP_11BIT;
 8002a78:	8b3b      	ldrh	r3, [r7, #24]
 8002a7a:	ee07 3a90 	vmov	s15, r3
 8002a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a82:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
 8002a86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a8a:	edc7 7a07 	vstr	s15, [r7, #28]
		break;
 8002a8e:	e00d      	b.n	8002aac <DS18B20_Read+0x150>
		case DS18B20_Resolution_12bits:
			result = temperature*(float)DS18B20_STEP_12BIT;
 8002a90:	8b3b      	ldrh	r3, [r7, #24]
 8002a92:	ee07 3a90 	vmov	s15, r3
 8002a96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a9a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002ac8 <DS18B20_Read+0x16c>
 8002a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002aa2:	edc7 7a07 	vstr	s15, [r7, #28]
		 break;
 8002aa6:	e001      	b.n	8002aac <DS18B20_Read+0x150>
		default:
			result = 0xFF;
 8002aa8:	4b08      	ldr	r3, [pc, #32]	; (8002acc <DS18B20_Read+0x170>)
 8002aaa:	61fb      	str	r3, [r7, #28]
	}

	*destination = result;
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	69fa      	ldr	r2, [r7, #28]
 8002ab0:	601a      	str	r2, [r3, #0]

	return 1; //temperature valid
 8002ab2:	2301      	movs	r3, #1
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3724      	adds	r7, #36	; 0x24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd90      	pop	{r4, r7, pc}
 8002abc:	20000204 	.word	0x20000204
 8002ac0:	20000a60 	.word	0x20000a60
 8002ac4:	20000a70 	.word	0x20000a70
 8002ac8:	3d800000 	.word	0x3d800000
 8002acc:	437f0000 	.word	0x437f0000

08002ad0 <DS18B20_SetResolution>:

	return conf;
}

uint8_t DS18B20_SetResolution(uint8_t number, DS18B20_Resolution_t resolution)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	460a      	mov	r2, r1
 8002ada:	71fb      	strb	r3, [r7, #7]
 8002adc:	4613      	mov	r3, r2
 8002ade:	71bb      	strb	r3, [r7, #6]
	if( number >= TempSensorCount)
 8002ae0:	4b4b      	ldr	r3, [pc, #300]	; (8002c10 <DS18B20_SetResolution+0x140>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	79fa      	ldrb	r2, [r7, #7]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d301      	bcc.n	8002aee <DS18B20_SetResolution+0x1e>
		return 0;
 8002aea:	2300      	movs	r3, #0
 8002aec:	e08c      	b.n	8002c08 <DS18B20_SetResolution+0x138>

	uint8_t th, tl, conf;
	if (!DS18B20_Is((uint8_t*)&ds18b20[number].Address))
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	011b      	lsls	r3, r3, #4
 8002af2:	4a48      	ldr	r2, [pc, #288]	; (8002c14 <DS18B20_SetResolution+0x144>)
 8002af4:	4413      	add	r3, r2
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 f890 	bl	8002c1c <DS18B20_Is>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <DS18B20_SetResolution+0x36>
		return 0;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e080      	b.n	8002c08 <DS18B20_SetResolution+0x138>

	OneWire_Reset(&OneWire); // Reset the bus
 8002b06:	4844      	ldr	r0, [pc, #272]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002b08:	f000 febf 	bl	800388a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002b0c:	79fb      	ldrb	r3, [r7, #7]
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	4a40      	ldr	r2, [pc, #256]	; (8002c14 <DS18B20_SetResolution+0x144>)
 8002b12:	4413      	add	r3, r2
 8002b14:	4619      	mov	r1, r3
 8002b16:	4840      	ldr	r0, [pc, #256]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002b18:	f001 f86e 	bl	8003bf8 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_RSCRATCHPAD); // Read scratchpad command
 8002b1c:	21be      	movs	r1, #190	; 0xbe
 8002b1e:	483e      	ldr	r0, [pc, #248]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002b20:	f000 ff36 	bl	8003990 <OneWire_WriteByte>

	OneWire_ReadByte(&OneWire);
 8002b24:	483c      	ldr	r0, [pc, #240]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002b26:	f000 ff50 	bl	80039ca <OneWire_ReadByte>
	OneWire_ReadByte(&OneWire);
 8002b2a:	483b      	ldr	r0, [pc, #236]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002b2c:	f000 ff4d 	bl	80039ca <OneWire_ReadByte>

	th = OneWire_ReadByte(&OneWire); 	// Writing to scratchpad begins from the temperature alarms bytes
 8002b30:	4839      	ldr	r0, [pc, #228]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002b32:	f000 ff4a 	bl	80039ca <OneWire_ReadByte>
 8002b36:	4603      	mov	r3, r0
 8002b38:	73bb      	strb	r3, [r7, #14]
	tl = OneWire_ReadByte(&OneWire); 	// 	so i have to store them.
 8002b3a:	4837      	ldr	r0, [pc, #220]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002b3c:	f000 ff45 	bl	80039ca <OneWire_ReadByte>
 8002b40:	4603      	mov	r3, r0
 8002b42:	737b      	strb	r3, [r7, #13]
	conf = OneWire_ReadByte(&OneWire);	// Config byte
 8002b44:	4834      	ldr	r0, [pc, #208]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002b46:	f000 ff40 	bl	80039ca <OneWire_ReadByte>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	73fb      	strb	r3, [r7, #15]

	if (resolution == DS18B20_Resolution_9bits) // Bits setting
 8002b4e:	79bb      	ldrb	r3, [r7, #6]
 8002b50:	2b09      	cmp	r3, #9
 8002b52:	d108      	bne.n	8002b66 <DS18B20_SetResolution+0x96>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002b54:	7bfb      	ldrb	r3, [r7, #15]
 8002b56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b5a:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	f023 0320 	bic.w	r3, r3, #32
 8002b62:	73fb      	strb	r3, [r7, #15]
 8002b64:	e022      	b.n	8002bac <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_10bits)
 8002b66:	79bb      	ldrb	r3, [r7, #6]
 8002b68:	2b0a      	cmp	r3, #10
 8002b6a:	d108      	bne.n	8002b7e <DS18B20_SetResolution+0xae>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b72:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	f043 0320 	orr.w	r3, r3, #32
 8002b7a:	73fb      	strb	r3, [r7, #15]
 8002b7c:	e016      	b.n	8002bac <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 8002b7e:	79bb      	ldrb	r3, [r7, #6]
 8002b80:	2b0b      	cmp	r3, #11
 8002b82:	d108      	bne.n	8002b96 <DS18B20_SetResolution+0xc6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002b84:	7bfb      	ldrb	r3, [r7, #15]
 8002b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b8a:	73fb      	strb	r3, [r7, #15]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	f023 0320 	bic.w	r3, r3, #32
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e00a      	b.n	8002bac <DS18B20_SetResolution+0xdc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 8002b96:	79bb      	ldrb	r3, [r7, #6]
 8002b98:	2b0c      	cmp	r3, #12
 8002b9a:	d107      	bne.n	8002bac <DS18B20_SetResolution+0xdc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 8002b9c:	7bfb      	ldrb	r3, [r7, #15]
 8002b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba2:	73fb      	strb	r3, [r7, #15]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	f043 0320 	orr.w	r3, r3, #32
 8002baa:	73fb      	strb	r3, [r7, #15]
	}

	OneWire_Reset(&OneWire); // Reset the bus
 8002bac:	481a      	ldr	r0, [pc, #104]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002bae:	f000 fe6c 	bl	800388a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002bb2:	79fb      	ldrb	r3, [r7, #7]
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	4a17      	ldr	r2, [pc, #92]	; (8002c14 <DS18B20_SetResolution+0x144>)
 8002bb8:	4413      	add	r3, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	4816      	ldr	r0, [pc, #88]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002bbe:	f001 f81b 	bl	8003bf8 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_WSCRATCHPAD); // Write scratchpad command
 8002bc2:	214e      	movs	r1, #78	; 0x4e
 8002bc4:	4814      	ldr	r0, [pc, #80]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002bc6:	f000 fee3 	bl	8003990 <OneWire_WriteByte>

	OneWire_WriteByte(&OneWire, th); // Write 3 bytes to scratchpad
 8002bca:	7bbb      	ldrb	r3, [r7, #14]
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4812      	ldr	r0, [pc, #72]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002bd0:	f000 fede 	bl	8003990 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, tl);
 8002bd4:	7b7b      	ldrb	r3, [r7, #13]
 8002bd6:	4619      	mov	r1, r3
 8002bd8:	480f      	ldr	r0, [pc, #60]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002bda:	f000 fed9 	bl	8003990 <OneWire_WriteByte>
	OneWire_WriteByte(&OneWire, conf);
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	4619      	mov	r1, r3
 8002be2:	480d      	ldr	r0, [pc, #52]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002be4:	f000 fed4 	bl	8003990 <OneWire_WriteByte>

	OneWire_Reset(&OneWire); // Reset the bus
 8002be8:	480b      	ldr	r0, [pc, #44]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002bea:	f000 fe4e 	bl	800388a <OneWire_Reset>
	OneWire_SelectWithPointer(&OneWire, (uint8_t*)&ds18b20[number].Address); // Select the sensor by ROM
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	4a08      	ldr	r2, [pc, #32]	; (8002c14 <DS18B20_SetResolution+0x144>)
 8002bf4:	4413      	add	r3, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	4807      	ldr	r0, [pc, #28]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002bfa:	f000 fffd 	bl	8003bf8 <OneWire_SelectWithPointer>
	OneWire_WriteByte(&OneWire, ONEWIRE_CMD_CPYSCRATCHPAD); // Copy scratchpad to EEPROM
 8002bfe:	2148      	movs	r1, #72	; 0x48
 8002c00:	4805      	ldr	r0, [pc, #20]	; (8002c18 <DS18B20_SetResolution+0x148>)
 8002c02:	f000 fec5 	bl	8003990 <OneWire_WriteByte>

	return 1;
 8002c06:	2301      	movs	r3, #1
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	20000204 	.word	0x20000204
 8002c14:	20000a60 	.word	0x20000a60
 8002c18:	20000a70 	.word	0x20000a70

08002c1c <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t* ROM)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
	if (*ROM == DS18B20_FAMILY_CODE) // Check family code
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b28      	cmp	r3, #40	; 0x28
 8002c2a:	d101      	bne.n	8002c30 <DS18B20_Is+0x14>
		return 1;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <DS18B20_Is+0x16>
	return 0;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <DS18B20_AllDone>:

uint8_t DS18B20_AllDone(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
	return OneWire_ReadBit(&OneWire); // Bus is down - busy
 8002c44:	4802      	ldr	r0, [pc, #8]	; (8002c50 <DS18B20_AllDone+0x10>)
 8002c46:	f000 fe79 	bl	800393c <OneWire_ReadBit>
 8002c4a:	4603      	mov	r3, r0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000a70 	.word	0x20000a70

08002c54 <DS18B20_ReadAll>:

void DS18B20_ReadAll(void)
{
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
	uint8_t i;

	if (DS18B20_AllDone())
 8002c5a:	f7ff fff1 	bl	8002c40 <DS18B20_AllDone>
 8002c5e:	4603      	mov	r3, r0
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d02e      	beq.n	8002cc2 <DS18B20_ReadAll+0x6e>
	{
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8002c64:	2300      	movs	r3, #0
 8002c66:	71fb      	strb	r3, [r7, #7]
 8002c68:	e026      	b.n	8002cb8 <DS18B20_ReadAll+0x64>
		{
			ds18b20[i].ValidDataFlag = 0;
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	4a17      	ldr	r2, [pc, #92]	; (8002ccc <DS18B20_ReadAll+0x78>)
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	4413      	add	r3, r2
 8002c72:	330c      	adds	r3, #12
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]

			if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	4a13      	ldr	r2, [pc, #76]	; (8002ccc <DS18B20_ReadAll+0x78>)
 8002c7e:	4413      	add	r3, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff ffcb 	bl	8002c1c <DS18B20_Is>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d012      	beq.n	8002cb2 <DS18B20_ReadAll+0x5e>
			{
				ds18b20[i].ValidDataFlag = DS18B20_Read(i, &ds18b20[i].Temperature); // Read single sensor
 8002c8c:	79fb      	ldrb	r3, [r7, #7]
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	3308      	adds	r3, #8
 8002c92:	4a0e      	ldr	r2, [pc, #56]	; (8002ccc <DS18B20_ReadAll+0x78>)
 8002c94:	441a      	add	r2, r3
 8002c96:	79fc      	ldrb	r4, [r7, #7]
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fe5d 	bl	800295c <DS18B20_Read>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <DS18B20_ReadAll+0x78>)
 8002ca8:	0123      	lsls	r3, r4, #4
 8002caa:	4413      	add	r3, r2
 8002cac:	330c      	adds	r3, #12
 8002cae:	460a      	mov	r2, r1
 8002cb0:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < TempSensorCount; i++) // All detected sensors loop
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	71fb      	strb	r3, [r7, #7]
 8002cb8:	4b05      	ldr	r3, [pc, #20]	; (8002cd0 <DS18B20_ReadAll+0x7c>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	79fa      	ldrb	r2, [r7, #7]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d3d3      	bcc.n	8002c6a <DS18B20_ReadAll+0x16>
			}
		}
	}
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd90      	pop	{r4, r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000a60 	.word	0x20000a60
 8002cd0:	20000204 	.word	0x20000204

08002cd4 <DS18B20_GetTemperature>:
{
	return TempSensorCount;
}

uint8_t DS18B20_GetTemperature(uint8_t number, float* destination)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	71fb      	strb	r3, [r7, #7]
	if(!ds18b20[number].ValidDataFlag)
 8002ce0:	79fb      	ldrb	r3, [r7, #7]
 8002ce2:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <DS18B20_GetTemperature+0x40>)
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	4413      	add	r3, r2
 8002ce8:	330c      	adds	r3, #12
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d101      	bne.n	8002cf4 <DS18B20_GetTemperature+0x20>
		return 0;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e008      	b.n	8002d06 <DS18B20_GetTemperature+0x32>

	*destination = ds18b20[number].Temperature;
 8002cf4:	79fb      	ldrb	r3, [r7, #7]
 8002cf6:	4a07      	ldr	r2, [pc, #28]	; (8002d14 <DS18B20_GetTemperature+0x40>)
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	601a      	str	r2, [r3, #0]
	return 1;
 8002d04:	2301      	movs	r3, #1

}
 8002d06:	4618      	mov	r0, r3
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	20000a60 	.word	0x20000a60

08002d18 <DS18B20_Init>:

void DS18B20_Init(DS18B20_Resolution_t resolution)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71fb      	strb	r3, [r7, #7]
	uint8_t next = 0, i = 0, j;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
 8002d26:	2300      	movs	r3, #0
 8002d28:	73bb      	strb	r3, [r7, #14]
	OneWire_Init(&OneWire, _DS18B20_GPIO, _DS18B20_PIN); // Init OneWire bus
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	4923      	ldr	r1, [pc, #140]	; (8002dbc <DS18B20_Init+0xa4>)
 8002d2e:	4824      	ldr	r0, [pc, #144]	; (8002dc0 <DS18B20_Init+0xa8>)
 8002d30:	f000 ffd4 	bl	8003cdc <OneWire_Init>

	next = OneWire_First(&OneWire); // Search first OneWire device
 8002d34:	4822      	ldr	r0, [pc, #136]	; (8002dc0 <DS18B20_Init+0xa8>)
 8002d36:	f000 ff42 	bl	8003bbe <OneWire_First>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	73fb      	strb	r3, [r7, #15]
	while(next)
 8002d3e:	e018      	b.n	8002d72 <DS18B20_Init+0x5a>
	{
		TempSensorCount++;
 8002d40:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <DS18B20_Init+0xac>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	3301      	adds	r3, #1
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <DS18B20_Init+0xac>)
 8002d4a:	701a      	strb	r2, [r3, #0]
		OneWire_GetFullROM(&OneWire, (uint8_t*)&ds18b20[i++].Address); // Get the ROM of next sensor
 8002d4c:	7bbb      	ldrb	r3, [r7, #14]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	73ba      	strb	r2, [r7, #14]
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	4a1c      	ldr	r2, [pc, #112]	; (8002dc8 <DS18B20_Init+0xb0>)
 8002d56:	4413      	add	r3, r2
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4819      	ldr	r0, [pc, #100]	; (8002dc0 <DS18B20_Init+0xa8>)
 8002d5c:	f000 ff6a 	bl	8003c34 <OneWire_GetFullROM>
		next = OneWire_Next(&OneWire);
 8002d60:	4817      	ldr	r0, [pc, #92]	; (8002dc0 <DS18B20_Init+0xa8>)
 8002d62:	f000 ff3c 	bl	8003bde <OneWire_Next>
 8002d66:	4603      	mov	r3, r0
 8002d68:	73fb      	strb	r3, [r7, #15]
		if(TempSensorCount >= _DS18B20_MAX_SENSORS) // More sensors than set maximum is not allowed
 8002d6a:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <DS18B20_Init+0xac>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d103      	bne.n	8002d7a <DS18B20_Init+0x62>
	while(next)
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1e3      	bne.n	8002d40 <DS18B20_Init+0x28>
 8002d78:	e000      	b.n	8002d7c <DS18B20_Init+0x64>
			break;
 8002d7a:	bf00      	nop
	}

	for(j = 0; j < i; j++)
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	737b      	strb	r3, [r7, #13]
 8002d80:	e014      	b.n	8002dac <DS18B20_Init+0x94>
	{
		if (DS18B20_Is((uint8_t*)&ds18b20[i].Address))
 8002d82:	7bbb      	ldrb	r3, [r7, #14]
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	4a10      	ldr	r2, [pc, #64]	; (8002dc8 <DS18B20_Init+0xb0>)
 8002d88:	4413      	add	r3, r2
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7ff ff46 	bl	8002c1c <DS18B20_Is>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d005      	beq.n	8002da2 <DS18B20_Init+0x8a>
		{
			DS18B20_SetResolution(j, resolution); // Set the initial resolution to sensor
 8002d96:	79fa      	ldrb	r2, [r7, #7]
 8002d98:	7b7b      	ldrb	r3, [r7, #13]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fe97 	bl	8002ad0 <DS18B20_SetResolution>
		}

		DS18B20_StartAll(); // Start conversion on all sensors
 8002da2:	f7ff fdc9 	bl	8002938 <DS18B20_StartAll>
	for(j = 0; j < i; j++)
 8002da6:	7b7b      	ldrb	r3, [r7, #13]
 8002da8:	3301      	adds	r3, #1
 8002daa:	737b      	strb	r3, [r7, #13]
 8002dac:	7b7a      	ldrb	r2, [r7, #13]
 8002dae:	7bbb      	ldrb	r3, [r7, #14]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d3e6      	bcc.n	8002d82 <DS18B20_Init+0x6a>
	}
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	48000800 	.word	0x48000800
 8002dc0:	20000a70 	.word	0x20000a70
 8002dc4:	20000204 	.word	0x20000204
 8002dc8:	20000a60 	.word	0x20000a60

08002dcc <DS18B20_Sample>:


void DS18B20_Sample(Temperature_t *temperatures)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
	DS18B20_ReadAll();
 8002dd4:	f7ff ff3e 	bl	8002c54 <DS18B20_ReadAll>
	DS18B20_StartAll();
 8002dd8:	f7ff fdae 	bl	8002938 <DS18B20_StartAll>

	float temperature;
	for(uint8_t i = 0; i < TempSensorCount; i++) {
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
 8002de0:	e020      	b.n	8002e24 <DS18B20_Sample+0x58>
		if(DS18B20_GetTemperature(i, &temperature)) {
 8002de2:	f107 0208 	add.w	r2, r7, #8
 8002de6:	7bfb      	ldrb	r3, [r7, #15]
 8002de8:	4611      	mov	r1, r2
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff ff72 	bl	8002cd4 <DS18B20_GetTemperature>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d013      	beq.n	8002e1e <DS18B20_Sample+0x52>
			temperatures[i].celsius = temperature;
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	605a      	str	r2, [r3, #4]
			temperatures[i].fahrenheit = to_fahrenheit(temperature);
 8002e02:	edd7 7a02 	vldr	s15, [r7, #8]
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	18d4      	adds	r4, r2, r3
 8002e0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e12:	f006 fec9 	bl	8009ba8 <to_fahrenheit>
 8002e16:	eef0 7a40 	vmov.f32	s15, s0
 8002e1a:	edc4 7a00 	vstr	s15, [r4]
	for(uint8_t i = 0; i < TempSensorCount; i++) {
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	3301      	adds	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <DS18B20_Sample+0x6c>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d3d9      	bcc.n	8002de2 <DS18B20_Sample+0x16>
		}
	}
}
 8002e2e:	bf00      	nop
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd90      	pop	{r4, r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000204 	.word	0x20000204

08002e3c <DS18B20_ToJson_Partial>:


void DS18B20_ToJson_Partial(char *buffer, Temperature_t *temperatures)
{
 8002e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e40:	b092      	sub	sp, #72	; 0x48
 8002e42:	af04      	add	r7, sp, #16
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	6039      	str	r1, [r7, #0]
	// Prepare JSON for every station
	memset(buffer_stations, 0, DS1B20_TOSTR_LENGTH);
 8002e48:	2228      	movs	r2, #40	; 0x28
 8002e4a:	2100      	movs	r1, #0
 8002e4c:	483e      	ldr	r0, [pc, #248]	; (8002f48 <DS18B20_ToJson_Partial+0x10c>)
 8002e4e:	f007 ffb2 	bl	800adb6 <memset>
	snprintf(buffer_stations + strlen(buffer_stations), DS1B20_TOSTR_LENGTH,
 8002e52:	483d      	ldr	r0, [pc, #244]	; (8002f48 <DS18B20_ToJson_Partial+0x10c>)
 8002e54:	f7fd f9c4 	bl	80001e0 <strlen>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b3b      	ldr	r3, [pc, #236]	; (8002f48 <DS18B20_ToJson_Partial+0x10c>)
 8002e5c:	18d6      	adds	r6, r2, r3
			"\"%d\":{\"T_C\":%.2f,\"T_F\":%.2f}", 0, temperatures[0].celsius, temperatures[0].fahrenheit);
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
	snprintf(buffer_stations + strlen(buffer_stations), DS1B20_TOSTR_LENGTH,
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd fb78 	bl	8000558 <__aeabi_f2d>
 8002e68:	4604      	mov	r4, r0
 8002e6a:	460d      	mov	r5, r1
			"\"%d\":{\"T_C\":%.2f,\"T_F\":%.2f}", 0, temperatures[0].celsius, temperatures[0].fahrenheit);
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	681b      	ldr	r3, [r3, #0]
	snprintf(buffer_stations + strlen(buffer_stations), DS1B20_TOSTR_LENGTH,
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fb71 	bl	8000558 <__aeabi_f2d>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002e7e:	e9cd 4500 	strd	r4, r5, [sp]
 8002e82:	2300      	movs	r3, #0
 8002e84:	4a31      	ldr	r2, [pc, #196]	; (8002f4c <DS18B20_ToJson_Partial+0x110>)
 8002e86:	2128      	movs	r1, #40	; 0x28
 8002e88:	4630      	mov	r0, r6
 8002e8a:	f008 fcb1 	bl	800b7f0 <sniprintf>

	char json_stations[DS1B20_TOSTR_LENGTH];
	strncpy(json_stations, buffer_stations, sizeof json_stations);
 8002e8e:	f107 030c 	add.w	r3, r7, #12
 8002e92:	2228      	movs	r2, #40	; 0x28
 8002e94:	492c      	ldr	r1, [pc, #176]	; (8002f48 <DS18B20_ToJson_Partial+0x10c>)
 8002e96:	4618      	mov	r0, r3
 8002e98:	f008 fcfa 	bl	800b890 <strncpy>

	if (TempSensorCount > 1) {
 8002e9c:	4b2c      	ldr	r3, [pc, #176]	; (8002f50 <DS18B20_ToJson_Partial+0x114>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d940      	bls.n	8002f26 <DS18B20_ToJson_Partial+0xea>
		for (uint8_t i = 1; i < _DS18B20_MAX_SENSORS; i++) {
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002eaa:	e038      	b.n	8002f1e <DS18B20_ToJson_Partial+0xe2>
			snprintf(buffer_stations + strlen(buffer_stations), DS1B20_TOSTR_LENGTH,
 8002eac:	4826      	ldr	r0, [pc, #152]	; (8002f48 <DS18B20_ToJson_Partial+0x10c>)
 8002eae:	f7fd f997 	bl	80001e0 <strlen>
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <DS18B20_ToJson_Partial+0x10c>)
 8002eb6:	18d6      	adds	r6, r2, r3
 8002eb8:	f897 8037 	ldrb.w	r8, [r7, #55]	; 0x37
					 ",\"%d\":{\"T_C\":%.2f,\"T_F\":%.2f}", i, temperatures[i].celsius, temperatures[i].fahrenheit);
 8002ebc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ec0:	00db      	lsls	r3, r3, #3
 8002ec2:	683a      	ldr	r2, [r7, #0]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	685b      	ldr	r3, [r3, #4]
			snprintf(buffer_stations + strlen(buffer_stations), DS1B20_TOSTR_LENGTH,
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd fb45 	bl	8000558 <__aeabi_f2d>
 8002ece:	4604      	mov	r4, r0
 8002ed0:	460d      	mov	r5, r1
					 ",\"%d\":{\"T_C\":%.2f,\"T_F\":%.2f}", i, temperatures[i].celsius, temperatures[i].fahrenheit);
 8002ed2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002ed6:	00db      	lsls	r3, r3, #3
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	4413      	add	r3, r2
 8002edc:	681b      	ldr	r3, [r3, #0]
			snprintf(buffer_stations + strlen(buffer_stations), DS1B20_TOSTR_LENGTH,
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd fb3a 	bl	8000558 <__aeabi_f2d>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002eec:	e9cd 4500 	strd	r4, r5, [sp]
 8002ef0:	4643      	mov	r3, r8
 8002ef2:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <DS18B20_ToJson_Partial+0x118>)
 8002ef4:	2128      	movs	r1, #40	; 0x28
 8002ef6:	4630      	mov	r0, r6
 8002ef8:	f008 fc7a 	bl	800b7f0 <sniprintf>
			strncat(json_stations, buffer_stations + strlen(buffer_stations), sizeof json_stations);
 8002efc:	4812      	ldr	r0, [pc, #72]	; (8002f48 <DS18B20_ToJson_Partial+0x10c>)
 8002efe:	f7fd f96f 	bl	80001e0 <strlen>
 8002f02:	4602      	mov	r2, r0
 8002f04:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <DS18B20_ToJson_Partial+0x10c>)
 8002f06:	18d1      	adds	r1, r2, r3
 8002f08:	f107 030c 	add.w	r3, r7, #12
 8002f0c:	2228      	movs	r2, #40	; 0x28
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f008 fcaa 	bl	800b868 <strncat>
		for (uint8_t i = 1; i < _DS18B20_MAX_SENSORS; i++) {
 8002f14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f18:	3301      	adds	r3, #1
 8002f1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002f1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0c2      	beq.n	8002eac <DS18B20_ToJson_Partial+0x70>
		}
	}

	// Prepare partial JSON
	memset(buffer, 0, DS18B20_JSON_LENGTH);
 8002f26:	2255      	movs	r2, #85	; 0x55
 8002f28:	2100      	movs	r1, #0
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f007 ff43 	bl	800adb6 <memset>
	snprintf(buffer, DS18B20_JSON_LENGTH, "\"DS18B20\":{%s}", json_stations);
 8002f30:	f107 030c 	add.w	r3, r7, #12
 8002f34:	4a08      	ldr	r2, [pc, #32]	; (8002f58 <DS18B20_ToJson_Partial+0x11c>)
 8002f36:	2155      	movs	r1, #85	; 0x55
 8002f38:	6878      	ldr	r0, [r7, #4]
 8002f3a:	f008 fc59 	bl	800b7f0 <sniprintf>
}
 8002f3e:	bf00      	nop
 8002f40:	3738      	adds	r7, #56	; 0x38
 8002f42:	46bd      	mov	sp, r7
 8002f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f48:	20000a34 	.word	0x20000a34
 8002f4c:	0800d388 	.word	0x0800d388
 8002f50:	20000204 	.word	0x20000204
 8002f54:	0800d3a8 	.word	0x0800d3a8
 8002f58:	0800d3c8 	.word	0x0800d3c8

08002f5c <ESP8266_Init>:

NetworkInfo_t net_info;
ESP8266_t esp;

void ESP8266_Init(UART_HandleTypeDef *huart_device, UART_HandleTypeDef *huart_external)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08c      	sub	sp, #48	; 0x30
 8002f60:	af02      	add	r7, sp, #8
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
	char host[HOST_LENGTH];
	snprintf(host, sizeof host, "%s:%d", net_info.address, net_info.port);
 8002f66:	4b1b      	ldr	r3, [pc, #108]	; (8002fd4 <ESP8266_Init+0x78>)
 8002f68:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f6c:	f107 000c 	add.w	r0, r7, #12
 8002f70:	9300      	str	r3, [sp, #0]
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <ESP8266_Init+0x7c>)
 8002f74:	4a19      	ldr	r2, [pc, #100]	; (8002fdc <ESP8266_Init+0x80>)
 8002f76:	2119      	movs	r1, #25
 8002f78:	f008 fc3a 	bl	800b7f0 <sniprintf>

	esp.huart_device = huart_device;
 8002f7c:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <ESP8266_Init+0x84>)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6013      	str	r3, [r2, #0]
	esp.huart_external = huart_external;
 8002f82:	4a17      	ldr	r2, [pc, #92]	; (8002fe0 <ESP8266_Init+0x84>)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	6053      	str	r3, [r2, #4]
	ESP8266_UpdateWifiInfo(net_info.ssid, net_info.password);
 8002f88:	4916      	ldr	r1, [pc, #88]	; (8002fe4 <ESP8266_Init+0x88>)
 8002f8a:	4812      	ldr	r0, [pc, #72]	; (8002fd4 <ESP8266_Init+0x78>)
 8002f8c:	f000 f830 	bl	8002ff0 <ESP8266_UpdateWifiInfo>
	ESP8266_UpdateTcpInfo(net_info.address, net_info.port);
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <ESP8266_Init+0x78>)
 8002f92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f96:	4619      	mov	r1, r3
 8002f98:	480f      	ldr	r0, [pc, #60]	; (8002fd8 <ESP8266_Init+0x7c>)
 8002f9a:	f000 f851 	bl	8003040 <ESP8266_UpdateTcpInfo>
	strcpy(esp.host, host);
 8002f9e:	f107 030c 	add.w	r3, r7, #12
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4810      	ldr	r0, [pc, #64]	; (8002fe8 <ESP8266_Init+0x8c>)
 8002fa6:	f008 fc57 	bl	800b858 <strcpy>
	esp.current_rx_byte = 0;
 8002faa:	4b0d      	ldr	r3, [pc, #52]	; (8002fe0 <ESP8266_Init+0x84>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
	esp.counter_total_bytes_read = 0;
 8002fb2:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <ESP8266_Init+0x84>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
	esp.answer_write_point = 0;
 8002fba:	4b09      	ldr	r3, [pc, #36]	; (8002fe0 <ESP8266_Init+0x84>)
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
	memset(esp.answer, 0, sizeof esp.answer);
 8002fc2:	22fa      	movs	r2, #250	; 0xfa
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4809      	ldr	r0, [pc, #36]	; (8002fec <ESP8266_Init+0x90>)
 8002fc8:	f007 fef5 	bl	800adb6 <memset>
}
 8002fcc:	bf00      	nop
 8002fce:	3728      	adds	r7, #40	; 0x28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	20000a84 	.word	0x20000a84
 8002fd8:	20000aca 	.word	0x20000aca
 8002fdc:	0800d3d8 	.word	0x0800d3d8
 8002fe0:	20000ae0 	.word	0x20000ae0
 8002fe4:	20000a98 	.word	0x20000a98
 8002fe8:	20000b74 	.word	0x20000b74
 8002fec:	20000b90 	.word	0x20000b90

08002ff0 <ESP8266_UpdateWifiInfo>:


void ESP8266_UpdateWifiInfo(char *new_ssid, char *new_password)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b09c      	sub	sp, #112	; 0x70
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
	strcpy(net_info.ssid, new_ssid);
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	480c      	ldr	r0, [pc, #48]	; (8003030 <ESP8266_UpdateWifiInfo+0x40>)
 8002ffe:	f008 fc2b 	bl	800b858 <strcpy>
	strcpy(net_info.password, new_password);
 8003002:	6839      	ldr	r1, [r7, #0]
 8003004:	480b      	ldr	r0, [pc, #44]	; (8003034 <ESP8266_UpdateWifiInfo+0x44>)
 8003006:	f008 fc27 	bl	800b858 <strcpy>

	char at_cwjap[CWJAP_LENGTH];
	snprintf(at_cwjap, sizeof at_cwjap, "AT+CWJAP=\"%s\",\"%s\"\r\n", new_ssid, new_password);
 800300a:	f107 000c 	add.w	r0, r7, #12
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a08      	ldr	r2, [pc, #32]	; (8003038 <ESP8266_UpdateWifiInfo+0x48>)
 8003016:	215a      	movs	r1, #90	; 0x5a
 8003018:	f008 fbea 	bl	800b7f0 <sniprintf>
	strcpy(esp.at_cwjap, at_cwjap);
 800301c:	f107 030c 	add.w	r3, r7, #12
 8003020:	4619      	mov	r1, r3
 8003022:	4806      	ldr	r0, [pc, #24]	; (800303c <ESP8266_UpdateWifiInfo+0x4c>)
 8003024:	f008 fc18 	bl	800b858 <strcpy>
}
 8003028:	bf00      	nop
 800302a:	3768      	adds	r7, #104	; 0x68
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20000a84 	.word	0x20000a84
 8003034:	20000a98 	.word	0x20000a98
 8003038:	0800d3e0 	.word	0x0800d3e0
 800303c:	20000ae8 	.word	0x20000ae8

08003040 <ESP8266_UpdateTcpInfo>:


void ESP8266_UpdateTcpInfo(char *new_address, uint16_t new_port)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b092      	sub	sp, #72	; 0x48
 8003044:	af02      	add	r7, sp, #8
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	807b      	strh	r3, [r7, #2]
	strcpy(net_info.address, new_address);
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	480d      	ldr	r0, [pc, #52]	; (8003084 <ESP8266_UpdateTcpInfo+0x44>)
 8003050:	f008 fc02 	bl	800b858 <strcpy>
	net_info.port = new_port;
 8003054:	4a0c      	ldr	r2, [pc, #48]	; (8003088 <ESP8266_UpdateTcpInfo+0x48>)
 8003056:	887b      	ldrh	r3, [r7, #2]
 8003058:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56

	char at_cipstart[CIPSTART_LENGTH];
	snprintf(at_cipstart, sizeof at_cipstart, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", new_address, new_port);
 800305c:	887b      	ldrh	r3, [r7, #2]
 800305e:	f107 000c 	add.w	r0, r7, #12
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a09      	ldr	r2, [pc, #36]	; (800308c <ESP8266_UpdateTcpInfo+0x4c>)
 8003068:	2132      	movs	r1, #50	; 0x32
 800306a:	f008 fbc1 	bl	800b7f0 <sniprintf>
	strcpy(esp.at_cipstart, at_cipstart);
 800306e:	f107 030c 	add.w	r3, r7, #12
 8003072:	4619      	mov	r1, r3
 8003074:	4806      	ldr	r0, [pc, #24]	; (8003090 <ESP8266_UpdateTcpInfo+0x50>)
 8003076:	f008 fbef 	bl	800b858 <strcpy>
}
 800307a:	bf00      	nop
 800307c:	3740      	adds	r7, #64	; 0x40
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	20000aca 	.word	0x20000aca
 8003088:	20000a84 	.word	0x20000a84
 800308c:	0800d3f8 	.word	0x0800d3f8
 8003090:	20000b42 	.word	0x20000b42

08003094 <ESP8266_Start>:


uint8_t ESP8266_Start()
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(esp.huart_device, (uint8_t*)&esp.current_rx_byte, 1); // Start Receiving
 8003098:	4b32      	ldr	r3, [pc, #200]	; (8003164 <ESP8266_Start+0xd0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2201      	movs	r2, #1
 800309e:	4932      	ldr	r1, [pc, #200]	; (8003168 <ESP8266_Start+0xd4>)
 80030a0:	4618      	mov	r0, r3
 80030a2:	f005 fc9f 	bl	80089e4 <HAL_UART_Receive_IT>
	_ESP8266_AnswerClear();
 80030a6:	f000 f8cd 	bl	8003244 <_ESP8266_AnswerClear>

	if (ESP8266_SendCmd(AT, OK) != AT_OK)
 80030aa:	4930      	ldr	r1, [pc, #192]	; (800316c <ESP8266_Start+0xd8>)
 80030ac:	4830      	ldr	r0, [pc, #192]	; (8003170 <ESP8266_Start+0xdc>)
 80030ae:	f000 f877 	bl	80031a0 <ESP8266_SendCmd>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d008      	beq.n	80030ca <ESP8266_Start+0x36>
		return _AT_CommandError(esp.huart_external, ESP_START_FAILURE, ERROR_MSG_AT);
 80030b8:	4b2a      	ldr	r3, [pc, #168]	; (8003164 <ESP8266_Start+0xd0>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	4a2d      	ldr	r2, [pc, #180]	; (8003174 <ESP8266_Start+0xe0>)
 80030be:	2101      	movs	r1, #1
 80030c0:	4618      	mov	r0, r3
 80030c2:	f000 f983 	bl	80033cc <_AT_CommandError>
 80030c6:	4603      	mov	r3, r0
 80030c8:	e04a      	b.n	8003160 <ESP8266_Start+0xcc>

	ESP8266_SendCmd(AT_RST, "ready");
 80030ca:	492b      	ldr	r1, [pc, #172]	; (8003178 <ESP8266_Start+0xe4>)
 80030cc:	482b      	ldr	r0, [pc, #172]	; (800317c <ESP8266_Start+0xe8>)
 80030ce:	f000 f867 	bl	80031a0 <ESP8266_SendCmd>

	if (ESP8266_SendCmd(ATE0, OK) != AT_OK)
 80030d2:	4926      	ldr	r1, [pc, #152]	; (800316c <ESP8266_Start+0xd8>)
 80030d4:	482a      	ldr	r0, [pc, #168]	; (8003180 <ESP8266_Start+0xec>)
 80030d6:	f000 f863 	bl	80031a0 <ESP8266_SendCmd>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <ESP8266_Start+0x5e>
		return _AT_CommandError(esp.huart_external, ESP_START_FAILURE, ERROR_MSG_ATE0);
 80030e0:	4b20      	ldr	r3, [pc, #128]	; (8003164 <ESP8266_Start+0xd0>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a27      	ldr	r2, [pc, #156]	; (8003184 <ESP8266_Start+0xf0>)
 80030e6:	2101      	movs	r1, #1
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 f96f 	bl	80033cc <_AT_CommandError>
 80030ee:	4603      	mov	r3, r0
 80030f0:	e036      	b.n	8003160 <ESP8266_Start+0xcc>

	if (ESP8266_SendCmd(AT_CIPMUX0, OK) != AT_OK)
 80030f2:	491e      	ldr	r1, [pc, #120]	; (800316c <ESP8266_Start+0xd8>)
 80030f4:	4824      	ldr	r0, [pc, #144]	; (8003188 <ESP8266_Start+0xf4>)
 80030f6:	f000 f853 	bl	80031a0 <ESP8266_SendCmd>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d008      	beq.n	8003112 <ESP8266_Start+0x7e>
		return _AT_CommandError(esp.huart_external, ESP_START_FAILURE, ERROR_MSG_CIPMUX0);
 8003100:	4b18      	ldr	r3, [pc, #96]	; (8003164 <ESP8266_Start+0xd0>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	4a21      	ldr	r2, [pc, #132]	; (800318c <ESP8266_Start+0xf8>)
 8003106:	2101      	movs	r1, #1
 8003108:	4618      	mov	r0, r3
 800310a:	f000 f95f 	bl	80033cc <_AT_CommandError>
 800310e:	4603      	mov	r3, r0
 8003110:	e026      	b.n	8003160 <ESP8266_Start+0xcc>

	if (ESP8266_SendCmd(AT_CIPMODE0, OK) != AT_OK)
 8003112:	4916      	ldr	r1, [pc, #88]	; (800316c <ESP8266_Start+0xd8>)
 8003114:	481e      	ldr	r0, [pc, #120]	; (8003190 <ESP8266_Start+0xfc>)
 8003116:	f000 f843 	bl	80031a0 <ESP8266_SendCmd>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d008      	beq.n	8003132 <ESP8266_Start+0x9e>
		return _AT_CommandError(esp.huart_external, ESP_START_FAILURE, ERROR_MSG_CIPMODE0);
 8003120:	4b10      	ldr	r3, [pc, #64]	; (8003164 <ESP8266_Start+0xd0>)
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	4a1b      	ldr	r2, [pc, #108]	; (8003194 <ESP8266_Start+0x100>)
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f000 f94f 	bl	80033cc <_AT_CommandError>
 800312e:	4603      	mov	r3, r0
 8003130:	e016      	b.n	8003160 <ESP8266_Start+0xcc>

	if (_ESP8266_CheckWifiConnection() != AT_OK)
 8003132:	f000 f929 	bl	8003388 <_ESP8266_CheckWifiConnection>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <ESP8266_Start+0xba>
		return _AT_CommandError(esp.huart_external, ESP_START_FAILURE, ERROR_MSG_WIFI);
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <ESP8266_Start+0xd0>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	4a15      	ldr	r2, [pc, #84]	; (8003198 <ESP8266_Start+0x104>)
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f000 f941 	bl	80033cc <_AT_CommandError>
 800314a:	4603      	mov	r3, r0
 800314c:	e008      	b.n	8003160 <ESP8266_Start+0xcc>

	HAL_UART_Transmit(esp.huart_external, (uint8_t*)ESP_MSG_START_SUCCESS, (uint16_t) strlen(ESP_MSG_START_SUCCESS), HAL_MAX_DELAY);
 800314e:	4b05      	ldr	r3, [pc, #20]	; (8003164 <ESP8266_Start+0xd0>)
 8003150:	6858      	ldr	r0, [r3, #4]
 8003152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003156:	221a      	movs	r2, #26
 8003158:	4910      	ldr	r1, [pc, #64]	; (800319c <ESP8266_Start+0x108>)
 800315a:	f005 fbaf 	bl	80088bc <HAL_UART_Transmit>
	return ESP_START_SUCCESS;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	bd80      	pop	{r7, pc}
 8003164:	20000ae0 	.word	0x20000ae0
 8003168:	20000b8d 	.word	0x20000b8d
 800316c:	0800d414 	.word	0x0800d414
 8003170:	0800d418 	.word	0x0800d418
 8003174:	0800d420 	.word	0x0800d420
 8003178:	0800d44c 	.word	0x0800d44c
 800317c:	0800d454 	.word	0x0800d454
 8003180:	0800d460 	.word	0x0800d460
 8003184:	0800d468 	.word	0x0800d468
 8003188:	0800d498 	.word	0x0800d498
 800318c:	0800d4a8 	.word	0x0800d4a8
 8003190:	0800d4e0 	.word	0x0800d4e0
 8003194:	0800d4f0 	.word	0x0800d4f0
 8003198:	0800d528 	.word	0x0800d528
 800319c:	0800d548 	.word	0x0800d548

080031a0 <ESP8266_SendCmd>:


uint8_t ESP8266_SendCmd(const char *cmd, const char *examcode)
{
 80031a0:	b590      	push	{r4, r7, lr}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(esp.huart_device, (uint8_t*)cmd, (uint16_t) strlen(cmd), HAL_MAX_DELAY);
 80031aa:	4b0d      	ldr	r3, [pc, #52]	; (80031e0 <ESP8266_SendCmd+0x40>)
 80031ac:	681c      	ldr	r4, [r3, #0]
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fd f816 	bl	80001e0 <strlen>
 80031b4:	4603      	mov	r3, r0
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031bc:	6879      	ldr	r1, [r7, #4]
 80031be:	4620      	mov	r0, r4
 80031c0:	f005 fb7c 	bl	80088bc <HAL_UART_Transmit>
	uint8_t at_state = _AT_CheckResponse(examcode, 5);
 80031c4:	2105      	movs	r1, #5
 80031c6:	6838      	ldr	r0, [r7, #0]
 80031c8:	f000 f80c 	bl	80031e4 <_AT_CheckResponse>
 80031cc:	4603      	mov	r3, r0
 80031ce:	73fb      	strb	r3, [r7, #15]
	_ESP8266_AnswerClear();
 80031d0:	f000 f838 	bl	8003244 <_ESP8266_AnswerClear>
	return at_state;
 80031d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd90      	pop	{r4, r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000ae0 	.word	0x20000ae0

080031e4 <_AT_CheckResponse>:


uint8_t _AT_CheckResponse(const char *expected_text, uint16_t delay_s)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	460b      	mov	r3, r1
 80031ee:	807b      	strh	r3, [r7, #2]
	uint8_t counter = 0;
 80031f0:	2300      	movs	r3, #0
 80031f2:	73fb      	strb	r3, [r7, #15]
	while (counter++ < delay_s) {
 80031f4:	e00c      	b.n	8003210 <_AT_CheckResponse+0x2c>
		if (strstr((char*)esp.answer, expected_text) != NULL)
 80031f6:	6879      	ldr	r1, [r7, #4]
 80031f8:	4810      	ldr	r0, [pc, #64]	; (800323c <_AT_CheckResponse+0x58>)
 80031fa:	f008 fb5e 	bl	800b8ba <strstr>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <_AT_CheckResponse+0x24>
			return AT_OK;
 8003204:	2300      	movs	r3, #0
 8003206:	e014      	b.n	8003232 <_AT_CheckResponse+0x4e>
		HAL_Delay(1000);
 8003208:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800320c:	f000 fe28 	bl	8003e60 <HAL_Delay>
	while (counter++ < delay_s) {
 8003210:	7bfb      	ldrb	r3, [r7, #15]
 8003212:	1c5a      	adds	r2, r3, #1
 8003214:	73fa      	strb	r2, [r7, #15]
 8003216:	b29b      	uxth	r3, r3
 8003218:	887a      	ldrh	r2, [r7, #2]
 800321a:	429a      	cmp	r2, r3
 800321c:	d8eb      	bhi.n	80031f6 <_AT_CheckResponse+0x12>
	}

	if (strstr((char*)esp.answer, ERROR) != NULL)
 800321e:	4908      	ldr	r1, [pc, #32]	; (8003240 <_AT_CheckResponse+0x5c>)
 8003220:	4806      	ldr	r0, [pc, #24]	; (800323c <_AT_CheckResponse+0x58>)
 8003222:	f008 fb4a 	bl	800b8ba <strstr>
 8003226:	4603      	mov	r3, r0
 8003228:	2b00      	cmp	r3, #0
 800322a:	d001      	beq.n	8003230 <_AT_CheckResponse+0x4c>
		return AT_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e000      	b.n	8003232 <_AT_CheckResponse+0x4e>
	return AT_TIMEOUT;
 8003230:	2302      	movs	r3, #2
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	20000b90 	.word	0x20000b90
 8003240:	0800d564 	.word	0x0800d564

08003244 <_ESP8266_AnswerClear>:


void _ESP8266_AnswerClear()
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
	memset(esp.answer, 0, sizeof esp.answer);
 8003248:	22fa      	movs	r2, #250	; 0xfa
 800324a:	2100      	movs	r1, #0
 800324c:	4804      	ldr	r0, [pc, #16]	; (8003260 <_ESP8266_AnswerClear+0x1c>)
 800324e:	f007 fdb2 	bl	800adb6 <memset>
	esp.answer_write_point = 0;
 8003252:	4b04      	ldr	r3, [pc, #16]	; (8003264 <_ESP8266_AnswerClear+0x20>)
 8003254:	2200      	movs	r2, #0
 8003256:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000b90 	.word	0x20000b90
 8003264:	20000ae0 	.word	0x20000ae0

08003268 <ESP8266_SendData>:


uint8_t ESP8266_SendData(const char *data)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b088      	sub	sp, #32
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
	if (_ESP8266_OpenTcpPort() != AT_OK)
 8003270:	f000 f852 	bl	8003318 <_ESP8266_OpenTcpPort>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d008      	beq.n	800328c <ESP8266_SendData+0x24>
		return _AT_CommandError(esp.huart_external, ESP_START_FAILURE, TCP_CONNECTION_FAILED);
 800327a:	4b21      	ldr	r3, [pc, #132]	; (8003300 <ESP8266_SendData+0x98>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4a21      	ldr	r2, [pc, #132]	; (8003304 <ESP8266_SendData+0x9c>)
 8003280:	2101      	movs	r1, #1
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f8a2 	bl	80033cc <_AT_CommandError>
 8003288:	4603      	mov	r3, r0
 800328a:	e034      	b.n	80032f6 <ESP8266_SendData+0x8e>

	uint8_t is_data_sent = DATA_NOT_SENT;
 800328c:	2301      	movs	r3, #1
 800328e:	77fb      	strb	r3, [r7, #31]
	uint16_t len = strlen(data);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f7fc ffa5 	bl	80001e0 <strlen>
 8003296:	4603      	mov	r3, r0
 8003298:	83bb      	strh	r3, [r7, #28]
	char msg[20] = {"\0"};
 800329a:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <ESP8266_SendData+0xa0>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	813b      	strh	r3, [r7, #8]
 80032a0:	f107 030a 	add.w	r3, r7, #10
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]
 80032a8:	605a      	str	r2, [r3, #4]
 80032aa:	609a      	str	r2, [r3, #8]
 80032ac:	60da      	str	r2, [r3, #12]
 80032ae:	821a      	strh	r2, [r3, #16]
	snprintf(msg, sizeof msg, "AT+CIPSEND=%d\r\n", len);
 80032b0:	8bbb      	ldrh	r3, [r7, #28]
 80032b2:	f107 0008 	add.w	r0, r7, #8
 80032b6:	4a15      	ldr	r2, [pc, #84]	; (800330c <ESP8266_SendData+0xa4>)
 80032b8:	2114      	movs	r1, #20
 80032ba:	f008 fa99 	bl	800b7f0 <sniprintf>

	if (ESP8266_SendCmd(msg, ">") == AT_OK) {
 80032be:	f107 0308 	add.w	r3, r7, #8
 80032c2:	4913      	ldr	r1, [pc, #76]	; (8003310 <ESP8266_SendData+0xa8>)
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff6b 	bl	80031a0 <ESP8266_SendCmd>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d111      	bne.n	80032f4 <ESP8266_SendData+0x8c>
		is_data_sent = DATA_SENT;
 80032d0:	2300      	movs	r3, #0
 80032d2:	77fb      	strb	r3, [r7, #31]
		HAL_UART_Transmit(esp.huart_device, (uint8_t*)data, len, HAL_MAX_DELAY);
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <ESP8266_SendData+0x98>)
 80032d6:	6818      	ldr	r0, [r3, #0]
 80032d8:	8bba      	ldrh	r2, [r7, #28]
 80032da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	f005 faec 	bl	80088bc <HAL_UART_Transmit>
		HAL_UART_Transmit(esp.huart_external, (uint8_t*)"Data sent\r\n", (uint16_t) strlen("Data sent\r\n"), HAL_MAX_DELAY);
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <ESP8266_SendData+0x98>)
 80032e6:	6858      	ldr	r0, [r3, #4]
 80032e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032ec:	220b      	movs	r2, #11
 80032ee:	4909      	ldr	r1, [pc, #36]	; (8003314 <ESP8266_SendData+0xac>)
 80032f0:	f005 fae4 	bl	80088bc <HAL_UART_Transmit>
	}

	return is_data_sent;
 80032f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3720      	adds	r7, #32
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	20000ae0 	.word	0x20000ae0
 8003304:	0800d56c 	.word	0x0800d56c
 8003308:	0800d5ac 	.word	0x0800d5ac
 800330c:	0800d58c 	.word	0x0800d58c
 8003310:	0800d59c 	.word	0x0800d59c
 8003314:	0800d5a0 	.word	0x0800d5a0

08003318 <_ESP8266_OpenTcpPort>:


uint8_t _ESP8266_OpenTcpPort()
{
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
	if (_ESP8266_CheckWifiConnection() != AT_OK)
 800331c:	f000 f834 	bl	8003388 <_ESP8266_CheckWifiConnection>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d008      	beq.n	8003338 <_ESP8266_OpenTcpPort+0x20>
		return _AT_CommandError(esp.huart_external, ESP_START_FAILURE, ERROR_MSG_WIFI);
 8003326:	4b11      	ldr	r3, [pc, #68]	; (800336c <_ESP8266_OpenTcpPort+0x54>)
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	4a11      	ldr	r2, [pc, #68]	; (8003370 <_ESP8266_OpenTcpPort+0x58>)
 800332c:	2101      	movs	r1, #1
 800332e:	4618      	mov	r0, r3
 8003330:	f000 f84c 	bl	80033cc <_AT_CommandError>
 8003334:	4603      	mov	r3, r0
 8003336:	e017      	b.n	8003368 <_ESP8266_OpenTcpPort+0x50>

	if (ESP8266_SendCmd(AT_CIPSTATUS, "4") == AT_OK ||
 8003338:	490e      	ldr	r1, [pc, #56]	; (8003374 <_ESP8266_OpenTcpPort+0x5c>)
 800333a:	480f      	ldr	r0, [pc, #60]	; (8003378 <_ESP8266_OpenTcpPort+0x60>)
 800333c:	f7ff ff30 	bl	80031a0 <ESP8266_SendCmd>
 8003340:	4603      	mov	r3, r0
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <_ESP8266_OpenTcpPort+0x3c>
		ESP8266_SendCmd(AT_CIPSTATUS, "2") == AT_OK) {
 8003346:	490d      	ldr	r1, [pc, #52]	; (800337c <_ESP8266_OpenTcpPort+0x64>)
 8003348:	480b      	ldr	r0, [pc, #44]	; (8003378 <_ESP8266_OpenTcpPort+0x60>)
 800334a:	f7ff ff29 	bl	80031a0 <ESP8266_SendCmd>
 800334e:	4603      	mov	r3, r0
	if (ESP8266_SendCmd(AT_CIPSTATUS, "4") == AT_OK ||
 8003350:	2b00      	cmp	r3, #0
 8003352:	d108      	bne.n	8003366 <_ESP8266_OpenTcpPort+0x4e>
		if (ESP8266_SendCmd(esp.at_cipstart, "OK") != AT_OK)
 8003354:	490a      	ldr	r1, [pc, #40]	; (8003380 <_ESP8266_OpenTcpPort+0x68>)
 8003356:	480b      	ldr	r0, [pc, #44]	; (8003384 <_ESP8266_OpenTcpPort+0x6c>)
 8003358:	f7ff ff22 	bl	80031a0 <ESP8266_SendCmd>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <_ESP8266_OpenTcpPort+0x4e>
			return AT_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <_ESP8266_OpenTcpPort+0x50>
	}

	return AT_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20000ae0 	.word	0x20000ae0
 8003370:	0800d528 	.word	0x0800d528
 8003374:	0800d5c0 	.word	0x0800d5c0
 8003378:	0800d5c4 	.word	0x0800d5c4
 800337c:	0800d5d4 	.word	0x0800d5d4
 8003380:	0800d414 	.word	0x0800d414
 8003384:	20000b42 	.word	0x20000b42

08003388 <_ESP8266_CheckWifiConnection>:


uint8_t _ESP8266_CheckWifiConnection()
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
	if (ESP8266_SendCmd(AT_IS_CONNECTED, net_info.ssid) != AT_OK) {
 800338c:	490b      	ldr	r1, [pc, #44]	; (80033bc <_ESP8266_CheckWifiConnection+0x34>)
 800338e:	480c      	ldr	r0, [pc, #48]	; (80033c0 <_ESP8266_CheckWifiConnection+0x38>)
 8003390:	f7ff ff06 	bl	80031a0 <ESP8266_SendCmd>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00d      	beq.n	80033b6 <_ESP8266_CheckWifiConnection+0x2e>
		if (ESP8266_SendCmd(esp.at_cwjap, "WIFI GOT IP") != AT_OK) {
 800339a:	490a      	ldr	r1, [pc, #40]	; (80033c4 <_ESP8266_CheckWifiConnection+0x3c>)
 800339c:	480a      	ldr	r0, [pc, #40]	; (80033c8 <_ESP8266_CheckWifiConnection+0x40>)
 800339e:	f7ff feff 	bl	80031a0 <ESP8266_SendCmd>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d006      	beq.n	80033b6 <_ESP8266_CheckWifiConnection+0x2e>
			if (ESP8266_Start() != ESP_START_SUCCESS)
 80033a8:	f7ff fe74 	bl	8003094 <ESP8266_Start>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <_ESP8266_CheckWifiConnection+0x2e>
				return AT_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e000      	b.n	80033b8 <_ESP8266_CheckWifiConnection+0x30>
		}
	}
	return AT_OK;
 80033b6:	2300      	movs	r3, #0
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000a84 	.word	0x20000a84
 80033c0:	0800d5d8 	.word	0x0800d5d8
 80033c4:	0800d5e4 	.word	0x0800d5e4
 80033c8:	20000ae8 	.word	0x20000ae8

080033cc <_AT_CommandError>:


uint8_t _AT_CommandError(UART_HandleTypeDef *huart, uint8_t error_val, char *message)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	60f8      	str	r0, [r7, #12]
 80033d4:	460b      	mov	r3, r1
 80033d6:	607a      	str	r2, [r7, #4]
 80033d8:	72fb      	strb	r3, [r7, #11]
	HAL_UART_Transmit(huart, (uint8_t*)message, (uint16_t) strlen(message), HAL_MAX_DELAY);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fc ff00 	bl	80001e0 <strlen>
 80033e0:	4603      	mov	r3, r0
 80033e2:	b29a      	uxth	r2, r3
 80033e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f005 fa66 	bl	80088bc <HAL_UART_Transmit>
	return error_val;
 80033f0:	7afb      	ldrb	r3, [r7, #11]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
	...

080033fc <ESP8266_ReceiveAnswer>:


void ESP8266_ReceiveAnswer()
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
	esp.answer[esp.answer_write_point] = esp.current_rx_byte;
 8003400:	4b16      	ldr	r3, [pc, #88]	; (800345c <ESP8266_ReceiveAnswer+0x60>)
 8003402:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8003406:	4619      	mov	r1, r3
 8003408:	4b14      	ldr	r3, [pc, #80]	; (800345c <ESP8266_ReceiveAnswer+0x60>)
 800340a:	f893 20ad 	ldrb.w	r2, [r3, #173]	; 0xad
 800340e:	4b13      	ldr	r3, [pc, #76]	; (800345c <ESP8266_ReceiveAnswer+0x60>)
 8003410:	440b      	add	r3, r1
 8003412:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	if (esp.answer_write_point < MAX_ANSWER_LENGTH - 1)
 8003416:	4b11      	ldr	r3, [pc, #68]	; (800345c <ESP8266_ReceiveAnswer+0x60>)
 8003418:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 800341c:	2bf8      	cmp	r3, #248	; 0xf8
 800341e:	d808      	bhi.n	8003432 <ESP8266_ReceiveAnswer+0x36>
		esp.answer_write_point++;
 8003420:	4b0e      	ldr	r3, [pc, #56]	; (800345c <ESP8266_ReceiveAnswer+0x60>)
 8003422:	f893 30af 	ldrb.w	r3, [r3, #175]	; 0xaf
 8003426:	3301      	adds	r3, #1
 8003428:	b2da      	uxtb	r2, r3
 800342a:	4b0c      	ldr	r3, [pc, #48]	; (800345c <ESP8266_ReceiveAnswer+0x60>)
 800342c:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf
 8003430:	e003      	b.n	800343a <ESP8266_ReceiveAnswer+0x3e>
	else
		esp.answer_write_point = 0;
 8003432:	4b0a      	ldr	r3, [pc, #40]	; (800345c <ESP8266_ReceiveAnswer+0x60>)
 8003434:	2200      	movs	r2, #0
 8003436:	f883 20af 	strb.w	r2, [r3, #175]	; 0xaf

	esp.counter_total_bytes_read++;
 800343a:	4b08      	ldr	r3, [pc, #32]	; (800345c <ESP8266_ReceiveAnswer+0x60>)
 800343c:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
 8003440:	3301      	adds	r3, #1
 8003442:	b2da      	uxtb	r2, r3
 8003444:	4b05      	ldr	r3, [pc, #20]	; (800345c <ESP8266_ReceiveAnswer+0x60>)
 8003446:	f883 20ae 	strb.w	r2, [r3, #174]	; 0xae
	HAL_UART_Receive_IT(esp.huart_device, (uint8_t*)&esp.current_rx_byte, 1);
 800344a:	4b04      	ldr	r3, [pc, #16]	; (800345c <ESP8266_ReceiveAnswer+0x60>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2201      	movs	r2, #1
 8003450:	4903      	ldr	r1, [pc, #12]	; (8003460 <ESP8266_ReceiveAnswer+0x64>)
 8003452:	4618      	mov	r0, r3
 8003454:	f005 fac6 	bl	80089e4 <HAL_UART_Receive_IT>
}
 8003458:	bf00      	nop
 800345a:	bd80      	pop	{r7, pc}
 800345c:	20000ae0 	.word	0x20000ae0
 8003460:	20000b8d 	.word	0x20000b8d

08003464 <NetworkInfo_Update>:

void NetworkInfo_Update(char *ssid, char *password, char *address, uint16_t port, ConnectionType type)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	807b      	strh	r3, [r7, #2]
	if (ssid) {
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <NetworkInfo_Update+0x1c>
		strcpy(net_info.ssid, ssid);
 8003478:	68f9      	ldr	r1, [r7, #12]
 800347a:	4814      	ldr	r0, [pc, #80]	; (80034cc <NetworkInfo_Update+0x68>)
 800347c:	f008 f9ec 	bl	800b858 <strcpy>
	}

	if (password) {
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <NetworkInfo_Update+0x2a>
		strcpy(net_info.password, password);
 8003486:	68b9      	ldr	r1, [r7, #8]
 8003488:	4811      	ldr	r0, [pc, #68]	; (80034d0 <NetworkInfo_Update+0x6c>)
 800348a:	f008 f9e5 	bl	800b858 <strcpy>
	}

	if (address) {
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <NetworkInfo_Update+0x38>
		strcpy(net_info.address, address);
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	480f      	ldr	r0, [pc, #60]	; (80034d4 <NetworkInfo_Update+0x70>)
 8003498:	f008 f9de 	bl	800b858 <strcpy>
	}

	if (port) {
 800349c:	887b      	ldrh	r3, [r7, #2]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <NetworkInfo_Update+0x46>
		net_info.port = port;
 80034a2:	4a0a      	ldr	r2, [pc, #40]	; (80034cc <NetworkInfo_Update+0x68>)
 80034a4:	887b      	ldrh	r3, [r7, #2]
 80034a6:	f8a2 3056 	strh.w	r3, [r2, #86]	; 0x56
	}

	if (type) {
 80034aa:	7e3b      	ldrb	r3, [r7, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d008      	beq.n	80034c2 <NetworkInfo_Update+0x5e>
		strcpy(net_info.connection_type, _connection_type_to_string(type));
 80034b0:	7e3b      	ldrb	r3, [r7, #24]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 f812 	bl	80034dc <_connection_type_to_string>
 80034b8:	4603      	mov	r3, r0
 80034ba:	4619      	mov	r1, r3
 80034bc:	4806      	ldr	r0, [pc, #24]	; (80034d8 <NetworkInfo_Update+0x74>)
 80034be:	f008 f9cb 	bl	800b858 <strcpy>
	}
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000a84 	.word	0x20000a84
 80034d0:	20000a98 	.word	0x20000a98
 80034d4:	20000aca 	.word	0x20000aca
 80034d8:	20000adc 	.word	0x20000adc

080034dc <_connection_type_to_string>:


char *_connection_type_to_string(ConnectionType type)
{
 80034dc:	b480      	push	{r7}
 80034de:	b083      	sub	sp, #12
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	4603      	mov	r3, r0
 80034e4:	71fb      	strb	r3, [r7, #7]
	switch (type) {
 80034e6:	79fb      	ldrb	r3, [r7, #7]
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d002      	beq.n	80034f2 <_connection_type_to_string+0x16>
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d002      	beq.n	80034f6 <_connection_type_to_string+0x1a>
 80034f0:	e003      	b.n	80034fa <_connection_type_to_string+0x1e>
	case TCP:
		return "TCP";
 80034f2:	4b05      	ldr	r3, [pc, #20]	; (8003508 <_connection_type_to_string+0x2c>)
 80034f4:	e002      	b.n	80034fc <_connection_type_to_string+0x20>
	case UDP:
		return "UDP";
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <_connection_type_to_string+0x30>)
 80034f8:	e000      	b.n	80034fc <_connection_type_to_string+0x20>
	default:
		return "N/A";
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <_connection_type_to_string+0x34>)
	}
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	0800d5f0 	.word	0x0800d5f0
 800350c:	0800d5f4 	.word	0x0800d5f4
 8003510:	0800d5f8 	.word	0x0800d5f8

08003514 <ESP8266_GetHost>:


char *ESP8266_GetHost()
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
	return esp.host;
 8003518:	4b02      	ldr	r3, [pc, #8]	; (8003524 <ESP8266_GetHost+0x10>)
}
 800351a:	4618      	mov	r0, r3
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	20000b74 	.word	0x20000b74

08003528 <FC37_Init>:
#include "fc37.h"

FC37_t fc37;

void FC37_Init()
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
	fc37.rain_intensity = RAIN_INTENSITY_NONE;
 800352c:	4b05      	ldr	r3, [pc, #20]	; (8003544 <FC37_Init+0x1c>)
 800352e:	2200      	movs	r2, #0
 8003530:	701a      	strb	r2, [r3, #0]
	fc37.raw_value = 0;
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <FC37_Init+0x1c>)
 8003534:	2200      	movs	r2, #0
 8003536:	805a      	strh	r2, [r3, #2]
}
 8003538:	bf00      	nop
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	20000c8c 	.word	0x20000c8c

08003548 <FC37_Sample>:


void FC37_Sample()
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
	if (fc37.raw_value > THRESHOLD_RAIN_LIGHT)
 800354c:	4b12      	ldr	r3, [pc, #72]	; (8003598 <FC37_Sample+0x50>)
 800354e:	885b      	ldrh	r3, [r3, #2]
 8003550:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8003554:	4293      	cmp	r3, r2
 8003556:	d903      	bls.n	8003560 <FC37_Sample+0x18>
		fc37.rain_intensity = RAIN_INTENSITY_NONE;
 8003558:	4b0f      	ldr	r3, [pc, #60]	; (8003598 <FC37_Sample+0x50>)
 800355a:	2200      	movs	r2, #0
 800355c:	701a      	strb	r2, [r3, #0]
		fc37.rain_intensity = RAIN_INTENSITY_LIGHT;
	else if (fc37.raw_value > THRESHOLD_RAIN_MODERATE)
		fc37.rain_intensity = RAIN_INTENSITY_MODERATE;
	else
		fc37.rain_intensity = RAIN_INTENSITY_HEAVY;
}
 800355e:	e016      	b.n	800358e <FC37_Sample+0x46>
	else if (fc37.raw_value > THRESHOLD_RAIN_MODERATE)
 8003560:	4b0d      	ldr	r3, [pc, #52]	; (8003598 <FC37_Sample+0x50>)
 8003562:	885b      	ldrh	r3, [r3, #2]
 8003564:	f240 62d6 	movw	r2, #1750	; 0x6d6
 8003568:	4293      	cmp	r3, r2
 800356a:	d903      	bls.n	8003574 <FC37_Sample+0x2c>
		fc37.rain_intensity = RAIN_INTENSITY_LIGHT;
 800356c:	4b0a      	ldr	r3, [pc, #40]	; (8003598 <FC37_Sample+0x50>)
 800356e:	2201      	movs	r2, #1
 8003570:	701a      	strb	r2, [r3, #0]
}
 8003572:	e00c      	b.n	800358e <FC37_Sample+0x46>
	else if (fc37.raw_value > THRESHOLD_RAIN_MODERATE)
 8003574:	4b08      	ldr	r3, [pc, #32]	; (8003598 <FC37_Sample+0x50>)
 8003576:	885b      	ldrh	r3, [r3, #2]
 8003578:	f240 62d6 	movw	r2, #1750	; 0x6d6
 800357c:	4293      	cmp	r3, r2
 800357e:	d903      	bls.n	8003588 <FC37_Sample+0x40>
		fc37.rain_intensity = RAIN_INTENSITY_MODERATE;
 8003580:	4b05      	ldr	r3, [pc, #20]	; (8003598 <FC37_Sample+0x50>)
 8003582:	2202      	movs	r2, #2
 8003584:	701a      	strb	r2, [r3, #0]
}
 8003586:	e002      	b.n	800358e <FC37_Sample+0x46>
		fc37.rain_intensity = RAIN_INTENSITY_HEAVY;
 8003588:	4b03      	ldr	r3, [pc, #12]	; (8003598 <FC37_Sample+0x50>)
 800358a:	2203      	movs	r2, #3
 800358c:	701a      	strb	r2, [r3, #0]
}
 800358e:	bf00      	nop
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	20000c8c 	.word	0x20000c8c

0800359c <FC37_ToJson_Partial>:


void FC37_ToJson_Partial(char *buffer)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
	memset(buffer, 0, FC37_JSON_LENGTH);
 80035a4:	221e      	movs	r2, #30
 80035a6:	2100      	movs	r1, #0
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f007 fc04 	bl	800adb6 <memset>
	snprintf(buffer, FC37_JSON_LENGTH, "\"FC37\":{\"rain\":\"%c\"}", _tochar_rain_intensity(fc37.rain_intensity));
 80035ae:	4b07      	ldr	r3, [pc, #28]	; (80035cc <FC37_ToJson_Partial+0x30>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f000 f80e 	bl	80035d4 <_tochar_rain_intensity>
 80035b8:	4603      	mov	r3, r0
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <FC37_ToJson_Partial+0x34>)
 80035bc:	211e      	movs	r1, #30
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f008 f916 	bl	800b7f0 <sniprintf>
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	20000c8c 	.word	0x20000c8c
 80035d0:	0800d5fc 	.word	0x0800d5fc

080035d4 <_tochar_rain_intensity>:


char _tochar_rain_intensity(uint8_t intensity)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	4603      	mov	r3, r0
 80035dc:	71fb      	strb	r3, [r7, #7]
	switch (intensity) {
 80035de:	79fb      	ldrb	r3, [r7, #7]
 80035e0:	2b03      	cmp	r3, #3
 80035e2:	d813      	bhi.n	800360c <_tochar_rain_intensity+0x38>
 80035e4:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <_tochar_rain_intensity+0x18>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	080035fd 	.word	0x080035fd
 80035f0:	08003601 	.word	0x08003601
 80035f4:	08003605 	.word	0x08003605
 80035f8:	08003609 	.word	0x08003609
	case RAIN_INTENSITY_NONE:
		return RAIN_NONE_MESSAGE;
 80035fc:	234e      	movs	r3, #78	; 0x4e
 80035fe:	e006      	b.n	800360e <_tochar_rain_intensity+0x3a>
	case RAIN_INTENSITY_LIGHT:
		return RAIN_LIGHT_MESSAGE;
 8003600:	234c      	movs	r3, #76	; 0x4c
 8003602:	e004      	b.n	800360e <_tochar_rain_intensity+0x3a>
	case RAIN_INTENSITY_MODERATE:
		return RAIN_MODERATE_MESSAGE;
 8003604:	234d      	movs	r3, #77	; 0x4d
 8003606:	e002      	b.n	800360e <_tochar_rain_intensity+0x3a>
	case RAIN_INTENSITY_HEAVY:
		return RAIN_HEAVY_MESSAGE;
 8003608:	2348      	movs	r3, #72	; 0x48
 800360a:	e000      	b.n	800360e <_tochar_rain_intensity+0x3a>
	default:
		return RAIN_NONE_MESSAGE;
 800360c:	234e      	movs	r3, #78	; 0x4e
	}
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop

0800361c <FC37_SetRawValue>:


void FC37_SetRawValue(uint16_t raw_value)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	80fb      	strh	r3, [r7, #6]
	fc37.raw_value = raw_value;
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <FC37_SetRawValue+0x1c>)
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	8053      	strh	r3, [r2, #2]
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	20000c8c 	.word	0x20000c8c

0800363c <TEMT600_Init>:
#include "temt600.h"

TEMT600_t temt600;

void TEMT600_Init()
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
	temt600.percentage_brightness = 0.0;
 8003640:	4b07      	ldr	r3, [pc, #28]	; (8003660 <TEMT600_Init+0x24>)
 8003642:	f04f 0200 	mov.w	r2, #0
 8003646:	601a      	str	r2, [r3, #0]
	temt600.lux = 0.0;
 8003648:	4b05      	ldr	r3, [pc, #20]	; (8003660 <TEMT600_Init+0x24>)
 800364a:	2200      	movs	r2, #0
 800364c:	809a      	strh	r2, [r3, #4]
	temt600.raw_value = 0.0;
 800364e:	4b04      	ldr	r3, [pc, #16]	; (8003660 <TEMT600_Init+0x24>)
 8003650:	2200      	movs	r2, #0
 8003652:	80da      	strh	r2, [r3, #6]
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	20000c90 	.word	0x20000c90
 8003664:	00000000 	.word	0x00000000

08003668 <TEMT600_Sample>:

void TEMT600_Sample()
{
 8003668:	b598      	push	{r3, r4, r7, lr}
 800366a:	af00      	add	r7, sp, #0
	temt600.percentage_brightness = (temt600.raw_value/TEMT600_RESOLUTION)*100;
 800366c:	4b2a      	ldr	r3, [pc, #168]	; (8003718 <TEMT600_Sample+0xb0>)
 800366e:	88db      	ldrh	r3, [r3, #6]
 8003670:	4618      	mov	r0, r3
 8003672:	f7fc ff5f 	bl	8000534 <__aeabi_i2d>
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	4b28      	ldr	r3, [pc, #160]	; (800371c <TEMT600_Sample+0xb4>)
 800367c:	f7fd f8ee 	bl	800085c <__aeabi_ddiv>
 8003680:	4603      	mov	r3, r0
 8003682:	460c      	mov	r4, r1
 8003684:	4618      	mov	r0, r3
 8003686:	4621      	mov	r1, r4
 8003688:	f04f 0200 	mov.w	r2, #0
 800368c:	4b24      	ldr	r3, [pc, #144]	; (8003720 <TEMT600_Sample+0xb8>)
 800368e:	f7fc ffbb 	bl	8000608 <__aeabi_dmul>
 8003692:	4603      	mov	r3, r0
 8003694:	460c      	mov	r4, r1
 8003696:	4618      	mov	r0, r3
 8003698:	4621      	mov	r1, r4
 800369a:	f7fd faad 	bl	8000bf8 <__aeabi_d2f>
 800369e:	4602      	mov	r2, r0
 80036a0:	4b1d      	ldr	r3, [pc, #116]	; (8003718 <TEMT600_Sample+0xb0>)
 80036a2:	601a      	str	r2, [r3, #0]
	temt600.lux = (TEMT600_CURRENT(temt600.raw_value)/TEMT600_RESISTANCE_OHMS)*CURRENT_uA_ONE_LUX;
 80036a4:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <TEMT600_Sample+0xb0>)
 80036a6:	88db      	ldrh	r3, [r3, #6]
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7fc ff43 	bl	8000534 <__aeabi_i2d>
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	4b1a      	ldr	r3, [pc, #104]	; (800371c <TEMT600_Sample+0xb4>)
 80036b4:	f7fd f8d2 	bl	800085c <__aeabi_ddiv>
 80036b8:	4603      	mov	r3, r0
 80036ba:	460c      	mov	r4, r1
 80036bc:	4618      	mov	r0, r3
 80036be:	4621      	mov	r1, r4
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	4b17      	ldr	r3, [pc, #92]	; (8003724 <TEMT600_Sample+0xbc>)
 80036c6:	f7fc ff9f 	bl	8000608 <__aeabi_dmul>
 80036ca:	4603      	mov	r3, r0
 80036cc:	460c      	mov	r4, r1
 80036ce:	4618      	mov	r0, r3
 80036d0:	4621      	mov	r1, r4
 80036d2:	a30d      	add	r3, pc, #52	; (adr r3, 8003708 <TEMT600_Sample+0xa0>)
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f7fd f8c0 	bl	800085c <__aeabi_ddiv>
 80036dc:	4603      	mov	r3, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	4618      	mov	r0, r3
 80036e2:	4621      	mov	r1, r4
 80036e4:	a30a      	add	r3, pc, #40	; (adr r3, 8003710 <TEMT600_Sample+0xa8>)
 80036e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ea:	f7fc ff8d 	bl	8000608 <__aeabi_dmul>
 80036ee:	4603      	mov	r3, r0
 80036f0:	460c      	mov	r4, r1
 80036f2:	4618      	mov	r0, r3
 80036f4:	4621      	mov	r1, r4
 80036f6:	f7fd fa5f 	bl	8000bb8 <__aeabi_d2uiz>
 80036fa:	4603      	mov	r3, r0
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	4b06      	ldr	r3, [pc, #24]	; (8003718 <TEMT600_Sample+0xb0>)
 8003700:	809a      	strh	r2, [r3, #4]
}
 8003702:	bf00      	nop
 8003704:	bd98      	pop	{r3, r4, r7, pc}
 8003706:	bf00      	nop
 8003708:	00000000 	.word	0x00000000
 800370c:	40c38800 	.word	0x40c38800
 8003710:	00000000 	.word	0x00000000
 8003714:	413e8480 	.word	0x413e8480
 8003718:	20000c90 	.word	0x20000c90
 800371c:	40b00000 	.word	0x40b00000
 8003720:	40590000 	.word	0x40590000
 8003724:	40140000 	.word	0x40140000

08003728 <TEMT600_ToJson_Partial>:


void TEMT600_ToJson_Partial(char *buffer)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
	memset(buffer, 0, TEMT600_JSON_LENGTH);
 8003730:	2219      	movs	r2, #25
 8003732:	2100      	movs	r1, #0
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f007 fb3e 	bl	800adb6 <memset>
	snprintf(buffer, TEMT600_JSON_LENGTH, "\"TEMT6000\":{\"lux\":%hu}", temt600.lux);
 800373a:	4b05      	ldr	r3, [pc, #20]	; (8003750 <TEMT600_ToJson_Partial+0x28>)
 800373c:	889b      	ldrh	r3, [r3, #4]
 800373e:	4a05      	ldr	r2, [pc, #20]	; (8003754 <TEMT600_ToJson_Partial+0x2c>)
 8003740:	2119      	movs	r1, #25
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f008 f854 	bl	800b7f0 <sniprintf>
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20000c90 	.word	0x20000c90
 8003754:	0800d614 	.word	0x0800d614

08003758 <TEMT600_SetRawValue>:

void TEMT600_SetRawValue(uint16_t raw_value)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	4603      	mov	r3, r0
 8003760:	80fb      	strh	r3, [r7, #6]
	temt600.raw_value = raw_value;
 8003762:	4a04      	ldr	r2, [pc, #16]	; (8003774 <TEMT600_SetRawValue+0x1c>)
 8003764:	88fb      	ldrh	r3, [r7, #6]
 8003766:	80d3      	strh	r3, [r2, #6]
}
 8003768:	bf00      	nop
 800376a:	370c      	adds	r7, #12
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	20000c90 	.word	0x20000c90

08003778 <GPIO_SetOutput>:
#include "gpio_ext.h"


void GPIO_SetOutput(GPIO_TypeDef *port, uint16_t pin)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b088      	sub	sp, #32
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
 8003780:	460b      	mov	r3, r1
 8003782:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	f107 030c 	add.w	r3, r7, #12
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = pin;
 8003794:	887b      	ldrh	r3, [r7, #2]
 8003796:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003798:	2301      	movs	r3, #1
 800379a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 800379c:	f107 030c 	add.w	r3, r7, #12
 80037a0:	4619      	mov	r1, r3
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f001 fea2 	bl	80054ec <HAL_GPIO_Init>
}
 80037a8:	bf00      	nop
 80037aa:	3720      	adds	r7, #32
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}

080037b0 <GPIO_SetInput>:


void GPIO_SetInput(GPIO_TypeDef *port, uint16_t pin)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	460b      	mov	r3, r1
 80037ba:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037bc:	f107 030c 	add.w	r3, r7, #12
 80037c0:	2200      	movs	r2, #0
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	605a      	str	r2, [r3, #4]
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	60da      	str	r2, [r3, #12]
 80037ca:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = pin;
 80037cc:	887b      	ldrh	r3, [r7, #2]
 80037ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80037d0:	2300      	movs	r3, #0
 80037d2:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(port, &GPIO_InitStruct);
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	4619      	mov	r1, r3
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f001 fe86 	bl	80054ec <HAL_GPIO_Init>
}
 80037e0:	bf00      	nop
 80037e2:	3720      	adds	r7, #32
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <OneWire_BusInputDirection>:

//
//	Bus direction control
//
void OneWire_BusInputDirection(OneWire_t *onewire)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT; // Set as input
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 80037f8:	2301      	movs	r3, #1
 80037fa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	889b      	ldrh	r3, [r3, #4]
 8003800:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f107 020c 	add.w	r2, r7, #12
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f001 fe6d 	bl	80054ec <HAL_GPIO_Init>
}	
 8003812:	bf00      	nop
 8003814:	3720      	adds	r7, #32
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}

0800381a <OneWire_BusOutputDirection>:

void OneWire_BusOutputDirection(OneWire_t *onewire)
{
 800381a:	b580      	push	{r7, lr}
 800381c:	b088      	sub	sp, #32
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	GPIO_InitStruct;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; // Set as open-drain output
 8003822:	2311      	movs	r3, #17
 8003824:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL; // No pullup - the pullup resistor is external
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM; // Medium GPIO frequency
 800382a:	2301      	movs	r3, #1
 800382c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pin = onewire->GPIO_Pin; // Pin for 1-Wire bus
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	889b      	ldrh	r3, [r3, #4]
 8003832:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(onewire->GPIOx, &GPIO_InitStruct); // Reinitialize
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f107 020c 	add.w	r2, r7, #12
 800383c:	4611      	mov	r1, r2
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fe54 	bl	80054ec <HAL_GPIO_Init>
}
 8003844:	bf00      	nop
 8003846:	3720      	adds	r7, #32
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <OneWire_OutputLow>:

//
//	Bus pin output state control
//
void OneWire_OutputLow(OneWire_t *onewire)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin<<16; // Reset the 1-Wire pin
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	889b      	ldrh	r3, [r3, #4]
 8003858:	041a      	lsls	r2, r3, #16
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	619a      	str	r2, [r3, #24]
}	
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <OneWire_OutputHigh>:

void OneWire_OutputHigh(OneWire_t *onewire)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	onewire->GPIOx->BSRR = onewire->GPIO_Pin; // Set the 1-Wire pin
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	889a      	ldrh	r2, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	619a      	str	r2, [r3, #24]
}
 800387e:	bf00      	nop
 8003880:	370c      	adds	r7, #12
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <OneWire_Reset>:
//	Returns:
//	0 - Reset ok
//	1 - Error
//
uint8_t OneWire_Reset(OneWire_t* onewire)
{
 800388a:	b580      	push	{r7, lr}
 800388c:	b084      	sub	sp, #16
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	OneWire_OutputLow(onewire);  // Write bus output low
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ffda 	bl	800384c <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7ff ffbe 	bl	800381a <OneWire_BusOutputDirection>
	DWT_DelayUs(480); // Wait 480 us for reset
 800389e:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80038a2:	f000 fa5b 	bl	8003d5c <DWT_DelayUs>

	OneWire_BusInputDirection(onewire); // Release the bus by switching to input
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ff9e 	bl	80037e8 <OneWire_BusInputDirection>
	DWT_DelayUs(70);
 80038ac:	2046      	movs	r0, #70	; 0x46
 80038ae:	f000 fa55 	bl	8003d5c <DWT_DelayUs>
	
	i = HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin); // Check if bus is low
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	889b      	ldrh	r3, [r3, #4]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4610      	mov	r0, r2
 80038be:	f001 ff9f 	bl	8005800 <HAL_GPIO_ReadPin>
 80038c2:	4603      	mov	r3, r0
 80038c4:	73fb      	strb	r3, [r7, #15]
															 // if it's high - no device is presence on the bus
	DWT_DelayUs(410);
 80038c6:	f44f 70cd 	mov.w	r0, #410	; 0x19a
 80038ca:	f000 fa47 	bl	8003d5c <DWT_DelayUs>

	return i;
 80038ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3710      	adds	r7, #16
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <OneWire_WriteBit>:

//
//	Writing/Reading operations
//
void OneWire_WriteBit(OneWire_t* onewire, uint8_t bit)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	460b      	mov	r3, r1
 80038e2:	70fb      	strb	r3, [r7, #3]
	if (bit) // Send '1',
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d012      	beq.n	8003910 <OneWire_WriteBit+0x38>
	{
		OneWire_OutputLow(onewire);	// Set the bus low
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7ff ffae 	bl	800384c <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff92 	bl	800381a <OneWire_BusOutputDirection>
		DWT_DelayUs(6);
 80038f6:	2006      	movs	r0, #6
 80038f8:	f000 fa30 	bl	8003d5c <DWT_DelayUs>
		
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff73 	bl	80037e8 <OneWire_BusInputDirection>
		
		DWT_DelayUs(64);
 8003902:	2040      	movs	r0, #64	; 0x40
 8003904:	f000 fa2a 	bl	8003d5c <DWT_DelayUs>
		OneWire_BusInputDirection(onewire); //Release bus
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f7ff ff6d 	bl	80037e8 <OneWire_BusInputDirection>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
		
		DWT_DelayUs(10);
		OneWire_BusInputDirection(onewire); // Release bus
	}
}
 800390e:	e011      	b.n	8003934 <OneWire_WriteBit+0x5c>
		OneWire_OutputLow(onewire); // Set the bus low
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff ff9b 	bl	800384c <OneWire_OutputLow>
		OneWire_BusOutputDirection(onewire);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f7ff ff7f 	bl	800381a <OneWire_BusOutputDirection>
		DWT_DelayUs(60);
 800391c:	203c      	movs	r0, #60	; 0x3c
 800391e:	f000 fa1d 	bl	8003d5c <DWT_DelayUs>
		OneWire_BusInputDirection(onewire); // Release bus - bit high by pullup
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7ff ff60 	bl	80037e8 <OneWire_BusInputDirection>
		DWT_DelayUs(10);
 8003928:	200a      	movs	r0, #10
 800392a:	f000 fa17 	bl	8003d5c <DWT_DelayUs>
		OneWire_BusInputDirection(onewire); // Release bus
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff ff5a 	bl	80037e8 <OneWire_BusInputDirection>
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <OneWire_ReadBit>:

uint8_t OneWire_ReadBit(OneWire_t* onewire)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b084      	sub	sp, #16
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0; // Default read bit state is low
 8003944:	2300      	movs	r3, #0
 8003946:	73fb      	strb	r3, [r7, #15]
	
	OneWire_OutputLow(onewire); // Set low to initiate reading
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff7f 	bl	800384c <OneWire_OutputLow>
	OneWire_BusOutputDirection(onewire);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff63 	bl	800381a <OneWire_BusOutputDirection>
	DWT_DelayUs(2);
 8003954:	2002      	movs	r0, #2
 8003956:	f000 fa01 	bl	8003d5c <DWT_DelayUs>
	
	OneWire_BusInputDirection(onewire); // Release bus for Slave response
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff ff44 	bl	80037e8 <OneWire_BusInputDirection>
	DWT_DelayUs(10);
 8003960:	200a      	movs	r0, #10
 8003962:	f000 f9fb 	bl	8003d5c <DWT_DelayUs>
	
	if (HAL_GPIO_ReadPin(onewire->GPIOx, onewire->GPIO_Pin)) // Read the bus state
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	889b      	ldrh	r3, [r3, #4]
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f001 ff45 	bl	8005800 <HAL_GPIO_ReadPin>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <OneWire_ReadBit+0x44>
		bit = 1;
 800397c:	2301      	movs	r3, #1
 800397e:	73fb      	strb	r3, [r7, #15]
	
	DWT_DelayUs(50); // Wait for end of read cycle
 8003980:	2032      	movs	r0, #50	; 0x32
 8003982:	f000 f9eb 	bl	8003d5c <DWT_DelayUs>

	return bit;
 8003986:	7bfb      	ldrb	r3, [r7, #15]
}
 8003988:	4618      	mov	r0, r3
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* onewire, uint8_t byte)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
 8003998:	460b      	mov	r3, r1
 800399a:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 800399c:	2308      	movs	r3, #8
 800399e:	73fb      	strb	r3, [r7, #15]

	do
	{
		OneWire_WriteBit(onewire, byte & 1); // LSB first
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f7ff ff94 	bl	80038d8 <OneWire_WriteBit>
		byte >>= 1;
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	70fb      	strb	r3, [r7, #3]
	} while(--i);
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	3b01      	subs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	7bfb      	ldrb	r3, [r7, #15]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1ee      	bne.n	80039a0 <OneWire_WriteByte+0x10>
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* onewire)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 80039d2:	2308      	movs	r3, #8
 80039d4:	73fb      	strb	r3, [r7, #15]
 80039d6:	2300      	movs	r3, #0
 80039d8:	73bb      	strb	r3, [r7, #14]

	do{
		byte >>= 1;
 80039da:	7bbb      	ldrb	r3, [r7, #14]
 80039dc:	085b      	lsrs	r3, r3, #1
 80039de:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(onewire) << 7); // LSB first
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f7ff ffab 	bl	800393c <OneWire_ReadBit>
 80039e6:	4603      	mov	r3, r0
 80039e8:	01db      	lsls	r3, r3, #7
 80039ea:	b25a      	sxtb	r2, r3
 80039ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	b25b      	sxtb	r3, r3
 80039f4:	73bb      	strb	r3, [r7, #14]
	} while(--i);
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	3b01      	subs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1eb      	bne.n	80039da <OneWire_ReadByte+0x10>
	
	return byte;
 8003a02:	7bbb      	ldrb	r3, [r7, #14]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <OneWire_ResetSearch>:

//
// 1-Wire search operations
//
void OneWire_ResetSearch(OneWire_t* onewire)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
	// Clear the search results
	onewire->LastDiscrepancy = 0;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	719a      	strb	r2, [r3, #6]
	onewire->LastDeviceFlag = 0;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	721a      	strb	r2, [r3, #8]
	onewire->LastFamilyDiscrepancy = 0;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	71da      	strb	r2, [r3, #7]
}
 8003a26:	bf00      	nop
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* onewire, uint8_t command)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	70fb      	strb	r3, [r7, #3]
	uint8_t id_bit_number;
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	id_bit_number = 1;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8003a46:	2300      	movs	r3, #0
 8003a48:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	733b      	strb	r3, [r7, #12]

	if (!onewire->LastDeviceFlag) // If last device flag is not set
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	7a1b      	ldrb	r3, [r3, #8]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f040 809a 	bne.w	8003b90 <OneWire_Search+0x15e>
	{
		if (OneWire_Reset(onewire)) // Reset bus
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f7ff ff14 	bl	800388a <OneWire_Reset>
 8003a62:	4603      	mov	r3, r0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <OneWire_Search+0x4c>
		{
			// If error while reset - reset search results
			onewire->LastDiscrepancy = 0;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	719a      	strb	r2, [r3, #6]
			onewire->LastDeviceFlag = 0;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	721a      	strb	r2, [r3, #8]
			onewire->LastFamilyDiscrepancy = 0;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	71da      	strb	r2, [r3, #7]
			return 0;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	e09b      	b.n	8003bb6 <OneWire_Search+0x184>
		}

		OneWire_WriteByte(onewire, command); // Send searching command
 8003a7e:	78fb      	ldrb	r3, [r7, #3]
 8003a80:	4619      	mov	r1, r3
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ff84 	bl	8003990 <OneWire_WriteByte>

		// Searching loop, Maxim APPLICATION NOTE 187
		do
		{
			id_bit = OneWire_ReadBit(onewire); // Read a bit 1
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff ff57 	bl	800393c <OneWire_ReadBit>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(onewire); // Read the complement of bit 1
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff ff52 	bl	800393c <OneWire_ReadBit>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	723b      	strb	r3, [r7, #8]

			if ((id_bit == 1) && (cmp_id_bit == 1)) // 11 - data error
 8003a9c:	7a7b      	ldrb	r3, [r7, #9]
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d102      	bne.n	8003aa8 <OneWire_Search+0x76>
 8003aa2:	7a3b      	ldrb	r3, [r7, #8]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d064      	beq.n	8003b72 <OneWire_Search+0x140>
			{
				break;
			}
			else
			{
				if (id_bit != cmp_id_bit)
 8003aa8:	7a7a      	ldrb	r2, [r7, #9]
 8003aaa:	7a3b      	ldrb	r3, [r7, #8]
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d002      	beq.n	8003ab6 <OneWire_Search+0x84>
				{
					search_direction = id_bit;  // Bit write value for search
 8003ab0:	7a7b      	ldrb	r3, [r7, #9]
 8003ab2:	72bb      	strb	r3, [r7, #10]
 8003ab4:	e026      	b.n	8003b04 <OneWire_Search+0xd2>
				}
				else // 00 - 2 devices
				{
					// Table 3. Search Path Direction
					if (id_bit_number < onewire->LastDiscrepancy)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	799b      	ldrb	r3, [r3, #6]
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d20d      	bcs.n	8003adc <OneWire_Search+0xaa>
					{
						search_direction = ((onewire->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8003ac0:	7b7b      	ldrb	r3, [r7, #13]
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	7a5a      	ldrb	r2, [r3, #9]
 8003ac8:	7afb      	ldrb	r3, [r7, #11]
 8003aca:	4013      	ands	r3, r2
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	bf14      	ite	ne
 8003ad2:	2301      	movne	r3, #1
 8003ad4:	2300      	moveq	r3, #0
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	72bb      	strb	r3, [r7, #10]
 8003ada:	e008      	b.n	8003aee <OneWire_Search+0xbc>
					}
					else
					{
						// If bit is equal to last - pick 1
						// If not - then pick 0
						search_direction = (id_bit_number == onewire->LastDiscrepancy);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	799b      	ldrb	r3, [r3, #6]
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	bf0c      	ite	eq
 8003ae6:	2301      	moveq	r3, #1
 8003ae8:	2300      	movne	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	72bb      	strb	r3, [r7, #10]
					}

					if (search_direction == 0) // If 0 was picked, write it to LastZero
 8003aee:	7abb      	ldrb	r3, [r7, #10]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d107      	bne.n	8003b04 <OneWire_Search+0xd2>
					{
						last_zero = id_bit_number;
 8003af4:	7bfb      	ldrb	r3, [r7, #15]
 8003af6:	73bb      	strb	r3, [r7, #14]

						if (last_zero < 9) // Check for last discrepancy in family
 8003af8:	7bbb      	ldrb	r3, [r7, #14]
 8003afa:	2b08      	cmp	r3, #8
 8003afc:	d802      	bhi.n	8003b04 <OneWire_Search+0xd2>
						{
							onewire->LastFamilyDiscrepancy = last_zero;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	7bba      	ldrb	r2, [r7, #14]
 8003b02:	71da      	strb	r2, [r3, #7]
						}
					}
				}

				if (search_direction == 1)
 8003b04:	7abb      	ldrb	r3, [r7, #10]
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d10c      	bne.n	8003b24 <OneWire_Search+0xf2>
				{
					onewire->ROM_NO[rom_byte_number] |= rom_byte_mask; // Set the bit in the ROM byte rom_byte_number
 8003b0a:	7b7b      	ldrb	r3, [r7, #13]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4413      	add	r3, r2
 8003b10:	7a59      	ldrb	r1, [r3, #9]
 8003b12:	7b7b      	ldrb	r3, [r7, #13]
 8003b14:	7afa      	ldrb	r2, [r7, #11]
 8003b16:	430a      	orrs	r2, r1
 8003b18:	b2d1      	uxtb	r1, r2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	4413      	add	r3, r2
 8003b1e:	460a      	mov	r2, r1
 8003b20:	725a      	strb	r2, [r3, #9]
 8003b22:	e010      	b.n	8003b46 <OneWire_Search+0x114>
				}
				else
				{
					onewire->ROM_NO[rom_byte_number] &= ~rom_byte_mask; // Clear the bit in the ROM byte rom_byte_number
 8003b24:	7b7b      	ldrb	r3, [r7, #13]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	7a5b      	ldrb	r3, [r3, #9]
 8003b2c:	b25a      	sxtb	r2, r3
 8003b2e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003b32:	43db      	mvns	r3, r3
 8003b34:	b25b      	sxtb	r3, r3
 8003b36:	4013      	ands	r3, r2
 8003b38:	b25a      	sxtb	r2, r3
 8003b3a:	7b7b      	ldrb	r3, [r7, #13]
 8003b3c:	b2d1      	uxtb	r1, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4413      	add	r3, r2
 8003b42:	460a      	mov	r2, r1
 8003b44:	725a      	strb	r2, [r3, #9]
				}
				
				OneWire_WriteBit(onewire, search_direction); // Search direction write bit
 8003b46:	7abb      	ldrb	r3, [r7, #10]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff fec4 	bl	80038d8 <OneWire_WriteBit>

				id_bit_number++; // Next bit search - increase the id
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	3301      	adds	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1; // Shoft the mask for next bit
 8003b56:	7afb      	ldrb	r3, [r7, #11]
 8003b58:	005b      	lsls	r3, r3, #1
 8003b5a:	72fb      	strb	r3, [r7, #11]

				if (rom_byte_mask == 0) // If the mask is 0, it says the whole byte is read
 8003b5c:	7afb      	ldrb	r3, [r7, #11]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d104      	bne.n	8003b6c <OneWire_Search+0x13a>
				{
					rom_byte_number++; // Next byte number
 8003b62:	7b7b      	ldrb	r3, [r7, #13]
 8003b64:	3301      	adds	r3, #1
 8003b66:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1; // Reset the mask - first bit
 8003b68:	2301      	movs	r3, #1
 8003b6a:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while(rom_byte_number < 8);  // Read 8 bytes
 8003b6c:	7b7b      	ldrb	r3, [r7, #13]
 8003b6e:	2b07      	cmp	r3, #7
 8003b70:	d98a      	bls.n	8003a88 <OneWire_Search+0x56>

		if (!(id_bit_number < 65)) // If all read bits number is below 65 (8 bytes)
 8003b72:	7bfb      	ldrb	r3, [r7, #15]
 8003b74:	2b40      	cmp	r3, #64	; 0x40
 8003b76:	d90b      	bls.n	8003b90 <OneWire_Search+0x15e>
		{
			onewire->LastDiscrepancy = last_zero;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	7bba      	ldrb	r2, [r7, #14]
 8003b7c:	719a      	strb	r2, [r3, #6]

			if (onewire->LastDiscrepancy == 0) // If last discrepancy is 0 - last device found
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	799b      	ldrb	r3, [r3, #6]
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d102      	bne.n	8003b8c <OneWire_Search+0x15a>
			{
				onewire->LastDeviceFlag = 1; // Set the flag
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1; // Searching successful
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	733b      	strb	r3, [r7, #12]
		}
	}

	// If no device is found - reset search data and return 0
	if (!search_result || !onewire->ROM_NO[0])
 8003b90:	7b3b      	ldrb	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d003      	beq.n	8003b9e <OneWire_Search+0x16c>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	7a5b      	ldrb	r3, [r3, #9]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10a      	bne.n	8003bb4 <OneWire_Search+0x182>
	{
		onewire->LastDiscrepancy = 0;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	719a      	strb	r2, [r3, #6]
		onewire->LastDeviceFlag = 0;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	721a      	strb	r2, [r3, #8]
		onewire->LastFamilyDiscrepancy = 0;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8003bb4:	7b3b      	ldrb	r3, [r7, #12]
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3710      	adds	r7, #16
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}

08003bbe <OneWire_First>:

//
//	Return first device on 1-Wire bus
//
uint8_t OneWire_First(OneWire_t* onewire)
{
 8003bbe:	b580      	push	{r7, lr}
 8003bc0:	b082      	sub	sp, #8
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]
	OneWire_ResetSearch(onewire);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f7ff ff20 	bl	8003a0c <OneWire_ResetSearch>

	return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8003bcc:	21f0      	movs	r1, #240	; 0xf0
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7ff ff2f 	bl	8003a32 <OneWire_Search>
 8003bd4:	4603      	mov	r3, r0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}

08003bde <OneWire_Next>:

//
//	Return next device on 1-Wire bus
//
uint8_t OneWire_Next(OneWire_t* onewire)
{
 8003bde:	b580      	push	{r7, lr}
 8003be0:	b082      	sub	sp, #8
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(onewire, ONEWIRE_CMD_SEARCHROM);
 8003be6:	21f0      	movs	r1, #240	; 0xf0
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f7ff ff22 	bl	8003a32 <OneWire_Search>
 8003bee:	4603      	mov	r3, r0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <OneWire_SelectWithPointer>:

//
//	Select a device on bus by pointer to ROM address
//
void OneWire_SelectWithPointer(OneWire_t* onewire, uint8_t *ROM)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(onewire, ONEWIRE_CMD_MATCHROM); // Match ROM command
 8003c02:	2155      	movs	r1, #85	; 0x55
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff fec3 	bl	8003990 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++)
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	73fb      	strb	r3, [r7, #15]
 8003c0e:	e00a      	b.n	8003c26 <OneWire_SelectWithPointer+0x2e>
	{
		OneWire_WriteByte(onewire, *(ROM + i));
 8003c10:	7bfb      	ldrb	r3, [r7, #15]
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	4413      	add	r3, r2
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff feb8 	bl	8003990 <OneWire_WriteByte>
	for (i = 0; i < 8; i++)
 8003c20:	7bfb      	ldrb	r3, [r7, #15]
 8003c22:	3301      	adds	r3, #1
 8003c24:	73fb      	strb	r3, [r7, #15]
 8003c26:	7bfb      	ldrb	r3, [r7, #15]
 8003c28:	2b07      	cmp	r3, #7
 8003c2a:	d9f1      	bls.n	8003c10 <OneWire_SelectWithPointer+0x18>
	}	
}
 8003c2c:	bf00      	nop
 8003c2e:	3710      	adds	r7, #16
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <OneWire_GetFullROM>:

//
//	Get the ROM of found device
//
void OneWire_GetFullROM(OneWire_t* onewire, uint8_t *firstIndex)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8003c3e:	2300      	movs	r3, #0
 8003c40:	73fb      	strb	r3, [r7, #15]
 8003c42:	e00a      	b.n	8003c5a <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = onewire->ROM_NO[i];
 8003c44:	7bfa      	ldrb	r2, [r7, #15]
 8003c46:	7bfb      	ldrb	r3, [r7, #15]
 8003c48:	6839      	ldr	r1, [r7, #0]
 8003c4a:	440b      	add	r3, r1
 8003c4c:	6879      	ldr	r1, [r7, #4]
 8003c4e:	440a      	add	r2, r1
 8003c50:	7a52      	ldrb	r2, [r2, #9]
 8003c52:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	3301      	adds	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
 8003c5a:	7bfb      	ldrb	r3, [r7, #15]
 8003c5c:	2b07      	cmp	r3, #7
 8003c5e:	d9f1      	bls.n	8003c44 <OneWire_GetFullROM+0x10>
	}
}
 8003c60:	bf00      	nop
 8003c62:	3714      	adds	r7, #20
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <OneWire_CRC8>:

//
//	Calculate CRC
//
uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	460b      	mov	r3, r1
 8003c76:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	73fb      	strb	r3, [r7, #15]
	
	while (len--)
 8003c7c:	e022      	b.n	8003cc4 <OneWire_CRC8+0x58>
	{
		inbyte = *addr++;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	1c5a      	adds	r2, r3, #1
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--)
 8003c88:	2308      	movs	r3, #8
 8003c8a:	737b      	strb	r3, [r7, #13]
 8003c8c:	e017      	b.n	8003cbe <OneWire_CRC8+0x52>
		{
			mix = (crc ^ inbyte) & 0x01;
 8003c8e:	7bfa      	ldrb	r2, [r7, #15]
 8003c90:	7bbb      	ldrb	r3, [r7, #14]
 8003c92:	4053      	eors	r3, r2
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 8003c9c:	7bfb      	ldrb	r3, [r7, #15]
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	73fb      	strb	r3, [r7, #15]
			if (mix)
 8003ca2:	7b3b      	ldrb	r3, [r7, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d004      	beq.n	8003cb2 <OneWire_CRC8+0x46>
			{
				crc ^= 0x8C;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
 8003caa:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8003cb2:	7bbb      	ldrb	r3, [r7, #14]
 8003cb4:	085b      	lsrs	r3, r3, #1
 8003cb6:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--)
 8003cb8:	7b7b      	ldrb	r3, [r7, #13]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	737b      	strb	r3, [r7, #13]
 8003cbe:	7b7b      	ldrb	r3, [r7, #13]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e4      	bne.n	8003c8e <OneWire_CRC8+0x22>
	while (len--)
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	1e5a      	subs	r2, r3, #1
 8003cc8:	70fa      	strb	r2, [r7, #3]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1d7      	bne.n	8003c7e <OneWire_CRC8+0x12>
		}
	}
	
	return crc;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3714      	adds	r7, #20
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <OneWire_Init>:

//
//	1-Wire initialization
//
void OneWire_Init(OneWire_t* onewire, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	60f8      	str	r0, [r7, #12]
 8003ce4:	60b9      	str	r1, [r7, #8]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	80fb      	strh	r3, [r7, #6]
	onewire->GPIOx = GPIOx; // Save 1-wire bus pin
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	601a      	str	r2, [r3, #0]
	onewire->GPIO_Pin = GPIO_Pin;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	88fa      	ldrh	r2, [r7, #6]
 8003cf4:	809a      	strh	r2, [r3, #4]

	// 1-Wire bit bang initialization
	OneWire_BusOutputDirection(onewire);
 8003cf6:	68f8      	ldr	r0, [r7, #12]
 8003cf8:	f7ff fd8f 	bl	800381a <OneWire_BusOutputDirection>
	OneWire_OutputHigh(onewire);
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f7ff fdb5 	bl	800386c <OneWire_OutputHigh>
	HAL_Delay(100);
 8003d02:	2064      	movs	r0, #100	; 0x64
 8003d04:	f000 f8ac 	bl	8003e60 <HAL_Delay>
	OneWire_OutputLow(onewire);
 8003d08:	68f8      	ldr	r0, [r7, #12]
 8003d0a:	f7ff fd9f 	bl	800384c <OneWire_OutputLow>
	HAL_Delay(100);
 8003d0e:	2064      	movs	r0, #100	; 0x64
 8003d10:	f000 f8a6 	bl	8003e60 <HAL_Delay>
	OneWire_OutputHigh(onewire);
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7ff fda9 	bl	800386c <OneWire_OutputHigh>
	HAL_Delay(200);
 8003d1a:	20c8      	movs	r0, #200	; 0xc8
 8003d1c:	f000 f8a0 	bl	8003e60 <HAL_Delay>
}
 8003d20:	bf00      	nop
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <DWT_Init>:
#include "stm32f3xx_hal.h"
#include "time_ext.h"

void DWT_Init()
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
    //if (!(CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)) {
	    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003d2c:	4b09      	ldr	r3, [pc, #36]	; (8003d54 <DWT_Init+0x2c>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	4a08      	ldr	r2, [pc, #32]	; (8003d54 <DWT_Init+0x2c>)
 8003d32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d36:	60d3      	str	r3, [r2, #12]
	    DWT->CYCCNT = 0;
 8003d38:	4b07      	ldr	r3, [pc, #28]	; (8003d58 <DWT_Init+0x30>)
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	605a      	str	r2, [r3, #4]
	    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003d3e:	4b06      	ldr	r3, [pc, #24]	; (8003d58 <DWT_Init+0x30>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a05      	ldr	r2, [pc, #20]	; (8003d58 <DWT_Init+0x30>)
 8003d44:	f043 0301 	orr.w	r3, r3, #1
 8003d48:	6013      	str	r3, [r2, #0]
	//}
}
 8003d4a:	bf00      	nop
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	e000edf0 	.word	0xe000edf0
 8003d58:	e0001000 	.word	0xe0001000

08003d5c <DWT_DelayUs>:

#pragma GCC push_options
#pragma GCC optimize ("O3")
void DWT_DelayUs(uint32_t us)
{
	volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8003d5c:	4b0a      	ldr	r3, [pc, #40]	; (8003d88 <DWT_DelayUs+0x2c>)
 8003d5e:	490b      	ldr	r1, [pc, #44]	; (8003d8c <DWT_DelayUs+0x30>)
 8003d60:	681a      	ldr	r2, [r3, #0]
	volatile uint32_t start = DWT->CYCCNT;
 8003d62:	4b0b      	ldr	r3, [pc, #44]	; (8003d90 <DWT_DelayUs+0x34>)
	volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8003d64:	fba1 1202 	umull	r1, r2, r1, r2
{
 8003d68:	b082      	sub	sp, #8
	volatile uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8003d6a:	0c92      	lsrs	r2, r2, #18
 8003d6c:	fb00 f002 	mul.w	r0, r0, r2
 8003d70:	9000      	str	r0, [sp, #0]
	volatile uint32_t start = DWT->CYCCNT;
 8003d72:	685a      	ldr	r2, [r3, #4]
 8003d74:	9201      	str	r2, [sp, #4]
	while (DWT->CYCCNT - start < cycles);
 8003d76:	4618      	mov	r0, r3
 8003d78:	6843      	ldr	r3, [r0, #4]
 8003d7a:	9901      	ldr	r1, [sp, #4]
 8003d7c:	9a00      	ldr	r2, [sp, #0]
 8003d7e:	1a5b      	subs	r3, r3, r1
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d3f9      	bcc.n	8003d78 <DWT_DelayUs+0x1c>
}
 8003d84:	b002      	add	sp, #8
 8003d86:	4770      	bx	lr
 8003d88:	20000010 	.word	0x20000010
 8003d8c:	431bde83 	.word	0x431bde83
 8003d90:	e0001000 	.word	0xe0001000

08003d94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003d98:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <HAL_Init+0x28>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a07      	ldr	r2, [pc, #28]	; (8003dbc <HAL_Init+0x28>)
 8003d9e:	f043 0310 	orr.w	r3, r3, #16
 8003da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003da4:	2003      	movs	r0, #3
 8003da6:	f001 f96f 	bl	8005088 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003daa:	2000      	movs	r0, #0
 8003dac:	f000 f808 	bl	8003dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003db0:	f006 fd1a 	bl	800a7e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	40022000 	.word	0x40022000

08003dc0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003dc8:	4b12      	ldr	r3, [pc, #72]	; (8003e14 <HAL_InitTick+0x54>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	4b12      	ldr	r3, [pc, #72]	; (8003e18 <HAL_InitTick+0x58>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dde:	4618      	mov	r0, r3
 8003de0:	f001 f987 	bl	80050f2 <HAL_SYSTICK_Config>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e00e      	b.n	8003e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b0f      	cmp	r3, #15
 8003df2:	d80a      	bhi.n	8003e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003df4:	2200      	movs	r2, #0
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003dfc:	f001 f94f 	bl	800509e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003e00:	4a06      	ldr	r2, [pc, #24]	; (8003e1c <HAL_InitTick+0x5c>)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e000      	b.n	8003e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3708      	adds	r7, #8
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	20000010 	.word	0x20000010
 8003e18:	20000004 	.word	0x20000004
 8003e1c:	20000000 	.word	0x20000000

08003e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e24:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_IncTick+0x20>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_IncTick+0x24>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4413      	add	r3, r2
 8003e30:	4a04      	ldr	r2, [pc, #16]	; (8003e44 <HAL_IncTick+0x24>)
 8003e32:	6013      	str	r3, [r2, #0]
}
 8003e34:	bf00      	nop
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000004 	.word	0x20000004
 8003e44:	20000c98 	.word	0x20000c98

08003e48 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  return uwTick;  
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <HAL_GetTick+0x14>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	20000c98 	.word	0x20000c98

08003e60 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e68:	f7ff ffee 	bl	8003e48 <HAL_GetTick>
 8003e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e78:	d005      	beq.n	8003e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e7a:	4b09      	ldr	r3, [pc, #36]	; (8003ea0 <HAL_Delay+0x40>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4413      	add	r3, r2
 8003e84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8003e86:	bf00      	nop
 8003e88:	f7ff ffde 	bl	8003e48 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d8f7      	bhi.n	8003e88 <HAL_Delay+0x28>
  {
  }
}
 8003e98:	bf00      	nop
 8003e9a:	3710      	adds	r7, #16
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	20000004 	.word	0x20000004

08003ea4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b083      	sub	sp, #12
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b09a      	sub	sp, #104	; 0x68
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e1e3      	b.n	80042a0 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee2:	f003 0310 	and.w	r3, r3, #16
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d176      	bne.n	8003fd8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d152      	bne.n	8003f98 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f006 fc8f 	bl	800a830 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d13b      	bne.n	8003f98 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003f20:	6878      	ldr	r0, [r7, #4]
 8003f22:	f000 ff81 	bl	8004e28 <ADC_Disable>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f30:	f003 0310 	and.w	r3, r3, #16
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d12f      	bne.n	8003f98 <HAL_ADC_Init+0xe0>
 8003f38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d12b      	bne.n	8003f98 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f48:	f023 0302 	bic.w	r3, r3, #2
 8003f4c:	f043 0202 	orr.w	r2, r3, #2
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003f62:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689a      	ldr	r2, [r3, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f72:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f74:	4b92      	ldr	r3, [pc, #584]	; (80041c0 <HAL_ADC_Init+0x308>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a92      	ldr	r2, [pc, #584]	; (80041c4 <HAL_ADC_Init+0x30c>)
 8003f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f7e:	0c9a      	lsrs	r2, r3, #18
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	005b      	lsls	r3, r3, #1
 8003f88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f8a:	e002      	b.n	8003f92 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f9      	bne.n	8003f8c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d007      	beq.n	8003fb6 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003fb0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003fb4:	d110      	bne.n	8003fd8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fba:	f023 0312 	bic.w	r3, r3, #18
 8003fbe:	f043 0210 	orr.w	r2, r3, #16
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fca:	f043 0201 	orr.w	r2, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	f003 0310 	and.w	r3, r3, #16
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 8150 	bne.w	8004286 <HAL_ADC_Init+0x3ce>
 8003fe6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f040 814b 	bne.w	8004286 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	f040 8143 	bne.w	8004286 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004004:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004008:	f043 0202 	orr.w	r2, r3, #2
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004018:	d004      	beq.n	8004024 <HAL_ADC_Init+0x16c>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a6a      	ldr	r2, [pc, #424]	; (80041c8 <HAL_ADC_Init+0x310>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_ADC_Init+0x170>
 8004024:	4b69      	ldr	r3, [pc, #420]	; (80041cc <HAL_ADC_Init+0x314>)
 8004026:	e000      	b.n	800402a <HAL_ADC_Init+0x172>
 8004028:	4b69      	ldr	r3, [pc, #420]	; (80041d0 <HAL_ADC_Init+0x318>)
 800402a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004034:	d102      	bne.n	800403c <HAL_ADC_Init+0x184>
 8004036:	4b64      	ldr	r3, [pc, #400]	; (80041c8 <HAL_ADC_Init+0x310>)
 8004038:	60fb      	str	r3, [r7, #12]
 800403a:	e01a      	b.n	8004072 <HAL_ADC_Init+0x1ba>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a61      	ldr	r2, [pc, #388]	; (80041c8 <HAL_ADC_Init+0x310>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d103      	bne.n	800404e <HAL_ADC_Init+0x196>
 8004046:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800404a:	60fb      	str	r3, [r7, #12]
 800404c:	e011      	b.n	8004072 <HAL_ADC_Init+0x1ba>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a60      	ldr	r2, [pc, #384]	; (80041d4 <HAL_ADC_Init+0x31c>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d102      	bne.n	800405e <HAL_ADC_Init+0x1a6>
 8004058:	4b5f      	ldr	r3, [pc, #380]	; (80041d8 <HAL_ADC_Init+0x320>)
 800405a:	60fb      	str	r3, [r7, #12]
 800405c:	e009      	b.n	8004072 <HAL_ADC_Init+0x1ba>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a5d      	ldr	r2, [pc, #372]	; (80041d8 <HAL_ADC_Init+0x320>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d102      	bne.n	800406e <HAL_ADC_Init+0x1b6>
 8004068:	4b5a      	ldr	r3, [pc, #360]	; (80041d4 <HAL_ADC_Init+0x31c>)
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e001      	b.n	8004072 <HAL_ADC_Init+0x1ba>
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	2b01      	cmp	r3, #1
 800407e:	d108      	bne.n	8004092 <HAL_ADC_Init+0x1da>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b01      	cmp	r3, #1
 800408c:	d101      	bne.n	8004092 <HAL_ADC_Init+0x1da>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_ADC_Init+0x1dc>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d11c      	bne.n	80040d2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004098:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800409a:	2b00      	cmp	r3, #0
 800409c:	d010      	beq.n	80040c0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d107      	bne.n	80040ba <HAL_ADC_Init+0x202>
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d101      	bne.n	80040ba <HAL_ADC_Init+0x202>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <HAL_ADC_Init+0x204>
 80040ba:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d108      	bne.n	80040d2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80040c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040d0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	7e5b      	ldrb	r3, [r3, #25]
 80040d6:	035b      	lsls	r3, r3, #13
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040dc:	2a01      	cmp	r2, #1
 80040de:	d002      	beq.n	80040e6 <HAL_ADC_Init+0x22e>
 80040e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80040e4:	e000      	b.n	80040e8 <HAL_ADC_Init+0x230>
 80040e6:	2200      	movs	r2, #0
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040f8:	4313      	orrs	r3, r2
 80040fa:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d11b      	bne.n	800413e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	7e5b      	ldrb	r3, [r3, #25]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	3b01      	subs	r3, #1
 8004114:	045a      	lsls	r2, r3, #17
 8004116:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004118:	4313      	orrs	r3, r2
 800411a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411e:	663b      	str	r3, [r7, #96]	; 0x60
 8004120:	e00d      	b.n	800413e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800412a:	f043 0220 	orr.w	r2, r3, #32
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004136:	f043 0201 	orr.w	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004142:	2b01      	cmp	r3, #1
 8004144:	d054      	beq.n	80041f0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a22      	ldr	r2, [pc, #136]	; (80041d4 <HAL_ADC_Init+0x31c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d004      	beq.n	800415a <HAL_ADC_Init+0x2a2>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a20      	ldr	r2, [pc, #128]	; (80041d8 <HAL_ADC_Init+0x320>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d140      	bne.n	80041dc <HAL_ADC_Init+0x324>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004162:	d02a      	beq.n	80041ba <HAL_ADC_Init+0x302>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800416c:	d022      	beq.n	80041b4 <HAL_ADC_Init+0x2fc>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004176:	d01a      	beq.n	80041ae <HAL_ADC_Init+0x2f6>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800417c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8004180:	d012      	beq.n	80041a8 <HAL_ADC_Init+0x2f0>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 800418a:	d00a      	beq.n	80041a2 <HAL_ADC_Init+0x2ea>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004190:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8004194:	d002      	beq.n	800419c <HAL_ADC_Init+0x2e4>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800419a:	e023      	b.n	80041e4 <HAL_ADC_Init+0x32c>
 800419c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80041a0:	e020      	b.n	80041e4 <HAL_ADC_Init+0x32c>
 80041a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80041a6:	e01d      	b.n	80041e4 <HAL_ADC_Init+0x32c>
 80041a8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80041ac:	e01a      	b.n	80041e4 <HAL_ADC_Init+0x32c>
 80041ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041b2:	e017      	b.n	80041e4 <HAL_ADC_Init+0x32c>
 80041b4:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80041b8:	e014      	b.n	80041e4 <HAL_ADC_Init+0x32c>
 80041ba:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80041be:	e011      	b.n	80041e4 <HAL_ADC_Init+0x32c>
 80041c0:	20000010 	.word	0x20000010
 80041c4:	431bde83 	.word	0x431bde83
 80041c8:	50000100 	.word	0x50000100
 80041cc:	50000300 	.word	0x50000300
 80041d0:	50000700 	.word	0x50000700
 80041d4:	50000400 	.word	0x50000400
 80041d8:	50000500 	.word	0x50000500
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041e8:	4313      	orrs	r3, r2
 80041ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041ec:	4313      	orrs	r3, r2
 80041ee:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d114      	bne.n	8004228 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800420c:	f023 0302 	bic.w	r3, r3, #2
 8004210:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	7e1b      	ldrb	r3, [r3, #24]
 8004216:	039a      	lsls	r2, r3, #14
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	4313      	orrs	r3, r2
 8004222:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004224:	4313      	orrs	r3, r2
 8004226:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	4b1e      	ldr	r3, [pc, #120]	; (80042a8 <HAL_ADC_Init+0x3f0>)
 8004230:	4013      	ands	r3, r2
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6812      	ldr	r2, [r2, #0]
 8004236:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004238:	430b      	orrs	r3, r1
 800423a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d10c      	bne.n	800425e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424a:	f023 010f 	bic.w	r1, r3, #15
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	1e5a      	subs	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	430a      	orrs	r2, r1
 800425a:	631a      	str	r2, [r3, #48]	; 0x30
 800425c:	e007      	b.n	800426e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 020f 	bic.w	r2, r2, #15
 800426c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	f023 0303 	bic.w	r3, r3, #3
 800427c:	f043 0201 	orr.w	r2, r3, #1
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	641a      	str	r2, [r3, #64]	; 0x40
 8004284:	e00a      	b.n	800429c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f023 0312 	bic.w	r3, r3, #18
 800428e:	f043 0210 	orr.w	r2, r3, #16
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004296:	2301      	movs	r3, #1
 8004298:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800429c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3768      	adds	r7, #104	; 0x68
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	fff0c007 	.word	0xfff0c007

080042ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f040 80f7 	bne.w	80044ba <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_ADC_Start_DMA+0x2e>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e0f2      	b.n	80044c0 <HAL_ADC_Start_DMA+0x214>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042ea:	d004      	beq.n	80042f6 <HAL_ADC_Start_DMA+0x4a>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a75      	ldr	r2, [pc, #468]	; (80044c8 <HAL_ADC_Start_DMA+0x21c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d109      	bne.n	800430a <HAL_ADC_Start_DMA+0x5e>
 80042f6:	4b75      	ldr	r3, [pc, #468]	; (80044cc <HAL_ADC_Start_DMA+0x220>)
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	f003 031f 	and.w	r3, r3, #31
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bf0c      	ite	eq
 8004302:	2301      	moveq	r3, #1
 8004304:	2300      	movne	r3, #0
 8004306:	b2db      	uxtb	r3, r3
 8004308:	e008      	b.n	800431c <HAL_ADC_Start_DMA+0x70>
 800430a:	4b71      	ldr	r3, [pc, #452]	; (80044d0 <HAL_ADC_Start_DMA+0x224>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f003 031f 	and.w	r3, r3, #31
 8004312:	2b00      	cmp	r3, #0
 8004314:	bf0c      	ite	eq
 8004316:	2301      	moveq	r3, #1
 8004318:	2300      	movne	r3, #0
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	f000 80c5 	beq.w	80044ac <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 fd22 	bl	8004d6c <ADC_Enable>
 8004328:	4603      	mov	r3, r0
 800432a:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b00      	cmp	r3, #0
 8004330:	f040 80b7 	bne.w	80044a2 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800433c:	f023 0301 	bic.w	r3, r3, #1
 8004340:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004350:	d004      	beq.n	800435c <HAL_ADC_Start_DMA+0xb0>
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a5c      	ldr	r2, [pc, #368]	; (80044c8 <HAL_ADC_Start_DMA+0x21c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d106      	bne.n	800436a <HAL_ADC_Start_DMA+0xbe>
 800435c:	4b5b      	ldr	r3, [pc, #364]	; (80044cc <HAL_ADC_Start_DMA+0x220>)
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 031f 	and.w	r3, r3, #31
 8004364:	2b00      	cmp	r3, #0
 8004366:	d010      	beq.n	800438a <HAL_ADC_Start_DMA+0xde>
 8004368:	e005      	b.n	8004376 <HAL_ADC_Start_DMA+0xca>
 800436a:	4b59      	ldr	r3, [pc, #356]	; (80044d0 <HAL_ADC_Start_DMA+0x224>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f003 031f 	and.w	r3, r3, #31
 8004372:	2b00      	cmp	r3, #0
 8004374:	d009      	beq.n	800438a <HAL_ADC_Start_DMA+0xde>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800437e:	d004      	beq.n	800438a <HAL_ADC_Start_DMA+0xde>
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a53      	ldr	r2, [pc, #332]	; (80044d4 <HAL_ADC_Start_DMA+0x228>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d115      	bne.n	80043b6 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d036      	beq.n	8004412 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80043ac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80043b4:	e02d      	b.n	8004412 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043ca:	d004      	beq.n	80043d6 <HAL_ADC_Start_DMA+0x12a>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a3d      	ldr	r2, [pc, #244]	; (80044c8 <HAL_ADC_Start_DMA+0x21c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d10a      	bne.n	80043ec <HAL_ADC_Start_DMA+0x140>
 80043d6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	bf14      	ite	ne
 80043e4:	2301      	movne	r3, #1
 80043e6:	2300      	moveq	r3, #0
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	e008      	b.n	80043fe <HAL_ADC_Start_DMA+0x152>
 80043ec:	4b39      	ldr	r3, [pc, #228]	; (80044d4 <HAL_ADC_Start_DMA+0x228>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	bf14      	ite	ne
 80043f8:	2301      	movne	r3, #1
 80043fa:	2300      	moveq	r3, #0
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d007      	beq.n	8004412 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800440a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800441a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800441e:	d106      	bne.n	800442e <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004424:	f023 0206 	bic.w	r2, r3, #6
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	645a      	str	r2, [r3, #68]	; 0x44
 800442c:	e002      	b.n	8004434 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2200      	movs	r2, #0
 8004432:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004440:	4a25      	ldr	r2, [pc, #148]	; (80044d8 <HAL_ADC_Start_DMA+0x22c>)
 8004442:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	4a24      	ldr	r2, [pc, #144]	; (80044dc <HAL_ADC_Start_DMA+0x230>)
 800444a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004450:	4a23      	ldr	r2, [pc, #140]	; (80044e0 <HAL_ADC_Start_DMA+0x234>)
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	221c      	movs	r2, #28
 800445a:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685a      	ldr	r2, [r3, #4]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f042 0210 	orr.w	r2, r2, #16
 800446a:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68da      	ldr	r2, [r3, #12]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0201 	orr.w	r2, r2, #1
 800447a:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3340      	adds	r3, #64	; 0x40
 8004486:	4619      	mov	r1, r3
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f000 fe84 	bl	8005198 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f042 0204 	orr.w	r2, r2, #4
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	e00d      	b.n	80044be <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044aa:	e008      	b.n	80044be <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044b8:	e001      	b.n	80044be <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
 80044bc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80044be:	7dfb      	ldrb	r3, [r7, #23]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3718      	adds	r7, #24
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	50000100 	.word	0x50000100
 80044cc:	50000300 	.word	0x50000300
 80044d0:	50000700 	.word	0x50000700
 80044d4:	50000400 	.word	0x50000400
 80044d8:	08004ca1 	.word	0x08004ca1
 80044dc:	08004d1b 	.word	0x08004d1b
 80044e0:	08004d37 	.word	0x08004d37

080044e4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b09b      	sub	sp, #108	; 0x6c
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
 80044ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044ee:	2300      	movs	r3, #0
 80044f0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x22>
 8004502:	2302      	movs	r3, #2
 8004504:	e2cb      	b.n	8004a9e <HAL_ADC_ConfigChannel+0x5ba>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f003 0304 	and.w	r3, r3, #4
 8004518:	2b00      	cmp	r3, #0
 800451a:	f040 82af 	bne.w	8004a7c <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b04      	cmp	r3, #4
 8004524:	d81c      	bhi.n	8004560 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685a      	ldr	r2, [r3, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	4413      	add	r3, r2
 8004536:	005b      	lsls	r3, r3, #1
 8004538:	461a      	mov	r2, r3
 800453a:	231f      	movs	r3, #31
 800453c:	4093      	lsls	r3, r2
 800453e:	43db      	mvns	r3, r3
 8004540:	4019      	ands	r1, r3
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	005b      	lsls	r3, r3, #1
 800454e:	4413      	add	r3, r2
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	fa00 f203 	lsl.w	r2, r0, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	430a      	orrs	r2, r1
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
 800455e:	e063      	b.n	8004628 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	2b09      	cmp	r3, #9
 8004566:	d81e      	bhi.n	80045a6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685a      	ldr	r2, [r3, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4413      	add	r3, r2
 8004578:	005b      	lsls	r3, r3, #1
 800457a:	3b1e      	subs	r3, #30
 800457c:	221f      	movs	r2, #31
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43db      	mvns	r3, r3
 8004584:	4019      	ands	r1, r3
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6818      	ldr	r0, [r3, #0]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	685a      	ldr	r2, [r3, #4]
 800458e:	4613      	mov	r3, r2
 8004590:	005b      	lsls	r3, r3, #1
 8004592:	4413      	add	r3, r2
 8004594:	005b      	lsls	r3, r3, #1
 8004596:	3b1e      	subs	r3, #30
 8004598:	fa00 f203 	lsl.w	r2, r0, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	430a      	orrs	r2, r1
 80045a2:	635a      	str	r2, [r3, #52]	; 0x34
 80045a4:	e040      	b.n	8004628 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b0e      	cmp	r3, #14
 80045ac:	d81e      	bhi.n	80045ec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	685a      	ldr	r2, [r3, #4]
 80045b8:	4613      	mov	r3, r2
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	4413      	add	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	3b3c      	subs	r3, #60	; 0x3c
 80045c2:	221f      	movs	r2, #31
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	4019      	ands	r1, r3
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	005b      	lsls	r3, r3, #1
 80045d8:	4413      	add	r3, r2
 80045da:	005b      	lsls	r3, r3, #1
 80045dc:	3b3c      	subs	r3, #60	; 0x3c
 80045de:	fa00 f203 	lsl.w	r2, r0, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	639a      	str	r2, [r3, #56]	; 0x38
 80045ea:	e01d      	b.n	8004628 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4413      	add	r3, r2
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	3b5a      	subs	r3, #90	; 0x5a
 8004600:	221f      	movs	r2, #31
 8004602:	fa02 f303 	lsl.w	r3, r2, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	4019      	ands	r1, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6818      	ldr	r0, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685a      	ldr	r2, [r3, #4]
 8004612:	4613      	mov	r3, r2
 8004614:	005b      	lsls	r3, r3, #1
 8004616:	4413      	add	r3, r2
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	3b5a      	subs	r3, #90	; 0x5a
 800461c:	fa00 f203 	lsl.w	r2, r0, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	430a      	orrs	r2, r1
 8004626:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 030c 	and.w	r3, r3, #12
 8004632:	2b00      	cmp	r3, #0
 8004634:	f040 80e5 	bne.w	8004802 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b09      	cmp	r3, #9
 800463e:	d91c      	bls.n	800467a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6999      	ldr	r1, [r3, #24]
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4613      	mov	r3, r2
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	4413      	add	r3, r2
 8004650:	3b1e      	subs	r3, #30
 8004652:	2207      	movs	r2, #7
 8004654:	fa02 f303 	lsl.w	r3, r2, r3
 8004658:	43db      	mvns	r3, r3
 800465a:	4019      	ands	r1, r3
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	6898      	ldr	r0, [r3, #8]
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	005b      	lsls	r3, r3, #1
 8004668:	4413      	add	r3, r2
 800466a:	3b1e      	subs	r3, #30
 800466c:	fa00 f203 	lsl.w	r2, r0, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	430a      	orrs	r2, r1
 8004676:	619a      	str	r2, [r3, #24]
 8004678:	e019      	b.n	80046ae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6959      	ldr	r1, [r3, #20]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	4613      	mov	r3, r2
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	4413      	add	r3, r2
 800468a:	2207      	movs	r2, #7
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	43db      	mvns	r3, r3
 8004692:	4019      	ands	r1, r3
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	6898      	ldr	r0, [r3, #8]
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	4413      	add	r3, r2
 80046a2:	fa00 f203 	lsl.w	r2, r0, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	695a      	ldr	r2, [r3, #20]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	08db      	lsrs	r3, r3, #3
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	2b03      	cmp	r3, #3
 80046ce:	d84f      	bhi.n	8004770 <HAL_ADC_ConfigChannel+0x28c>
 80046d0:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <HAL_ADC_ConfigChannel+0x1f4>)
 80046d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d6:	bf00      	nop
 80046d8:	080046e9 	.word	0x080046e9
 80046dc:	0800470b 	.word	0x0800470b
 80046e0:	0800472d 	.word	0x0800472d
 80046e4:	0800474f 	.word	0x0800474f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046ee:	4b9f      	ldr	r3, [pc, #636]	; (800496c <HAL_ADC_ConfigChannel+0x488>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	683a      	ldr	r2, [r7, #0]
 80046f4:	6812      	ldr	r2, [r2, #0]
 80046f6:	0691      	lsls	r1, r2, #26
 80046f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046fa:	430a      	orrs	r2, r1
 80046fc:	431a      	orrs	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004706:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8004708:	e07e      	b.n	8004808 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004710:	4b96      	ldr	r3, [pc, #600]	; (800496c <HAL_ADC_ConfigChannel+0x488>)
 8004712:	4013      	ands	r3, r2
 8004714:	683a      	ldr	r2, [r7, #0]
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	0691      	lsls	r1, r2, #26
 800471a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800471c:	430a      	orrs	r2, r1
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004728:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800472a:	e06d      	b.n	8004808 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004732:	4b8e      	ldr	r3, [pc, #568]	; (800496c <HAL_ADC_ConfigChannel+0x488>)
 8004734:	4013      	ands	r3, r2
 8004736:	683a      	ldr	r2, [r7, #0]
 8004738:	6812      	ldr	r2, [r2, #0]
 800473a:	0691      	lsls	r1, r2, #26
 800473c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800473e:	430a      	orrs	r2, r1
 8004740:	431a      	orrs	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800474a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800474c:	e05c      	b.n	8004808 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004754:	4b85      	ldr	r3, [pc, #532]	; (800496c <HAL_ADC_ConfigChannel+0x488>)
 8004756:	4013      	ands	r3, r2
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	6812      	ldr	r2, [r2, #0]
 800475c:	0691      	lsls	r1, r2, #26
 800475e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004760:	430a      	orrs	r2, r1
 8004762:	431a      	orrs	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800476c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800476e:	e04b      	b.n	8004808 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004776:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	069b      	lsls	r3, r3, #26
 8004780:	429a      	cmp	r2, r3
 8004782:	d107      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004792:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800479a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	069b      	lsls	r3, r3, #26
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d107      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047b6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	069b      	lsls	r3, r3, #26
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d107      	bne.n	80047dc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047da:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	069b      	lsls	r3, r3, #26
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d10a      	bne.n	8004806 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80047fe:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8004800:	e001      	b.n	8004806 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8004802:	bf00      	nop
 8004804:	e000      	b.n	8004808 <HAL_ADC_ConfigChannel+0x324>
      break;
 8004806:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b01      	cmp	r3, #1
 8004814:	d108      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x344>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b01      	cmp	r3, #1
 8004822:	d101      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x344>
 8004824:	2301      	movs	r3, #1
 8004826:	e000      	b.n	800482a <HAL_ADC_ConfigChannel+0x346>
 8004828:	2300      	movs	r3, #0
 800482a:	2b00      	cmp	r3, #0
 800482c:	f040 8131 	bne.w	8004a92 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d00f      	beq.n	8004858 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2201      	movs	r2, #1
 8004846:	fa02 f303 	lsl.w	r3, r2, r3
 800484a:	43da      	mvns	r2, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	400a      	ands	r2, r1
 8004852:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8004856:	e049      	b.n	80048ec <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2201      	movs	r2, #1
 8004866:	409a      	lsls	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b09      	cmp	r3, #9
 8004878:	d91c      	bls.n	80048b4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6999      	ldr	r1, [r3, #24]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4613      	mov	r3, r2
 8004886:	005b      	lsls	r3, r3, #1
 8004888:	4413      	add	r3, r2
 800488a:	3b1b      	subs	r3, #27
 800488c:	2207      	movs	r2, #7
 800488e:	fa02 f303 	lsl.w	r3, r2, r3
 8004892:	43db      	mvns	r3, r3
 8004894:	4019      	ands	r1, r3
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	6898      	ldr	r0, [r3, #8]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	4613      	mov	r3, r2
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	4413      	add	r3, r2
 80048a4:	3b1b      	subs	r3, #27
 80048a6:	fa00 f203 	lsl.w	r2, r0, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	619a      	str	r2, [r3, #24]
 80048b2:	e01b      	b.n	80048ec <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6959      	ldr	r1, [r3, #20]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	4613      	mov	r3, r2
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	4413      	add	r3, r2
 80048c6:	2207      	movs	r2, #7
 80048c8:	fa02 f303 	lsl.w	r3, r2, r3
 80048cc:	43db      	mvns	r3, r3
 80048ce:	4019      	ands	r1, r3
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	6898      	ldr	r0, [r3, #8]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	1c5a      	adds	r2, r3, #1
 80048da:	4613      	mov	r3, r2
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	4413      	add	r3, r2
 80048e0:	fa00 f203 	lsl.w	r2, r0, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	430a      	orrs	r2, r1
 80048ea:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80048f4:	d004      	beq.n	8004900 <HAL_ADC_ConfigChannel+0x41c>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a1d      	ldr	r2, [pc, #116]	; (8004970 <HAL_ADC_ConfigChannel+0x48c>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d101      	bne.n	8004904 <HAL_ADC_ConfigChannel+0x420>
 8004900:	4b1c      	ldr	r3, [pc, #112]	; (8004974 <HAL_ADC_ConfigChannel+0x490>)
 8004902:	e000      	b.n	8004906 <HAL_ADC_ConfigChannel+0x422>
 8004904:	4b1c      	ldr	r3, [pc, #112]	; (8004978 <HAL_ADC_ConfigChannel+0x494>)
 8004906:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b10      	cmp	r3, #16
 800490e:	d105      	bne.n	800491c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004918:	2b00      	cmp	r3, #0
 800491a:	d015      	beq.n	8004948 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004920:	2b11      	cmp	r3, #17
 8004922:	d105      	bne.n	8004930 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004924:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00b      	beq.n	8004948 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004934:	2b12      	cmp	r3, #18
 8004936:	f040 80ac 	bne.w	8004a92 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800493a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004942:	2b00      	cmp	r3, #0
 8004944:	f040 80a5 	bne.w	8004a92 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004950:	d102      	bne.n	8004958 <HAL_ADC_ConfigChannel+0x474>
 8004952:	4b07      	ldr	r3, [pc, #28]	; (8004970 <HAL_ADC_ConfigChannel+0x48c>)
 8004954:	60fb      	str	r3, [r7, #12]
 8004956:	e023      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x4bc>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a04      	ldr	r2, [pc, #16]	; (8004970 <HAL_ADC_ConfigChannel+0x48c>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d10c      	bne.n	800497c <HAL_ADC_ConfigChannel+0x498>
 8004962:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004966:	60fb      	str	r3, [r7, #12]
 8004968:	e01a      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x4bc>
 800496a:	bf00      	nop
 800496c:	83fff000 	.word	0x83fff000
 8004970:	50000100 	.word	0x50000100
 8004974:	50000300 	.word	0x50000300
 8004978:	50000700 	.word	0x50000700
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a4a      	ldr	r2, [pc, #296]	; (8004aac <HAL_ADC_ConfigChannel+0x5c8>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d102      	bne.n	800498c <HAL_ADC_ConfigChannel+0x4a8>
 8004986:	4b4a      	ldr	r3, [pc, #296]	; (8004ab0 <HAL_ADC_ConfigChannel+0x5cc>)
 8004988:	60fb      	str	r3, [r7, #12]
 800498a:	e009      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x4bc>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a47      	ldr	r2, [pc, #284]	; (8004ab0 <HAL_ADC_ConfigChannel+0x5cc>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d102      	bne.n	800499c <HAL_ADC_ConfigChannel+0x4b8>
 8004996:	4b45      	ldr	r3, [pc, #276]	; (8004aac <HAL_ADC_ConfigChannel+0x5c8>)
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e001      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x4bc>
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d108      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x4dc>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d101      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x4dc>
 80049bc:	2301      	movs	r3, #1
 80049be:	e000      	b.n	80049c2 <HAL_ADC_ConfigChannel+0x4de>
 80049c0:	2300      	movs	r3, #0
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d150      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80049c6:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d010      	beq.n	80049ee <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 0303 	and.w	r3, r3, #3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d107      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x504>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0301 	and.w	r3, r3, #1
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d101      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x504>
 80049e4:	2301      	movs	r3, #1
 80049e6:	e000      	b.n	80049ea <HAL_ADC_ConfigChannel+0x506>
 80049e8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d13c      	bne.n	8004a68 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2b10      	cmp	r3, #16
 80049f4:	d11d      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x54e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049fe:	d118      	bne.n	8004a32 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8004a00:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a0a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004a0c:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <HAL_ADC_ConfigChannel+0x5d0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a29      	ldr	r2, [pc, #164]	; (8004ab8 <HAL_ADC_ConfigChannel+0x5d4>)
 8004a12:	fba2 2303 	umull	r2, r3, r2, r3
 8004a16:	0c9a      	lsrs	r2, r3, #18
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a22:	e002      	b.n	8004a2a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1f9      	bne.n	8004a24 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004a30:	e02e      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b11      	cmp	r3, #17
 8004a38:	d10b      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x56e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004a42:	d106      	bne.n	8004a52 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004a44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a4e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004a50:	e01e      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b12      	cmp	r3, #18
 8004a58:	d11a      	bne.n	8004a90 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8004a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a64:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004a66:	e013      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6c:	f043 0220 	orr.w	r2, r3, #32
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004a7a:	e00a      	b.n	8004a92 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a80:	f043 0220 	orr.w	r2, r3, #32
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004a88:	2301      	movs	r3, #1
 8004a8a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004a8e:	e000      	b.n	8004a92 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004a90:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004a9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	376c      	adds	r7, #108	; 0x6c
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	50000400 	.word	0x50000400
 8004ab0:	50000500 	.word	0x50000500
 8004ab4:	20000010 	.word	0x20000010
 8004ab8:	431bde83 	.word	0x431bde83

08004abc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b099      	sub	sp, #100	; 0x64
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ad4:	d102      	bne.n	8004adc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8004ad6:	4b6d      	ldr	r3, [pc, #436]	; (8004c8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004ad8:	60bb      	str	r3, [r7, #8]
 8004ada:	e01a      	b.n	8004b12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a6a      	ldr	r2, [pc, #424]	; (8004c8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d103      	bne.n	8004aee <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8004ae6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004aea:	60bb      	str	r3, [r7, #8]
 8004aec:	e011      	b.n	8004b12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a67      	ldr	r2, [pc, #412]	; (8004c90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d102      	bne.n	8004afe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004af8:	4b66      	ldr	r3, [pc, #408]	; (8004c94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004afa:	60bb      	str	r3, [r7, #8]
 8004afc:	e009      	b.n	8004b12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a64      	ldr	r2, [pc, #400]	; (8004c94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d102      	bne.n	8004b0e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004b08:	4b61      	ldr	r3, [pc, #388]	; (8004c90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	e001      	b.n	8004b12 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0b0      	b.n	8004c7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e0a9      	b.n	8004c7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	f040 808d 	bne.w	8004c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0304 	and.w	r3, r3, #4
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f040 8086 	bne.w	8004c5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004b58:	d004      	beq.n	8004b64 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a4b      	ldr	r2, [pc, #300]	; (8004c8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d101      	bne.n	8004b68 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004b64:	4b4c      	ldr	r3, [pc, #304]	; (8004c98 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8004b66:	e000      	b.n	8004b6a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004b68:	4b4c      	ldr	r3, [pc, #304]	; (8004c9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8004b6a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d040      	beq.n	8004bf6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004b74:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	6859      	ldr	r1, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b86:	035b      	lsls	r3, r3, #13
 8004b88:	430b      	orrs	r3, r1
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b8e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	689b      	ldr	r3, [r3, #8]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d108      	bne.n	8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0301 	and.w	r3, r3, #1
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	d101      	bne.n	8004bb0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004bac:	2301      	movs	r3, #1
 8004bae:	e000      	b.n	8004bb2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d15c      	bne.n	8004c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f003 0303 	and.w	r3, r3, #3
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d107      	bne.n	8004bd2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e000      	b.n	8004bd4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8004bd2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d14b      	bne.n	8004c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004bd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004be0:	f023 030f 	bic.w	r3, r3, #15
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	6811      	ldr	r1, [r2, #0]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	6892      	ldr	r2, [r2, #8]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	431a      	orrs	r2, r3
 8004bf0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bf2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004bf4:	e03c      	b.n	8004c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004bfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c00:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f003 0303 	and.w	r3, r3, #3
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d108      	bne.n	8004c22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f003 0301 	and.w	r3, r3, #1
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d101      	bne.n	8004c22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e000      	b.n	8004c24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004c22:	2300      	movs	r3, #0
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d123      	bne.n	8004c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f003 0303 	and.w	r3, r3, #3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d107      	bne.n	8004c44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0301 	and.w	r3, r3, #1
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d101      	bne.n	8004c44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004c40:	2301      	movs	r3, #1
 8004c42:	e000      	b.n	8004c46 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004c44:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d112      	bne.n	8004c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8004c4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004c52:	f023 030f 	bic.w	r3, r3, #15
 8004c56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c58:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c5a:	e009      	b.n	8004c70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	f043 0220 	orr.w	r2, r3, #32
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004c6e:	e000      	b.n	8004c72 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004c70:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8004c7a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3764      	adds	r7, #100	; 0x64
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	50000100 	.word	0x50000100
 8004c90:	50000400 	.word	0x50000400
 8004c94:	50000500 	.word	0x50000500
 8004c98:	50000300 	.word	0x50000300
 8004c9c:	50000700 	.word	0x50000700

08004ca0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d126      	bne.n	8004d08 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d115      	bne.n	8004d00 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d111      	bne.n	8004d00 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d105      	bne.n	8004d00 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	f043 0201 	orr.w	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f005 fcef 	bl	800a6e4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8004d06:	e004      	b.n	8004d12 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	4798      	blx	r3
}
 8004d12:	bf00      	nop
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}

08004d1a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b084      	sub	sp, #16
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d26:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f7ff f8bb 	bl	8003ea4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8004d2e:	bf00      	nop
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b084      	sub	sp, #16
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d42:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d54:	f043 0204 	orr.w	r2, r3, #4
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004d5c:	68f8      	ldr	r0, [r7, #12]
 8004d5e:	f005 fcd5 	bl	800a70c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d62:	bf00      	nop
 8004d64:	3710      	adds	r7, #16
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
	...

08004d6c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 0303 	and.w	r3, r3, #3
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d108      	bne.n	8004d98 <ADC_Enable+0x2c>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d101      	bne.n	8004d98 <ADC_Enable+0x2c>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e000      	b.n	8004d9a <ADC_Enable+0x2e>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d13c      	bne.n	8004e18 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	689a      	ldr	r2, [r3, #8]
 8004da4:	4b1f      	ldr	r3, [pc, #124]	; (8004e24 <ADC_Enable+0xb8>)
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00d      	beq.n	8004dc8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db0:	f043 0210 	orr.w	r2, r3, #16
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dbc:	f043 0201 	orr.w	r2, r3, #1
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e028      	b.n	8004e1a <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8004dd8:	f7ff f836 	bl	8003e48 <HAL_GetTick>
 8004ddc:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004dde:	e014      	b.n	8004e0a <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004de0:	f7ff f832 	bl	8003e48 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d90d      	bls.n	8004e0a <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	f043 0210 	orr.w	r2, r3, #16
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	f043 0201 	orr.w	r2, r3, #1
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	645a      	str	r2, [r3, #68]	; 0x44
      
        return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e007      	b.n	8004e1a <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d1e3      	bne.n	8004de0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	8000003f 	.word	0x8000003f

08004e28 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e30:	2300      	movs	r3, #0
 8004e32:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d108      	bne.n	8004e54 <ADC_Disable+0x2c>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0301 	and.w	r3, r3, #1
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <ADC_Disable+0x2c>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <ADC_Disable+0x2e>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d040      	beq.n	8004edc <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f003 030d 	and.w	r3, r3, #13
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d10f      	bne.n	8004e88 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689a      	ldr	r2, [r3, #8]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0202 	orr.w	r2, r2, #2
 8004e76:	609a      	str	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8004e80:	f7fe ffe2 	bl	8003e48 <HAL_GetTick>
 8004e84:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004e86:	e022      	b.n	8004ece <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8c:	f043 0210 	orr.w	r2, r3, #16
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e98:	f043 0201 	orr.w	r2, r3, #1
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e01c      	b.n	8004ede <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004ea4:	f7fe ffd0 	bl	8003e48 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d90d      	bls.n	8004ece <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f043 0210 	orr.w	r2, r3, #16
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec2:	f043 0201 	orr.w	r2, r3, #1
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e007      	b.n	8004ede <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b01      	cmp	r3, #1
 8004eda:	d0e3      	beq.n	8004ea4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004edc:	2300      	movs	r3, #0
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
	...

08004ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ef8:	4b0c      	ldr	r3, [pc, #48]	; (8004f2c <__NVIC_SetPriorityGrouping+0x44>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004efe:	68ba      	ldr	r2, [r7, #8]
 8004f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004f04:	4013      	ands	r3, r2
 8004f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004f1a:	4a04      	ldr	r2, [pc, #16]	; (8004f2c <__NVIC_SetPriorityGrouping+0x44>)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	60d3      	str	r3, [r2, #12]
}
 8004f20:	bf00      	nop
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	e000ed00 	.word	0xe000ed00

08004f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004f34:	4b04      	ldr	r3, [pc, #16]	; (8004f48 <__NVIC_GetPriorityGrouping+0x18>)
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	0a1b      	lsrs	r3, r3, #8
 8004f3a:	f003 0307 	and.w	r3, r3, #7
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	e000ed00 	.word	0xe000ed00

08004f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	4603      	mov	r3, r0
 8004f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	db0b      	blt.n	8004f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	f003 021f 	and.w	r2, r3, #31
 8004f64:	4907      	ldr	r1, [pc, #28]	; (8004f84 <__NVIC_EnableIRQ+0x38>)
 8004f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f6a:	095b      	lsrs	r3, r3, #5
 8004f6c:	2001      	movs	r0, #1
 8004f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8004f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004f76:	bf00      	nop
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	e000e100 	.word	0xe000e100

08004f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	4603      	mov	r3, r0
 8004f90:	6039      	str	r1, [r7, #0]
 8004f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	db0a      	blt.n	8004fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	490c      	ldr	r1, [pc, #48]	; (8004fd4 <__NVIC_SetPriority+0x4c>)
 8004fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004fa6:	0112      	lsls	r2, r2, #4
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	440b      	add	r3, r1
 8004fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004fb0:	e00a      	b.n	8004fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	4908      	ldr	r1, [pc, #32]	; (8004fd8 <__NVIC_SetPriority+0x50>)
 8004fb8:	79fb      	ldrb	r3, [r7, #7]
 8004fba:	f003 030f 	and.w	r3, r3, #15
 8004fbe:	3b04      	subs	r3, #4
 8004fc0:	0112      	lsls	r2, r2, #4
 8004fc2:	b2d2      	uxtb	r2, r2
 8004fc4:	440b      	add	r3, r1
 8004fc6:	761a      	strb	r2, [r3, #24]
}
 8004fc8:	bf00      	nop
 8004fca:	370c      	adds	r7, #12
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	e000e100 	.word	0xe000e100
 8004fd8:	e000ed00 	.word	0xe000ed00

08004fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b089      	sub	sp, #36	; 0x24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	f1c3 0307 	rsb	r3, r3, #7
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	bf28      	it	cs
 8004ffa:	2304      	movcs	r3, #4
 8004ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3304      	adds	r3, #4
 8005002:	2b06      	cmp	r3, #6
 8005004:	d902      	bls.n	800500c <NVIC_EncodePriority+0x30>
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	3b03      	subs	r3, #3
 800500a:	e000      	b.n	800500e <NVIC_EncodePriority+0x32>
 800500c:	2300      	movs	r3, #0
 800500e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005014:	69bb      	ldr	r3, [r7, #24]
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43da      	mvns	r2, r3
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	401a      	ands	r2, r3
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005024:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	fa01 f303 	lsl.w	r3, r1, r3
 800502e:	43d9      	mvns	r1, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005034:	4313      	orrs	r3, r2
         );
}
 8005036:	4618      	mov	r0, r3
 8005038:	3724      	adds	r7, #36	; 0x24
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr
	...

08005044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	3b01      	subs	r3, #1
 8005050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005054:	d301      	bcc.n	800505a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005056:	2301      	movs	r3, #1
 8005058:	e00f      	b.n	800507a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800505a:	4a0a      	ldr	r2, [pc, #40]	; (8005084 <SysTick_Config+0x40>)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	3b01      	subs	r3, #1
 8005060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005062:	210f      	movs	r1, #15
 8005064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005068:	f7ff ff8e 	bl	8004f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800506c:	4b05      	ldr	r3, [pc, #20]	; (8005084 <SysTick_Config+0x40>)
 800506e:	2200      	movs	r2, #0
 8005070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005072:	4b04      	ldr	r3, [pc, #16]	; (8005084 <SysTick_Config+0x40>)
 8005074:	2207      	movs	r2, #7
 8005076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	e000e010 	.word	0xe000e010

08005088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f7ff ff29 	bl	8004ee8 <__NVIC_SetPriorityGrouping>
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b086      	sub	sp, #24
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	4603      	mov	r3, r0
 80050a6:	60b9      	str	r1, [r7, #8]
 80050a8:	607a      	str	r2, [r7, #4]
 80050aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80050b0:	f7ff ff3e 	bl	8004f30 <__NVIC_GetPriorityGrouping>
 80050b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	68b9      	ldr	r1, [r7, #8]
 80050ba:	6978      	ldr	r0, [r7, #20]
 80050bc:	f7ff ff8e 	bl	8004fdc <NVIC_EncodePriority>
 80050c0:	4602      	mov	r2, r0
 80050c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80050c6:	4611      	mov	r1, r2
 80050c8:	4618      	mov	r0, r3
 80050ca:	f7ff ff5d 	bl	8004f88 <__NVIC_SetPriority>
}
 80050ce:	bf00      	nop
 80050d0:	3718      	adds	r7, #24
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	4603      	mov	r3, r0
 80050de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80050e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7ff ff31 	bl	8004f4c <__NVIC_EnableIRQ>
}
 80050ea:	bf00      	nop
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b082      	sub	sp, #8
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f7ff ffa2 	bl	8005044 <SysTick_Config>
 8005100:	4603      	mov	r3, r0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}

0800510a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 800510a:	b580      	push	{r7, lr}
 800510c:	b084      	sub	sp, #16
 800510e:	af00      	add	r7, sp, #0
 8005110:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e037      	b.n	8005190 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2202      	movs	r2, #2
 8005124:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005136:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800513a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8005144:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005150:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800515c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	69db      	ldr	r3, [r3, #28]
 8005162:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	4313      	orrs	r3, r2
 8005168:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 f97e 	bl	8005474 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}  
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b086      	sub	sp, #24
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]
 80051a4:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80051a6:	2300      	movs	r3, #0
 80051a8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d101      	bne.n	80051b8 <HAL_DMA_Start_IT+0x20>
 80051b4:	2302      	movs	r3, #2
 80051b6:	e04a      	b.n	800524e <HAL_DMA_Start_IT+0xb6>
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d13a      	bne.n	8005240 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2202      	movs	r2, #2
 80051ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0201 	bic.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	68f8      	ldr	r0, [r7, #12]
 80051f0:	f000 f912 	bl	8005418 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d008      	beq.n	800520e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f042 020e 	orr.w	r2, r2, #14
 800520a:	601a      	str	r2, [r3, #0]
 800520c:	e00f      	b.n	800522e <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f042 020a 	orr.w	r2, r2, #10
 800521c:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0204 	bic.w	r2, r2, #4
 800522c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f042 0201 	orr.w	r2, r2, #1
 800523c:	601a      	str	r2, [r3, #0]
 800523e:	e005      	b.n	800524c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	2200      	movs	r2, #0
 8005244:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8005248:	2302      	movs	r3, #2
 800524a:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 800524c:	7dfb      	ldrb	r3, [r7, #23]
} 
 800524e:	4618      	mov	r0, r3
 8005250:	3718      	adds	r7, #24
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8005256:	b580      	push	{r7, lr}
 8005258:	b084      	sub	sp, #16
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005268:	2b02      	cmp	r3, #2
 800526a:	d005      	beq.n	8005278 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2204      	movs	r2, #4
 8005270:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	73fb      	strb	r3, [r7, #15]
 8005276:	e027      	b.n	80052c8 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 020e 	bic.w	r2, r2, #14
 8005286:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f022 0201 	bic.w	r2, r2, #1
 8005296:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a0:	2101      	movs	r1, #1
 80052a2:	fa01 f202 	lsl.w	r2, r1, r2
 80052a6:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d003      	beq.n	80052c8 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	4798      	blx	r3
    } 
  }
  return status;
 80052c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	2204      	movs	r2, #4
 80052f0:	409a      	lsls	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4013      	ands	r3, r2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d024      	beq.n	8005344 <HAL_DMA_IRQHandler+0x72>
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d01f      	beq.n	8005344 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f003 0320 	and.w	r3, r3, #32
 800530e:	2b00      	cmp	r3, #0
 8005310:	d107      	bne.n	8005322 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f022 0204 	bic.w	r2, r2, #4
 8005320:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800532a:	2104      	movs	r1, #4
 800532c:	fa01 f202 	lsl.w	r2, r1, r2
 8005330:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005336:	2b00      	cmp	r3, #0
 8005338:	d06a      	beq.n	8005410 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005342:	e065      	b.n	8005410 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	2202      	movs	r2, #2
 800534a:	409a      	lsls	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4013      	ands	r3, r2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d02c      	beq.n	80053ae <HAL_DMA_IRQHandler+0xdc>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d027      	beq.n	80053ae <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10b      	bne.n	8005384 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681a      	ldr	r2, [r3, #0]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 020a 	bic.w	r2, r2, #10
 800537a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800538c:	2102      	movs	r1, #2
 800538e:	fa01 f202 	lsl.w	r2, r1, r2
 8005392:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d035      	beq.n	8005410 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80053ac:	e030      	b.n	8005410 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b2:	2208      	movs	r2, #8
 80053b4:	409a      	lsls	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d028      	beq.n	8005410 <HAL_DMA_IRQHandler+0x13e>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d023      	beq.n	8005410 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f022 020e 	bic.w	r2, r2, #14
 80053d6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053e0:	2101      	movs	r1, #1
 80053e2:	fa01 f202 	lsl.w	r2, r1, r2
 80053e6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	4798      	blx	r3
    }
  }
}  
 800540e:	e7ff      	b.n	8005410 <HAL_DMA_IRQHandler+0x13e>
 8005410:	bf00      	nop
 8005412:	3710      	adds	r7, #16
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005418:	b480      	push	{r7}
 800541a:	b085      	sub	sp, #20
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	607a      	str	r2, [r7, #4]
 8005424:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800542e:	2101      	movs	r1, #1
 8005430:	fa01 f202 	lsl.w	r2, r1, r2
 8005434:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2b10      	cmp	r3, #16
 8005444:	d108      	bne.n	8005458 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	687a      	ldr	r2, [r7, #4]
 800544c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	68ba      	ldr	r2, [r7, #8]
 8005454:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005456:	e007      	b.n	8005468 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68ba      	ldr	r2, [r7, #8]
 800545e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	60da      	str	r2, [r3, #12]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	461a      	mov	r2, r3
 8005482:	4b14      	ldr	r3, [pc, #80]	; (80054d4 <DMA_CalcBaseAndBitshift+0x60>)
 8005484:	429a      	cmp	r2, r3
 8005486:	d80f      	bhi.n	80054a8 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	461a      	mov	r2, r3
 800548e:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <DMA_CalcBaseAndBitshift+0x64>)
 8005490:	4413      	add	r3, r2
 8005492:	4a12      	ldr	r2, [pc, #72]	; (80054dc <DMA_CalcBaseAndBitshift+0x68>)
 8005494:	fba2 2303 	umull	r2, r3, r2, r3
 8005498:	091b      	lsrs	r3, r3, #4
 800549a:	009a      	lsls	r2, r3, #2
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a0f      	ldr	r2, [pc, #60]	; (80054e0 <DMA_CalcBaseAndBitshift+0x6c>)
 80054a4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80054a6:	e00e      	b.n	80054c6 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	461a      	mov	r2, r3
 80054ae:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <DMA_CalcBaseAndBitshift+0x70>)
 80054b0:	4413      	add	r3, r2
 80054b2:	4a0a      	ldr	r2, [pc, #40]	; (80054dc <DMA_CalcBaseAndBitshift+0x68>)
 80054b4:	fba2 2303 	umull	r2, r3, r2, r3
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	009a      	lsls	r2, r3, #2
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a09      	ldr	r2, [pc, #36]	; (80054e8 <DMA_CalcBaseAndBitshift+0x74>)
 80054c4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80054c6:	bf00      	nop
 80054c8:	370c      	adds	r7, #12
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
 80054d2:	bf00      	nop
 80054d4:	40020407 	.word	0x40020407
 80054d8:	bffdfff8 	.word	0xbffdfff8
 80054dc:	cccccccd 	.word	0xcccccccd
 80054e0:	40020000 	.word	0x40020000
 80054e4:	bffdfbf8 	.word	0xbffdfbf8
 80054e8:	40020400 	.word	0x40020400

080054ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b087      	sub	sp, #28
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80054f6:	2300      	movs	r3, #0
 80054f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054fa:	e160      	b.n	80057be <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	2101      	movs	r1, #1
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	fa01 f303 	lsl.w	r3, r1, r3
 8005508:	4013      	ands	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 8152 	beq.w	80057b8 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b02      	cmp	r3, #2
 800551a:	d003      	beq.n	8005524 <HAL_GPIO_Init+0x38>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b12      	cmp	r3, #18
 8005522:	d123      	bne.n	800556c <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	08da      	lsrs	r2, r3, #3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	3208      	adds	r2, #8
 800552c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005530:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 0307 	and.w	r3, r3, #7
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	220f      	movs	r2, #15
 800553c:	fa02 f303 	lsl.w	r3, r2, r3
 8005540:	43db      	mvns	r3, r3
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4013      	ands	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	691a      	ldr	r2, [r3, #16]
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f003 0307 	and.w	r3, r3, #7
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	08da      	lsrs	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3208      	adds	r2, #8
 8005566:	6939      	ldr	r1, [r7, #16]
 8005568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	2203      	movs	r2, #3
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43db      	mvns	r3, r3
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4013      	ands	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	f003 0203 	and.w	r2, r3, #3
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	005b      	lsls	r3, r3, #1
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	4313      	orrs	r3, r2
 8005598:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d00b      	beq.n	80055c0 <HAL_GPIO_Init+0xd4>
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d007      	beq.n	80055c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80055b4:	2b11      	cmp	r3, #17
 80055b6:	d003      	beq.n	80055c0 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2b12      	cmp	r3, #18
 80055be:	d130      	bne.n	8005622 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	005b      	lsls	r3, r3, #1
 80055ca:	2203      	movs	r2, #3
 80055cc:	fa02 f303 	lsl.w	r3, r2, r3
 80055d0:	43db      	mvns	r3, r3
 80055d2:	693a      	ldr	r2, [r7, #16]
 80055d4:	4013      	ands	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	68da      	ldr	r2, [r3, #12]
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	005b      	lsls	r3, r3, #1
 80055e0:	fa02 f303 	lsl.w	r3, r2, r3
 80055e4:	693a      	ldr	r2, [r7, #16]
 80055e6:	4313      	orrs	r3, r2
 80055e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80055f6:	2201      	movs	r2, #1
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43db      	mvns	r3, r3
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	4013      	ands	r3, r2
 8005604:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	091b      	lsrs	r3, r3, #4
 800560c:	f003 0201 	and.w	r2, r3, #1
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	2203      	movs	r2, #3
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	43db      	mvns	r3, r3
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4013      	ands	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	fa02 f303 	lsl.w	r3, r2, r3
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	4313      	orrs	r3, r2
 800564a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800565a:	2b00      	cmp	r3, #0
 800565c:	f000 80ac 	beq.w	80057b8 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005660:	4b5e      	ldr	r3, [pc, #376]	; (80057dc <HAL_GPIO_Init+0x2f0>)
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	4a5d      	ldr	r2, [pc, #372]	; (80057dc <HAL_GPIO_Init+0x2f0>)
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	6193      	str	r3, [r2, #24]
 800566c:	4b5b      	ldr	r3, [pc, #364]	; (80057dc <HAL_GPIO_Init+0x2f0>)
 800566e:	699b      	ldr	r3, [r3, #24]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005678:	4a59      	ldr	r2, [pc, #356]	; (80057e0 <HAL_GPIO_Init+0x2f4>)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	089b      	lsrs	r3, r3, #2
 800567e:	3302      	adds	r3, #2
 8005680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005684:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f003 0303 	and.w	r3, r3, #3
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	220f      	movs	r2, #15
 8005690:	fa02 f303 	lsl.w	r3, r2, r3
 8005694:	43db      	mvns	r3, r3
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4013      	ands	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80056a2:	d025      	beq.n	80056f0 <HAL_GPIO_Init+0x204>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a4f      	ldr	r2, [pc, #316]	; (80057e4 <HAL_GPIO_Init+0x2f8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d01f      	beq.n	80056ec <HAL_GPIO_Init+0x200>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a4e      	ldr	r2, [pc, #312]	; (80057e8 <HAL_GPIO_Init+0x2fc>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d019      	beq.n	80056e8 <HAL_GPIO_Init+0x1fc>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a4d      	ldr	r2, [pc, #308]	; (80057ec <HAL_GPIO_Init+0x300>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d013      	beq.n	80056e4 <HAL_GPIO_Init+0x1f8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a4c      	ldr	r2, [pc, #304]	; (80057f0 <HAL_GPIO_Init+0x304>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d00d      	beq.n	80056e0 <HAL_GPIO_Init+0x1f4>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a4b      	ldr	r2, [pc, #300]	; (80057f4 <HAL_GPIO_Init+0x308>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d007      	beq.n	80056dc <HAL_GPIO_Init+0x1f0>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a4a      	ldr	r2, [pc, #296]	; (80057f8 <HAL_GPIO_Init+0x30c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d101      	bne.n	80056d8 <HAL_GPIO_Init+0x1ec>
 80056d4:	2306      	movs	r3, #6
 80056d6:	e00c      	b.n	80056f2 <HAL_GPIO_Init+0x206>
 80056d8:	2307      	movs	r3, #7
 80056da:	e00a      	b.n	80056f2 <HAL_GPIO_Init+0x206>
 80056dc:	2305      	movs	r3, #5
 80056de:	e008      	b.n	80056f2 <HAL_GPIO_Init+0x206>
 80056e0:	2304      	movs	r3, #4
 80056e2:	e006      	b.n	80056f2 <HAL_GPIO_Init+0x206>
 80056e4:	2303      	movs	r3, #3
 80056e6:	e004      	b.n	80056f2 <HAL_GPIO_Init+0x206>
 80056e8:	2302      	movs	r3, #2
 80056ea:	e002      	b.n	80056f2 <HAL_GPIO_Init+0x206>
 80056ec:	2301      	movs	r3, #1
 80056ee:	e000      	b.n	80056f2 <HAL_GPIO_Init+0x206>
 80056f0:	2300      	movs	r3, #0
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	f002 0203 	and.w	r2, r2, #3
 80056f8:	0092      	lsls	r2, r2, #2
 80056fa:	4093      	lsls	r3, r2
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005702:	4937      	ldr	r1, [pc, #220]	; (80057e0 <HAL_GPIO_Init+0x2f4>)
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	089b      	lsrs	r3, r3, #2
 8005708:	3302      	adds	r3, #2
 800570a:	693a      	ldr	r2, [r7, #16]
 800570c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005710:	4b3a      	ldr	r3, [pc, #232]	; (80057fc <HAL_GPIO_Init+0x310>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	43db      	mvns	r3, r3
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4013      	ands	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	685b      	ldr	r3, [r3, #4]
 8005724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4313      	orrs	r3, r2
 8005732:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005734:	4a31      	ldr	r2, [pc, #196]	; (80057fc <HAL_GPIO_Init+0x310>)
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800573a:	4b30      	ldr	r3, [pc, #192]	; (80057fc <HAL_GPIO_Init+0x310>)
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	43db      	mvns	r3, r3
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4013      	ands	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800575e:	4a27      	ldr	r2, [pc, #156]	; (80057fc <HAL_GPIO_Init+0x310>)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005764:	4b25      	ldr	r3, [pc, #148]	; (80057fc <HAL_GPIO_Init+0x310>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	43db      	mvns	r3, r3
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4013      	ands	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800577c:	2b00      	cmp	r3, #0
 800577e:	d003      	beq.n	8005788 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005788:	4a1c      	ldr	r2, [pc, #112]	; (80057fc <HAL_GPIO_Init+0x310>)
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800578e:	4b1b      	ldr	r3, [pc, #108]	; (80057fc <HAL_GPIO_Init+0x310>)
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	43db      	mvns	r3, r3
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4013      	ands	r3, r2
 800579c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80057b2:	4a12      	ldr	r2, [pc, #72]	; (80057fc <HAL_GPIO_Init+0x310>)
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	3301      	adds	r3, #1
 80057bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	fa22 f303 	lsr.w	r3, r2, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f47f ae97 	bne.w	80054fc <HAL_GPIO_Init+0x10>
  }
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	40021000 	.word	0x40021000
 80057e0:	40010000 	.word	0x40010000
 80057e4:	48000400 	.word	0x48000400
 80057e8:	48000800 	.word	0x48000800
 80057ec:	48000c00 	.word	0x48000c00
 80057f0:	48001000 	.word	0x48001000
 80057f4:	48001400 	.word	0x48001400
 80057f8:	48001800 	.word	0x48001800
 80057fc:	40010400 	.word	0x40010400

08005800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	460b      	mov	r3, r1
 800580a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	691a      	ldr	r2, [r3, #16]
 8005810:	887b      	ldrh	r3, [r7, #2]
 8005812:	4013      	ands	r3, r2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
 800581c:	e001      	b.n	8005822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800581e:	2300      	movs	r3, #0
 8005820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005822:	7bfb      	ldrb	r3, [r7, #15]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
 8005838:	460b      	mov	r3, r1
 800583a:	807b      	strh	r3, [r7, #2]
 800583c:	4613      	mov	r3, r2
 800583e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005840:	787b      	ldrb	r3, [r7, #1]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005846:	887a      	ldrh	r2, [r7, #2]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800584c:	e002      	b.n	8005854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800584e:	887a      	ldrh	r2, [r7, #2]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b082      	sub	sp, #8
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d101      	bne.n	8005872 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e081      	b.n	8005976 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d106      	bne.n	800588c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005886:	6878      	ldr	r0, [r7, #4]
 8005888:	f005 f83a 	bl	800a900 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2224      	movs	r2, #36	; 0x24
 8005890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f022 0201 	bic.w	r2, r2, #1
 80058a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80058b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689a      	ldr	r2, [r3, #8]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80058c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d107      	bne.n	80058da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689a      	ldr	r2, [r3, #8]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80058d6:	609a      	str	r2, [r3, #8]
 80058d8:	e006      	b.n	80058e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	689a      	ldr	r2, [r3, #8]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80058e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	2b02      	cmp	r3, #2
 80058ee:	d104      	bne.n	80058fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6812      	ldr	r2, [r2, #0]
 8005904:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005908:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800590c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800591c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	ea42 0103 	orr.w	r1, r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	021a      	lsls	r2, r3, #8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69d9      	ldr	r1, [r3, #28]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1a      	ldr	r2, [r3, #32]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0201 	orr.w	r2, r2, #1
 8005956:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2220      	movs	r2, #32
 8005962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af02      	add	r7, sp, #8
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	607a      	str	r2, [r7, #4]
 800598a:	461a      	mov	r2, r3
 800598c:	460b      	mov	r3, r1
 800598e:	817b      	strh	r3, [r7, #10]
 8005990:	4613      	mov	r3, r2
 8005992:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b20      	cmp	r3, #32
 800599e:	f040 80da 	bne.w	8005b56 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d101      	bne.n	80059b0 <HAL_I2C_Master_Transmit+0x30>
 80059ac:	2302      	movs	r3, #2
 80059ae:	e0d3      	b.n	8005b58 <HAL_I2C_Master_Transmit+0x1d8>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2201      	movs	r2, #1
 80059b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059b8:	f7fe fa46 	bl	8003e48 <HAL_GetTick>
 80059bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	2319      	movs	r3, #25
 80059c4:	2201      	movs	r2, #1
 80059c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059ca:	68f8      	ldr	r0, [r7, #12]
 80059cc:	f000 f9e6 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 80059d0:	4603      	mov	r3, r0
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d001      	beq.n	80059da <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e0be      	b.n	8005b58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2221      	movs	r2, #33	; 0x21
 80059de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2210      	movs	r2, #16
 80059e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	2200      	movs	r2, #0
 80059ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	893a      	ldrh	r2, [r7, #8]
 80059fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2bff      	cmp	r3, #255	; 0xff
 8005a0a:	d90e      	bls.n	8005a2a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	22ff      	movs	r2, #255	; 0xff
 8005a10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a16:	b2da      	uxtb	r2, r3
 8005a18:	8979      	ldrh	r1, [r7, #10]
 8005a1a:	4b51      	ldr	r3, [pc, #324]	; (8005b60 <HAL_I2C_Master_Transmit+0x1e0>)
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a22:	68f8      	ldr	r0, [r7, #12]
 8005a24:	f000 fb48 	bl	80060b8 <I2C_TransferConfig>
 8005a28:	e06c      	b.n	8005b04 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	8979      	ldrh	r1, [r7, #10]
 8005a3c:	4b48      	ldr	r3, [pc, #288]	; (8005b60 <HAL_I2C_Master_Transmit+0x1e0>)
 8005a3e:	9300      	str	r3, [sp, #0]
 8005a40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fb37 	bl	80060b8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005a4a:	e05b      	b.n	8005b04 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	6a39      	ldr	r1, [r7, #32]
 8005a50:	68f8      	ldr	r0, [r7, #12]
 8005a52:	f000 f9e3 	bl	8005e1c <I2C_WaitOnTXISFlagUntilTimeout>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	e07b      	b.n	8005b58 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	1c5a      	adds	r2, r3, #1
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a7a:	b29b      	uxth	r3, r3
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a88:	3b01      	subs	r3, #1
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d034      	beq.n	8005b04 <HAL_I2C_Master_Transmit+0x184>
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d130      	bne.n	8005b04 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2180      	movs	r1, #128	; 0x80
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f975 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e04d      	b.n	8005b58 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2bff      	cmp	r3, #255	; 0xff
 8005ac4:	d90e      	bls.n	8005ae4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	22ff      	movs	r2, #255	; 0xff
 8005aca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	8979      	ldrh	r1, [r7, #10]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 faeb 	bl	80060b8 <I2C_TransferConfig>
 8005ae2:	e00f      	b.n	8005b04 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae8:	b29a      	uxth	r2, r3
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af2:	b2da      	uxtb	r2, r3
 8005af4:	8979      	ldrh	r1, [r7, #10]
 8005af6:	2300      	movs	r3, #0
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 fada 	bl	80060b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d19e      	bne.n	8005a4c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	6a39      	ldr	r1, [r7, #32]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f9c2 	bl	8005e9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d001      	beq.n	8005b22 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e01a      	b.n	8005b58 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	2220      	movs	r2, #32
 8005b28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	6859      	ldr	r1, [r3, #4]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	4b0b      	ldr	r3, [pc, #44]	; (8005b64 <HAL_I2C_Master_Transmit+0x1e4>)
 8005b36:	400b      	ands	r3, r1
 8005b38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e000      	b.n	8005b58 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
  }
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3718      	adds	r7, #24
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	80002000 	.word	0x80002000
 8005b64:	fe00e800 	.word	0xfe00e800

08005b68 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b088      	sub	sp, #32
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	607a      	str	r2, [r7, #4]
 8005b72:	461a      	mov	r2, r3
 8005b74:	460b      	mov	r3, r1
 8005b76:	817b      	strh	r3, [r7, #10]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	2b20      	cmp	r3, #32
 8005b86:	f040 80db 	bne.w	8005d40 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_I2C_Master_Receive+0x30>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e0d4      	b.n	8005d42 <HAL_I2C_Master_Receive+0x1da>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ba0:	f7fe f952 	bl	8003e48 <HAL_GetTick>
 8005ba4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	2319      	movs	r3, #25
 8005bac:	2201      	movs	r2, #1
 8005bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f000 f8f2 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d001      	beq.n	8005bc2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e0bf      	b.n	8005d42 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2222      	movs	r2, #34	; 0x22
 8005bc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2210      	movs	r2, #16
 8005bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	687a      	ldr	r2, [r7, #4]
 8005bdc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	893a      	ldrh	r2, [r7, #8]
 8005be2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	2bff      	cmp	r3, #255	; 0xff
 8005bf2:	d90e      	bls.n	8005c12 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	22ff      	movs	r2, #255	; 0xff
 8005bf8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	8979      	ldrh	r1, [r7, #10]
 8005c02:	4b52      	ldr	r3, [pc, #328]	; (8005d4c <HAL_I2C_Master_Receive+0x1e4>)
 8005c04:	9300      	str	r3, [sp, #0]
 8005c06:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fa54 	bl	80060b8 <I2C_TransferConfig>
 8005c10:	e06d      	b.n	8005cee <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	8979      	ldrh	r1, [r7, #10]
 8005c24:	4b49      	ldr	r3, [pc, #292]	; (8005d4c <HAL_I2C_Master_Receive+0x1e4>)
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f000 fa43 	bl	80060b8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8005c32:	e05c      	b.n	8005cee <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	6a39      	ldr	r1, [r7, #32]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f96b 	bl	8005f14 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d001      	beq.n	8005c48 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	e07c      	b.n	8005d42 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d034      	beq.n	8005cee <HAL_I2C_Master_Receive+0x186>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d130      	bne.n	8005cee <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	9300      	str	r3, [sp, #0]
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	2200      	movs	r2, #0
 8005c94:	2180      	movs	r1, #128	; 0x80
 8005c96:	68f8      	ldr	r0, [r7, #12]
 8005c98:	f000 f880 	bl	8005d9c <I2C_WaitOnFlagUntilTimeout>
 8005c9c:	4603      	mov	r3, r0
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d001      	beq.n	8005ca6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e04d      	b.n	8005d42 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2bff      	cmp	r3, #255	; 0xff
 8005cae:	d90e      	bls.n	8005cce <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	22ff      	movs	r2, #255	; 0xff
 8005cb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cba:	b2da      	uxtb	r2, r3
 8005cbc:	8979      	ldrh	r1, [r7, #10]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	9300      	str	r3, [sp, #0]
 8005cc2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	f000 f9f6 	bl	80060b8 <I2C_TransferConfig>
 8005ccc:	e00f      	b.n	8005cee <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	8979      	ldrh	r1, [r7, #10]
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ce8:	68f8      	ldr	r0, [r7, #12]
 8005cea:	f000 f9e5 	bl	80060b8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d19d      	bne.n	8005c34 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cf8:	697a      	ldr	r2, [r7, #20]
 8005cfa:	6a39      	ldr	r1, [r7, #32]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f8cd 	bl	8005e9c <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d001      	beq.n	8005d0c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e01a      	b.n	8005d42 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2220      	movs	r2, #32
 8005d12:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	6859      	ldr	r1, [r3, #4]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <HAL_I2C_Master_Receive+0x1e8>)
 8005d20:	400b      	ands	r3, r1
 8005d22:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2220      	movs	r2, #32
 8005d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005d40:	2302      	movs	r3, #2
  }
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	80002400 	.word	0x80002400
 8005d50:	fe00e800 	.word	0xfe00e800

08005d54 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b083      	sub	sp, #12
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699b      	ldr	r3, [r3, #24]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b02      	cmp	r3, #2
 8005d68:	d103      	bne.n	8005d72 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d007      	beq.n	8005d90 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	699a      	ldr	r2, [r3, #24]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	619a      	str	r2, [r3, #24]
  }
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	4613      	mov	r3, r2
 8005daa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dac:	e022      	b.n	8005df4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005db4:	d01e      	beq.n	8005df4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005db6:	f7fe f847 	bl	8003e48 <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	69bb      	ldr	r3, [r7, #24]
 8005dbe:	1ad3      	subs	r3, r2, r3
 8005dc0:	683a      	ldr	r2, [r7, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d302      	bcc.n	8005dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d113      	bne.n	8005df4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dd0:	f043 0220 	orr.w	r2, r3, #32
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2220      	movs	r2, #32
 8005ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2200      	movs	r2, #0
 8005dec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	e00f      	b.n	8005e14 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d0cd      	beq.n	8005dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b084      	sub	sp, #16
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e28:	e02c      	b.n	8005e84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	68b9      	ldr	r1, [r7, #8]
 8005e2e:	68f8      	ldr	r0, [r7, #12]
 8005e30:	f000 f8dc 	bl	8005fec <I2C_IsAcknowledgeFailed>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d001      	beq.n	8005e3e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e02a      	b.n	8005e94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e44:	d01e      	beq.n	8005e84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e46:	f7fd ffff 	bl	8003e48 <HAL_GetTick>
 8005e4a:	4602      	mov	r2, r0
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d302      	bcc.n	8005e5c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d113      	bne.n	8005e84 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e60:	f043 0220 	orr.w	r2, r3, #32
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e007      	b.n	8005e94 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b02      	cmp	r3, #2
 8005e90:	d1cb      	bne.n	8005e2a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ea8:	e028      	b.n	8005efc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	68b9      	ldr	r1, [r7, #8]
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 f89c 	bl	8005fec <I2C_IsAcknowledgeFailed>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e026      	b.n	8005f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ebe:	f7fd ffc3 	bl	8003e48 <HAL_GetTick>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	1ad3      	subs	r3, r2, r3
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d302      	bcc.n	8005ed4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d113      	bne.n	8005efc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ed8:	f043 0220 	orr.w	r2, r3, #32
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e007      	b.n	8005f0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699b      	ldr	r3, [r3, #24]
 8005f02:	f003 0320 	and.w	r3, r3, #32
 8005f06:	2b20      	cmp	r3, #32
 8005f08:	d1cf      	bne.n	8005eaa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005f0a:	2300      	movs	r3, #0
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}

08005f14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	b084      	sub	sp, #16
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	60f8      	str	r0, [r7, #12]
 8005f1c:	60b9      	str	r1, [r7, #8]
 8005f1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005f20:	e055      	b.n	8005fce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f22:	687a      	ldr	r2, [r7, #4]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 f860 	bl	8005fec <I2C_IsAcknowledgeFailed>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e053      	b.n	8005fde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	699b      	ldr	r3, [r3, #24]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b20      	cmp	r3, #32
 8005f42:	d129      	bne.n	8005f98 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	f003 0304 	and.w	r3, r3, #4
 8005f4e:	2b04      	cmp	r3, #4
 8005f50:	d105      	bne.n	8005f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e03f      	b.n	8005fde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2220      	movs	r2, #32
 8005f64:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6859      	ldr	r1, [r3, #4]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	4b1d      	ldr	r3, [pc, #116]	; (8005fe8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005f72:	400b      	ands	r3, r1
 8005f74:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2220      	movs	r2, #32
 8005f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e022      	b.n	8005fde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f98:	f7fd ff56 	bl	8003e48 <HAL_GetTick>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	1ad3      	subs	r3, r2, r3
 8005fa2:	68ba      	ldr	r2, [r7, #8]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d302      	bcc.n	8005fae <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d10f      	bne.n	8005fce <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	f043 0220 	orr.w	r2, r3, #32
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005fca:	2301      	movs	r3, #1
 8005fcc:	e007      	b.n	8005fde <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d1a2      	bne.n	8005f22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	fe00e800 	.word	0xfe00e800

08005fec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	f003 0310 	and.w	r3, r3, #16
 8006002:	2b10      	cmp	r3, #16
 8006004:	d151      	bne.n	80060aa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006006:	e022      	b.n	800604e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800600e:	d01e      	beq.n	800604e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006010:	f7fd ff1a 	bl	8003e48 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	429a      	cmp	r2, r3
 800601e:	d302      	bcc.n	8006026 <I2C_IsAcknowledgeFailed+0x3a>
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d113      	bne.n	800604e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800602a:	f043 0220 	orr.w	r2, r3, #32
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e02e      	b.n	80060ac <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	f003 0320 	and.w	r3, r3, #32
 8006058:	2b20      	cmp	r3, #32
 800605a:	d1d5      	bne.n	8006008 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2210      	movs	r2, #16
 8006062:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2220      	movs	r2, #32
 800606a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800606c:	68f8      	ldr	r0, [r7, #12]
 800606e:	f7ff fe71 	bl	8005d54 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	6859      	ldr	r1, [r3, #4]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	4b0d      	ldr	r3, [pc, #52]	; (80060b4 <I2C_IsAcknowledgeFailed+0xc8>)
 800607e:	400b      	ands	r3, r1
 8006080:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006086:	f043 0204 	orr.w	r2, r3, #4
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2220      	movs	r2, #32
 8006092:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	fe00e800 	.word	0xfe00e800

080060b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	607b      	str	r3, [r7, #4]
 80060c2:	460b      	mov	r3, r1
 80060c4:	817b      	strh	r3, [r7, #10]
 80060c6:	4613      	mov	r3, r2
 80060c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	0d5b      	lsrs	r3, r3, #21
 80060d4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80060d8:	4b0d      	ldr	r3, [pc, #52]	; (8006110 <I2C_TransferConfig+0x58>)
 80060da:	430b      	orrs	r3, r1
 80060dc:	43db      	mvns	r3, r3
 80060de:	ea02 0103 	and.w	r1, r2, r3
 80060e2:	897b      	ldrh	r3, [r7, #10]
 80060e4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80060e8:	7a7b      	ldrb	r3, [r7, #9]
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80060f0:	431a      	orrs	r2, r3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	431a      	orrs	r2, r3
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	431a      	orrs	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006102:	bf00      	nop
 8006104:	3714      	adds	r7, #20
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	03ff63ff 	.word	0x03ff63ff

08006114 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b20      	cmp	r3, #32
 8006128:	d138      	bne.n	800619c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006134:	2302      	movs	r3, #2
 8006136:	e032      	b.n	800619e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2224      	movs	r2, #36	; 0x24
 8006144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0201 	bic.w	r2, r2, #1
 8006156:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006166:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6819      	ldr	r1, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	683a      	ldr	r2, [r7, #0]
 8006174:	430a      	orrs	r2, r1
 8006176:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0201 	orr.w	r2, r2, #1
 8006186:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	e000      	b.n	800619e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800619c:	2302      	movs	r3, #2
  }
}
 800619e:	4618      	mov	r0, r3
 80061a0:	370c      	adds	r7, #12
 80061a2:	46bd      	mov	sp, r7
 80061a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a8:	4770      	bx	lr

080061aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061aa:	b480      	push	{r7}
 80061ac:	b085      	sub	sp, #20
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	2b20      	cmp	r3, #32
 80061be:	d139      	bne.n	8006234 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e033      	b.n	8006236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2224      	movs	r2, #36	; 0x24
 80061da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0201 	bic.w	r2, r2, #1
 80061ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80061fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	681a      	ldr	r2, [r3, #0]
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f042 0201 	orr.w	r2, r2, #1
 800621e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2220      	movs	r2, #32
 8006224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006230:	2300      	movs	r3, #0
 8006232:	e000      	b.n	8006236 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006234:	2302      	movs	r3, #2
  }
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
	...

08006244 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 800624a:	af00      	add	r7, sp, #0
 800624c:	1d3b      	adds	r3, r7, #4
 800624e:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006250:	1d3b      	adds	r3, r7, #4
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	f000 bf01 	b.w	8007060 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800625e:	1d3b      	adds	r3, r7, #4
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0301 	and.w	r3, r3, #1
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 8160 	beq.w	800652e <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800626e:	4bae      	ldr	r3, [pc, #696]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f003 030c 	and.w	r3, r3, #12
 8006276:	2b04      	cmp	r3, #4
 8006278:	d00c      	beq.n	8006294 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800627a:	4bab      	ldr	r3, [pc, #684]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f003 030c 	and.w	r3, r3, #12
 8006282:	2b08      	cmp	r3, #8
 8006284:	d159      	bne.n	800633a <HAL_RCC_OscConfig+0xf6>
 8006286:	4ba8      	ldr	r3, [pc, #672]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800628e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006292:	d152      	bne.n	800633a <HAL_RCC_OscConfig+0xf6>
 8006294:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006298:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800629c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80062a0:	fa93 f3a3 	rbit	r3, r3
 80062a4:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80062a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ac:	fab3 f383 	clz	r3, r3
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	095b      	lsrs	r3, r3, #5
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	f043 0301 	orr.w	r3, r3, #1
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d102      	bne.n	80062c6 <HAL_RCC_OscConfig+0x82>
 80062c0:	4b99      	ldr	r3, [pc, #612]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	e015      	b.n	80062f2 <HAL_RCC_OscConfig+0xae>
 80062c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062ca:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ce:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80062d2:	fa93 f3a3 	rbit	r3, r3
 80062d6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80062da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80062de:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80062e2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80062e6:	fa93 f3a3 	rbit	r3, r3
 80062ea:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80062ee:	4b8e      	ldr	r3, [pc, #568]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 80062f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80062f6:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80062fa:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80062fe:	fa92 f2a2 	rbit	r2, r2
 8006302:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8006306:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800630a:	fab2 f282 	clz	r2, r2
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	f042 0220 	orr.w	r2, r2, #32
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	f002 021f 	and.w	r2, r2, #31
 800631a:	2101      	movs	r1, #1
 800631c:	fa01 f202 	lsl.w	r2, r1, r2
 8006320:	4013      	ands	r3, r2
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 8102 	beq.w	800652c <HAL_RCC_OscConfig+0x2e8>
 8006328:	1d3b      	adds	r3, r7, #4
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	2b00      	cmp	r3, #0
 8006330:	f040 80fc 	bne.w	800652c <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f000 be93 	b.w	8007060 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800633a:	1d3b      	adds	r3, r7, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006344:	d106      	bne.n	8006354 <HAL_RCC_OscConfig+0x110>
 8006346:	4b78      	ldr	r3, [pc, #480]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a77      	ldr	r2, [pc, #476]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 800634c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006350:	6013      	str	r3, [r2, #0]
 8006352:	e030      	b.n	80063b6 <HAL_RCC_OscConfig+0x172>
 8006354:	1d3b      	adds	r3, r7, #4
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685b      	ldr	r3, [r3, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d10c      	bne.n	8006378 <HAL_RCC_OscConfig+0x134>
 800635e:	4b72      	ldr	r3, [pc, #456]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a71      	ldr	r2, [pc, #452]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 8006364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	4b6f      	ldr	r3, [pc, #444]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a6e      	ldr	r2, [pc, #440]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 8006370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006374:	6013      	str	r3, [r2, #0]
 8006376:	e01e      	b.n	80063b6 <HAL_RCC_OscConfig+0x172>
 8006378:	1d3b      	adds	r3, r7, #4
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006382:	d10c      	bne.n	800639e <HAL_RCC_OscConfig+0x15a>
 8006384:	4b68      	ldr	r3, [pc, #416]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a67      	ldr	r2, [pc, #412]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 800638a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	4b65      	ldr	r3, [pc, #404]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a64      	ldr	r2, [pc, #400]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 8006396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	e00b      	b.n	80063b6 <HAL_RCC_OscConfig+0x172>
 800639e:	4b62      	ldr	r3, [pc, #392]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a61      	ldr	r2, [pc, #388]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 80063a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	4b5f      	ldr	r3, [pc, #380]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a5e      	ldr	r2, [pc, #376]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 80063b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063b4:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063b6:	1d3b      	adds	r3, r7, #4
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d059      	beq.n	8006474 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c0:	f7fd fd42 	bl	8003e48 <HAL_GetTick>
 80063c4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063c8:	e00a      	b.n	80063e0 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063ca:	f7fd fd3d 	bl	8003e48 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	2b64      	cmp	r3, #100	; 0x64
 80063d8:	d902      	bls.n	80063e0 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	f000 be40 	b.w	8007060 <HAL_RCC_OscConfig+0xe1c>
 80063e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80063e4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063e8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80063ec:	fa93 f3a3 	rbit	r3, r3
 80063f0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80063f4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063f8:	fab3 f383 	clz	r3, r3
 80063fc:	b2db      	uxtb	r3, r3
 80063fe:	095b      	lsrs	r3, r3, #5
 8006400:	b2db      	uxtb	r3, r3
 8006402:	f043 0301 	orr.w	r3, r3, #1
 8006406:	b2db      	uxtb	r3, r3
 8006408:	2b01      	cmp	r3, #1
 800640a:	d102      	bne.n	8006412 <HAL_RCC_OscConfig+0x1ce>
 800640c:	4b46      	ldr	r3, [pc, #280]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	e015      	b.n	800643e <HAL_RCC_OscConfig+0x1fa>
 8006412:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006416:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800641a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800641e:	fa93 f3a3 	rbit	r3, r3
 8006422:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8006426:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800642a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800642e:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8006432:	fa93 f3a3 	rbit	r3, r3
 8006436:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800643a:	4b3b      	ldr	r3, [pc, #236]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 800643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006442:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8006446:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800644a:	fa92 f2a2 	rbit	r2, r2
 800644e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8006452:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8006456:	fab2 f282 	clz	r2, r2
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	f042 0220 	orr.w	r2, r2, #32
 8006460:	b2d2      	uxtb	r2, r2
 8006462:	f002 021f 	and.w	r2, r2, #31
 8006466:	2101      	movs	r1, #1
 8006468:	fa01 f202 	lsl.w	r2, r1, r2
 800646c:	4013      	ands	r3, r2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0ab      	beq.n	80063ca <HAL_RCC_OscConfig+0x186>
 8006472:	e05c      	b.n	800652e <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006474:	f7fd fce8 	bl	8003e48 <HAL_GetTick>
 8006478:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800647c:	e00a      	b.n	8006494 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800647e:	f7fd fce3 	bl	8003e48 <HAL_GetTick>
 8006482:	4602      	mov	r2, r0
 8006484:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	2b64      	cmp	r3, #100	; 0x64
 800648c:	d902      	bls.n	8006494 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	f000 bde6 	b.w	8007060 <HAL_RCC_OscConfig+0xe1c>
 8006494:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006498:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800649c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80064a0:	fa93 f3a3 	rbit	r3, r3
 80064a4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80064a8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064ac:	fab3 f383 	clz	r3, r3
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	095b      	lsrs	r3, r3, #5
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d102      	bne.n	80064c6 <HAL_RCC_OscConfig+0x282>
 80064c0:	4b19      	ldr	r3, [pc, #100]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	e015      	b.n	80064f2 <HAL_RCC_OscConfig+0x2ae>
 80064c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064ca:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064ce:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80064d2:	fa93 f3a3 	rbit	r3, r3
 80064d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80064da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064de:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80064e2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80064e6:	fa93 f3a3 	rbit	r3, r3
 80064ea:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80064ee:	4b0e      	ldr	r3, [pc, #56]	; (8006528 <HAL_RCC_OscConfig+0x2e4>)
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064f6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80064fa:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80064fe:	fa92 f2a2 	rbit	r2, r2
 8006502:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8006506:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800650a:	fab2 f282 	clz	r2, r2
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	f042 0220 	orr.w	r2, r2, #32
 8006514:	b2d2      	uxtb	r2, r2
 8006516:	f002 021f 	and.w	r2, r2, #31
 800651a:	2101      	movs	r1, #1
 800651c:	fa01 f202 	lsl.w	r2, r1, r2
 8006520:	4013      	ands	r3, r2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1ab      	bne.n	800647e <HAL_RCC_OscConfig+0x23a>
 8006526:	e002      	b.n	800652e <HAL_RCC_OscConfig+0x2ea>
 8006528:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800652c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800652e:	1d3b      	adds	r3, r7, #4
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	f000 8170 	beq.w	800681e <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800653e:	4bd0      	ldr	r3, [pc, #832]	; (8006880 <HAL_RCC_OscConfig+0x63c>)
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f003 030c 	and.w	r3, r3, #12
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00c      	beq.n	8006564 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800654a:	4bcd      	ldr	r3, [pc, #820]	; (8006880 <HAL_RCC_OscConfig+0x63c>)
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f003 030c 	and.w	r3, r3, #12
 8006552:	2b08      	cmp	r3, #8
 8006554:	d16d      	bne.n	8006632 <HAL_RCC_OscConfig+0x3ee>
 8006556:	4bca      	ldr	r3, [pc, #808]	; (8006880 <HAL_RCC_OscConfig+0x63c>)
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800655e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006562:	d166      	bne.n	8006632 <HAL_RCC_OscConfig+0x3ee>
 8006564:	2302      	movs	r3, #2
 8006566:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800656e:	fa93 f3a3 	rbit	r3, r3
 8006572:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8006576:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800657a:	fab3 f383 	clz	r3, r3
 800657e:	b2db      	uxtb	r3, r3
 8006580:	095b      	lsrs	r3, r3, #5
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b01      	cmp	r3, #1
 800658c:	d102      	bne.n	8006594 <HAL_RCC_OscConfig+0x350>
 800658e:	4bbc      	ldr	r3, [pc, #752]	; (8006880 <HAL_RCC_OscConfig+0x63c>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	e013      	b.n	80065bc <HAL_RCC_OscConfig+0x378>
 8006594:	2302      	movs	r3, #2
 8006596:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800659a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800659e:	fa93 f3a3 	rbit	r3, r3
 80065a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80065a6:	2302      	movs	r3, #2
 80065a8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80065ac:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80065b0:	fa93 f3a3 	rbit	r3, r3
 80065b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80065b8:	4bb1      	ldr	r3, [pc, #708]	; (8006880 <HAL_RCC_OscConfig+0x63c>)
 80065ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065bc:	2202      	movs	r2, #2
 80065be:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80065c2:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80065c6:	fa92 f2a2 	rbit	r2, r2
 80065ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80065ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80065d2:	fab2 f282 	clz	r2, r2
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	f042 0220 	orr.w	r2, r2, #32
 80065dc:	b2d2      	uxtb	r2, r2
 80065de:	f002 021f 	and.w	r2, r2, #31
 80065e2:	2101      	movs	r1, #1
 80065e4:	fa01 f202 	lsl.w	r2, r1, r2
 80065e8:	4013      	ands	r3, r2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d007      	beq.n	80065fe <HAL_RCC_OscConfig+0x3ba>
 80065ee:	1d3b      	adds	r3, r7, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d002      	beq.n	80065fe <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	f000 bd31 	b.w	8007060 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80065fe:	4ba0      	ldr	r3, [pc, #640]	; (8006880 <HAL_RCC_OscConfig+0x63c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006606:	1d3b      	adds	r3, r7, #4
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	21f8      	movs	r1, #248	; 0xf8
 800660e:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006612:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8006616:	fa91 f1a1 	rbit	r1, r1
 800661a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 800661e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8006622:	fab1 f181 	clz	r1, r1
 8006626:	b2c9      	uxtb	r1, r1
 8006628:	408b      	lsls	r3, r1
 800662a:	4995      	ldr	r1, [pc, #596]	; (8006880 <HAL_RCC_OscConfig+0x63c>)
 800662c:	4313      	orrs	r3, r2
 800662e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006630:	e0f5      	b.n	800681e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006632:	1d3b      	adds	r3, r7, #4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	2b00      	cmp	r3, #0
 800663a:	f000 8085 	beq.w	8006748 <HAL_RCC_OscConfig+0x504>
 800663e:	2301      	movs	r3, #1
 8006640:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006644:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8006648:	fa93 f3a3 	rbit	r3, r3
 800664c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8006650:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006654:	fab3 f383 	clz	r3, r3
 8006658:	b2db      	uxtb	r3, r3
 800665a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800665e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	461a      	mov	r2, r3
 8006666:	2301      	movs	r3, #1
 8006668:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800666a:	f7fd fbed 	bl	8003e48 <HAL_GetTick>
 800666e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006672:	e00a      	b.n	800668a <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006674:	f7fd fbe8 	bl	8003e48 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b02      	cmp	r3, #2
 8006682:	d902      	bls.n	800668a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	f000 bceb 	b.w	8007060 <HAL_RCC_OscConfig+0xe1c>
 800668a:	2302      	movs	r3, #2
 800668c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006690:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8006694:	fa93 f3a3 	rbit	r3, r3
 8006698:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 800669c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066a0:	fab3 f383 	clz	r3, r3
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	095b      	lsrs	r3, r3, #5
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d102      	bne.n	80066ba <HAL_RCC_OscConfig+0x476>
 80066b4:	4b72      	ldr	r3, [pc, #456]	; (8006880 <HAL_RCC_OscConfig+0x63c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	e013      	b.n	80066e2 <HAL_RCC_OscConfig+0x49e>
 80066ba:	2302      	movs	r3, #2
 80066bc:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80066c4:	fa93 f3a3 	rbit	r3, r3
 80066c8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80066cc:	2302      	movs	r3, #2
 80066ce:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80066d2:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80066d6:	fa93 f3a3 	rbit	r3, r3
 80066da:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80066de:	4b68      	ldr	r3, [pc, #416]	; (8006880 <HAL_RCC_OscConfig+0x63c>)
 80066e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e2:	2202      	movs	r2, #2
 80066e4:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80066e8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80066ec:	fa92 f2a2 	rbit	r2, r2
 80066f0:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80066f4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80066f8:	fab2 f282 	clz	r2, r2
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	f042 0220 	orr.w	r2, r2, #32
 8006702:	b2d2      	uxtb	r2, r2
 8006704:	f002 021f 	and.w	r2, r2, #31
 8006708:	2101      	movs	r1, #1
 800670a:	fa01 f202 	lsl.w	r2, r1, r2
 800670e:	4013      	ands	r3, r2
 8006710:	2b00      	cmp	r3, #0
 8006712:	d0af      	beq.n	8006674 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006714:	4b5a      	ldr	r3, [pc, #360]	; (8006880 <HAL_RCC_OscConfig+0x63c>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800671c:	1d3b      	adds	r3, r7, #4
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	21f8      	movs	r1, #248	; 0xf8
 8006724:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006728:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800672c:	fa91 f1a1 	rbit	r1, r1
 8006730:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8006734:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8006738:	fab1 f181 	clz	r1, r1
 800673c:	b2c9      	uxtb	r1, r1
 800673e:	408b      	lsls	r3, r1
 8006740:	494f      	ldr	r1, [pc, #316]	; (8006880 <HAL_RCC_OscConfig+0x63c>)
 8006742:	4313      	orrs	r3, r2
 8006744:	600b      	str	r3, [r1, #0]
 8006746:	e06a      	b.n	800681e <HAL_RCC_OscConfig+0x5da>
 8006748:	2301      	movs	r3, #1
 800674a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800674e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8006752:	fa93 f3a3 	rbit	r3, r3
 8006756:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800675a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800675e:	fab3 f383 	clz	r3, r3
 8006762:	b2db      	uxtb	r3, r3
 8006764:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006768:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	461a      	mov	r2, r3
 8006770:	2300      	movs	r3, #0
 8006772:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006774:	f7fd fb68 	bl	8003e48 <HAL_GetTick>
 8006778:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800677c:	e00a      	b.n	8006794 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800677e:	f7fd fb63 	bl	8003e48 <HAL_GetTick>
 8006782:	4602      	mov	r2, r0
 8006784:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	2b02      	cmp	r3, #2
 800678c:	d902      	bls.n	8006794 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	f000 bc66 	b.w	8007060 <HAL_RCC_OscConfig+0xe1c>
 8006794:	2302      	movs	r3, #2
 8006796:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800679a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800679e:	fa93 f3a3 	rbit	r3, r3
 80067a2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 80067a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067aa:	fab3 f383 	clz	r3, r3
 80067ae:	b2db      	uxtb	r3, r3
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	f043 0301 	orr.w	r3, r3, #1
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d102      	bne.n	80067c4 <HAL_RCC_OscConfig+0x580>
 80067be:	4b30      	ldr	r3, [pc, #192]	; (8006880 <HAL_RCC_OscConfig+0x63c>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	e013      	b.n	80067ec <HAL_RCC_OscConfig+0x5a8>
 80067c4:	2302      	movs	r3, #2
 80067c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ce:	fa93 f3a3 	rbit	r3, r3
 80067d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80067d6:	2302      	movs	r3, #2
 80067d8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80067dc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80067e0:	fa93 f3a3 	rbit	r3, r3
 80067e4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80067e8:	4b25      	ldr	r3, [pc, #148]	; (8006880 <HAL_RCC_OscConfig+0x63c>)
 80067ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ec:	2202      	movs	r2, #2
 80067ee:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80067f2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80067f6:	fa92 f2a2 	rbit	r2, r2
 80067fa:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80067fe:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8006802:	fab2 f282 	clz	r2, r2
 8006806:	b2d2      	uxtb	r2, r2
 8006808:	f042 0220 	orr.w	r2, r2, #32
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	f002 021f 	and.w	r2, r2, #31
 8006812:	2101      	movs	r1, #1
 8006814:	fa01 f202 	lsl.w	r2, r1, r2
 8006818:	4013      	ands	r3, r2
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1af      	bne.n	800677e <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800681e:	1d3b      	adds	r3, r7, #4
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0308 	and.w	r3, r3, #8
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 80da 	beq.w	80069e2 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800682e:	1d3b      	adds	r3, r7, #4
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	695b      	ldr	r3, [r3, #20]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d069      	beq.n	800690c <HAL_RCC_OscConfig+0x6c8>
 8006838:	2301      	movs	r3, #1
 800683a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800683e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8006842:	fa93 f3a3 	rbit	r3, r3
 8006846:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800684a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800684e:	fab3 f383 	clz	r3, r3
 8006852:	b2db      	uxtb	r3, r3
 8006854:	461a      	mov	r2, r3
 8006856:	4b0b      	ldr	r3, [pc, #44]	; (8006884 <HAL_RCC_OscConfig+0x640>)
 8006858:	4413      	add	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	461a      	mov	r2, r3
 800685e:	2301      	movs	r3, #1
 8006860:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006862:	f7fd faf1 	bl	8003e48 <HAL_GetTick>
 8006866:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800686a:	e00d      	b.n	8006888 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800686c:	f7fd faec 	bl	8003e48 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d905      	bls.n	8006888 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e3ef      	b.n	8007060 <HAL_RCC_OscConfig+0xe1c>
 8006880:	40021000 	.word	0x40021000
 8006884:	10908120 	.word	0x10908120
 8006888:	2302      	movs	r3, #2
 800688a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800688e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006892:	fa93 f2a3 	rbit	r2, r3
 8006896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80068a0:	2202      	movs	r2, #2
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	fa93 f2a3 	rbit	r2, r3
 80068ae:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80068b8:	2202      	movs	r2, #2
 80068ba:	601a      	str	r2, [r3, #0]
 80068bc:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	fa93 f2a3 	rbit	r2, r3
 80068c6:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80068ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068cc:	4ba4      	ldr	r3, [pc, #656]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 80068ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068d0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80068d4:	2102      	movs	r1, #2
 80068d6:	6019      	str	r1, [r3, #0]
 80068d8:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	fa93 f1a3 	rbit	r1, r3
 80068e2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80068e6:	6019      	str	r1, [r3, #0]
  return result;
 80068e8:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	fab3 f383 	clz	r3, r3
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 031f 	and.w	r3, r3, #31
 80068fe:	2101      	movs	r1, #1
 8006900:	fa01 f303 	lsl.w	r3, r1, r3
 8006904:	4013      	ands	r3, r2
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0b0      	beq.n	800686c <HAL_RCC_OscConfig+0x628>
 800690a:	e06a      	b.n	80069e2 <HAL_RCC_OscConfig+0x79e>
 800690c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006910:	2201      	movs	r2, #1
 8006912:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006914:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	fa93 f2a3 	rbit	r2, r3
 800691e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006922:	601a      	str	r2, [r3, #0]
  return result;
 8006924:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8006928:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800692a:	fab3 f383 	clz	r3, r3
 800692e:	b2db      	uxtb	r3, r3
 8006930:	461a      	mov	r2, r3
 8006932:	4b8c      	ldr	r3, [pc, #560]	; (8006b64 <HAL_RCC_OscConfig+0x920>)
 8006934:	4413      	add	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	461a      	mov	r2, r3
 800693a:	2300      	movs	r3, #0
 800693c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800693e:	f7fd fa83 	bl	8003e48 <HAL_GetTick>
 8006942:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006946:	e009      	b.n	800695c <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006948:	f7fd fa7e 	bl	8003e48 <HAL_GetTick>
 800694c:	4602      	mov	r2, r0
 800694e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	2b02      	cmp	r3, #2
 8006956:	d901      	bls.n	800695c <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e381      	b.n	8007060 <HAL_RCC_OscConfig+0xe1c>
 800695c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006960:	2202      	movs	r2, #2
 8006962:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006964:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	fa93 f2a3 	rbit	r2, r3
 800696e:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006978:	2202      	movs	r2, #2
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	fa93 f2a3 	rbit	r2, r3
 8006986:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800698a:	601a      	str	r2, [r3, #0]
 800698c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006990:	2202      	movs	r2, #2
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	fa93 f2a3 	rbit	r2, r3
 800699e:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80069a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069a4:	4b6e      	ldr	r3, [pc, #440]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 80069a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80069ac:	2102      	movs	r1, #2
 80069ae:	6019      	str	r1, [r3, #0]
 80069b0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	fa93 f1a3 	rbit	r1, r3
 80069ba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80069be:	6019      	str	r1, [r3, #0]
  return result;
 80069c0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	fab3 f383 	clz	r3, r3
 80069ca:	b2db      	uxtb	r3, r3
 80069cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80069d0:	b2db      	uxtb	r3, r3
 80069d2:	f003 031f 	and.w	r3, r3, #31
 80069d6:	2101      	movs	r1, #1
 80069d8:	fa01 f303 	lsl.w	r3, r1, r3
 80069dc:	4013      	ands	r3, r2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1b2      	bne.n	8006948 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069e2:	1d3b      	adds	r3, r7, #4
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	f000 8157 	beq.w	8006ca0 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069f2:	2300      	movs	r3, #0
 80069f4:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069f8:	4b59      	ldr	r3, [pc, #356]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d112      	bne.n	8006a2a <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a04:	4b56      	ldr	r3, [pc, #344]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	4a55      	ldr	r2, [pc, #340]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a0e:	61d3      	str	r3, [r2, #28]
 8006a10:	4b53      	ldr	r3, [pc, #332]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006a12:	69db      	ldr	r3, [r3, #28]
 8006a14:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8006a18:	f107 030c 	add.w	r3, r7, #12
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	f107 030c 	add.w	r3, r7, #12
 8006a22:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8006a24:	2301      	movs	r3, #1
 8006a26:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a2a:	4b4f      	ldr	r3, [pc, #316]	; (8006b68 <HAL_RCC_OscConfig+0x924>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d11a      	bne.n	8006a6c <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a36:	4b4c      	ldr	r3, [pc, #304]	; (8006b68 <HAL_RCC_OscConfig+0x924>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	4a4b      	ldr	r2, [pc, #300]	; (8006b68 <HAL_RCC_OscConfig+0x924>)
 8006a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a42:	f7fd fa01 	bl	8003e48 <HAL_GetTick>
 8006a46:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a4a:	e009      	b.n	8006a60 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a4c:	f7fd f9fc 	bl	8003e48 <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b64      	cmp	r3, #100	; 0x64
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e2ff      	b.n	8007060 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a60:	4b41      	ldr	r3, [pc, #260]	; (8006b68 <HAL_RCC_OscConfig+0x924>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0ef      	beq.n	8006a4c <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a6c:	1d3b      	adds	r3, r7, #4
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2b01      	cmp	r3, #1
 8006a74:	d106      	bne.n	8006a84 <HAL_RCC_OscConfig+0x840>
 8006a76:	4b3a      	ldr	r3, [pc, #232]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	4a39      	ldr	r2, [pc, #228]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006a7c:	f043 0301 	orr.w	r3, r3, #1
 8006a80:	6213      	str	r3, [r2, #32]
 8006a82:	e02f      	b.n	8006ae4 <HAL_RCC_OscConfig+0x8a0>
 8006a84:	1d3b      	adds	r3, r7, #4
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	689b      	ldr	r3, [r3, #8]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d10c      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x864>
 8006a8e:	4b34      	ldr	r3, [pc, #208]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	4a33      	ldr	r2, [pc, #204]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006a94:	f023 0301 	bic.w	r3, r3, #1
 8006a98:	6213      	str	r3, [r2, #32]
 8006a9a:	4b31      	ldr	r3, [pc, #196]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	4a30      	ldr	r2, [pc, #192]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006aa0:	f023 0304 	bic.w	r3, r3, #4
 8006aa4:	6213      	str	r3, [r2, #32]
 8006aa6:	e01d      	b.n	8006ae4 <HAL_RCC_OscConfig+0x8a0>
 8006aa8:	1d3b      	adds	r3, r7, #4
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2b05      	cmp	r3, #5
 8006ab0:	d10c      	bne.n	8006acc <HAL_RCC_OscConfig+0x888>
 8006ab2:	4b2b      	ldr	r3, [pc, #172]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	4a2a      	ldr	r2, [pc, #168]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006ab8:	f043 0304 	orr.w	r3, r3, #4
 8006abc:	6213      	str	r3, [r2, #32]
 8006abe:	4b28      	ldr	r3, [pc, #160]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	4a27      	ldr	r2, [pc, #156]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006ac4:	f043 0301 	orr.w	r3, r3, #1
 8006ac8:	6213      	str	r3, [r2, #32]
 8006aca:	e00b      	b.n	8006ae4 <HAL_RCC_OscConfig+0x8a0>
 8006acc:	4b24      	ldr	r3, [pc, #144]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006ace:	6a1b      	ldr	r3, [r3, #32]
 8006ad0:	4a23      	ldr	r2, [pc, #140]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006ad2:	f023 0301 	bic.w	r3, r3, #1
 8006ad6:	6213      	str	r3, [r2, #32]
 8006ad8:	4b21      	ldr	r3, [pc, #132]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	4a20      	ldr	r2, [pc, #128]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006ade:	f023 0304 	bic.w	r3, r3, #4
 8006ae2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006ae4:	1d3b      	adds	r3, r7, #4
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d06a      	beq.n	8006bc4 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aee:	f7fd f9ab 	bl	8003e48 <HAL_GetTick>
 8006af2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006af6:	e00b      	b.n	8006b10 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006af8:	f7fd f9a6 	bl	8003e48 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d901      	bls.n	8006b10 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e2a7      	b.n	8007060 <HAL_RCC_OscConfig+0xe1c>
 8006b10:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006b14:	2202      	movs	r2, #2
 8006b16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b18:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	fa93 f2a3 	rbit	r2, r3
 8006b22:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006b2c:	2202      	movs	r2, #2
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	fa93 f2a3 	rbit	r2, r3
 8006b3a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006b3e:	601a      	str	r2, [r3, #0]
  return result;
 8006b40:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8006b44:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b46:	fab3 f383 	clz	r3, r3
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	095b      	lsrs	r3, r3, #5
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	f043 0302 	orr.w	r3, r3, #2
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b02      	cmp	r3, #2
 8006b58:	d108      	bne.n	8006b6c <HAL_RCC_OscConfig+0x928>
 8006b5a:	4b01      	ldr	r3, [pc, #4]	; (8006b60 <HAL_RCC_OscConfig+0x91c>)
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	e013      	b.n	8006b88 <HAL_RCC_OscConfig+0x944>
 8006b60:	40021000 	.word	0x40021000
 8006b64:	10908120 	.word	0x10908120
 8006b68:	40007000 	.word	0x40007000
 8006b6c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006b70:	2202      	movs	r2, #2
 8006b72:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b74:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	fa93 f2a3 	rbit	r2, r3
 8006b7e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8006b82:	601a      	str	r2, [r3, #0]
 8006b84:	4bc0      	ldr	r3, [pc, #768]	; (8006e88 <HAL_RCC_OscConfig+0xc44>)
 8006b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b88:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	6011      	str	r1, [r2, #0]
 8006b90:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8006b94:	6812      	ldr	r2, [r2, #0]
 8006b96:	fa92 f1a2 	rbit	r1, r2
 8006b9a:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006b9e:	6011      	str	r1, [r2, #0]
  return result;
 8006ba0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8006ba4:	6812      	ldr	r2, [r2, #0]
 8006ba6:	fab2 f282 	clz	r2, r2
 8006baa:	b2d2      	uxtb	r2, r2
 8006bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bb0:	b2d2      	uxtb	r2, r2
 8006bb2:	f002 021f 	and.w	r2, r2, #31
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	fa01 f202 	lsl.w	r2, r1, r2
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d09a      	beq.n	8006af8 <HAL_RCC_OscConfig+0x8b4>
 8006bc2:	e063      	b.n	8006c8c <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bc4:	f7fd f940 	bl	8003e48 <HAL_GetTick>
 8006bc8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bcc:	e00b      	b.n	8006be6 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bce:	f7fd f93b 	bl	8003e48 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d901      	bls.n	8006be6 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8006be2:	2303      	movs	r3, #3
 8006be4:	e23c      	b.n	8007060 <HAL_RCC_OscConfig+0xe1c>
 8006be6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006bea:	2202      	movs	r2, #2
 8006bec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bee:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	fa93 f2a3 	rbit	r2, r3
 8006bf8:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8006bfc:	601a      	str	r2, [r3, #0]
 8006bfe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006c02:	2202      	movs	r2, #2
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	fa93 f2a3 	rbit	r2, r3
 8006c10:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006c14:	601a      	str	r2, [r3, #0]
  return result;
 8006c16:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8006c1a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c1c:	fab3 f383 	clz	r3, r3
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	095b      	lsrs	r3, r3, #5
 8006c24:	b2db      	uxtb	r3, r3
 8006c26:	f043 0302 	orr.w	r3, r3, #2
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b02      	cmp	r3, #2
 8006c2e:	d102      	bne.n	8006c36 <HAL_RCC_OscConfig+0x9f2>
 8006c30:	4b95      	ldr	r3, [pc, #596]	; (8006e88 <HAL_RCC_OscConfig+0xc44>)
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	e00d      	b.n	8006c52 <HAL_RCC_OscConfig+0xa0e>
 8006c36:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006c3a:	2202      	movs	r2, #2
 8006c3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c3e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	fa93 f2a3 	rbit	r2, r3
 8006c48:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	4b8e      	ldr	r3, [pc, #568]	; (8006e88 <HAL_RCC_OscConfig+0xc44>)
 8006c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c52:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006c56:	2102      	movs	r1, #2
 8006c58:	6011      	str	r1, [r2, #0]
 8006c5a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006c5e:	6812      	ldr	r2, [r2, #0]
 8006c60:	fa92 f1a2 	rbit	r1, r2
 8006c64:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006c68:	6011      	str	r1, [r2, #0]
  return result;
 8006c6a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006c6e:	6812      	ldr	r2, [r2, #0]
 8006c70:	fab2 f282 	clz	r2, r2
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c7a:	b2d2      	uxtb	r2, r2
 8006c7c:	f002 021f 	and.w	r2, r2, #31
 8006c80:	2101      	movs	r1, #1
 8006c82:	fa01 f202 	lsl.w	r2, r1, r2
 8006c86:	4013      	ands	r3, r2
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d1a0      	bne.n	8006bce <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006c8c:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8006c90:	2b01      	cmp	r3, #1
 8006c92:	d105      	bne.n	8006ca0 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c94:	4b7c      	ldr	r3, [pc, #496]	; (8006e88 <HAL_RCC_OscConfig+0xc44>)
 8006c96:	69db      	ldr	r3, [r3, #28]
 8006c98:	4a7b      	ldr	r2, [pc, #492]	; (8006e88 <HAL_RCC_OscConfig+0xc44>)
 8006c9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c9e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ca0:	1d3b      	adds	r3, r7, #4
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 81d9 	beq.w	800705e <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006cac:	4b76      	ldr	r3, [pc, #472]	; (8006e88 <HAL_RCC_OscConfig+0xc44>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f003 030c 	and.w	r3, r3, #12
 8006cb4:	2b08      	cmp	r3, #8
 8006cb6:	f000 81a6 	beq.w	8007006 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cba:	1d3b      	adds	r3, r7, #4
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	f040 811e 	bne.w	8006f02 <HAL_RCC_OscConfig+0xcbe>
 8006cc6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006cca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006cce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cd0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	fa93 f2a3 	rbit	r2, r3
 8006cda:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006cde:	601a      	str	r2, [r3, #0]
  return result;
 8006ce0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006ce4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ce6:	fab3 f383 	clz	r3, r3
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006cf0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cfc:	f7fd f8a4 	bl	8003e48 <HAL_GetTick>
 8006d00:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d04:	e009      	b.n	8006d1a <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d06:	f7fd f89f 	bl	8003e48 <HAL_GetTick>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006d10:	1ad3      	subs	r3, r2, r3
 8006d12:	2b02      	cmp	r3, #2
 8006d14:	d901      	bls.n	8006d1a <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	e1a2      	b.n	8007060 <HAL_RCC_OscConfig+0xe1c>
 8006d1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d1e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d24:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	fa93 f2a3 	rbit	r2, r3
 8006d2e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006d32:	601a      	str	r2, [r3, #0]
  return result;
 8006d34:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8006d38:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006d3a:	fab3 f383 	clz	r3, r3
 8006d3e:	b2db      	uxtb	r3, r3
 8006d40:	095b      	lsrs	r3, r3, #5
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	f043 0301 	orr.w	r3, r3, #1
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d102      	bne.n	8006d54 <HAL_RCC_OscConfig+0xb10>
 8006d4e:	4b4e      	ldr	r3, [pc, #312]	; (8006e88 <HAL_RCC_OscConfig+0xc44>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	e01b      	b.n	8006d8c <HAL_RCC_OscConfig+0xb48>
 8006d54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006d58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d5e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	fa93 f2a3 	rbit	r2, r3
 8006d68:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006d6c:	601a      	str	r2, [r3, #0]
 8006d6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d72:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006d76:	601a      	str	r2, [r3, #0]
 8006d78:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	fa93 f2a3 	rbit	r2, r3
 8006d82:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	4b3f      	ldr	r3, [pc, #252]	; (8006e88 <HAL_RCC_OscConfig+0xc44>)
 8006d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d8c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006d90:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006d94:	6011      	str	r1, [r2, #0]
 8006d96:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006d9a:	6812      	ldr	r2, [r2, #0]
 8006d9c:	fa92 f1a2 	rbit	r1, r2
 8006da0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006da4:	6011      	str	r1, [r2, #0]
  return result;
 8006da6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006daa:	6812      	ldr	r2, [r2, #0]
 8006dac:	fab2 f282 	clz	r2, r2
 8006db0:	b2d2      	uxtb	r2, r2
 8006db2:	f042 0220 	orr.w	r2, r2, #32
 8006db6:	b2d2      	uxtb	r2, r2
 8006db8:	f002 021f 	and.w	r2, r2, #31
 8006dbc:	2101      	movs	r1, #1
 8006dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d19e      	bne.n	8006d06 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006dc8:	4b2f      	ldr	r3, [pc, #188]	; (8006e88 <HAL_RCC_OscConfig+0xc44>)
 8006dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dcc:	f023 020f 	bic.w	r2, r3, #15
 8006dd0:	1d3b      	adds	r3, r7, #4
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dd6:	492c      	ldr	r1, [pc, #176]	; (8006e88 <HAL_RCC_OscConfig+0xc44>)
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006ddc:	4b2a      	ldr	r3, [pc, #168]	; (8006e88 <HAL_RCC_OscConfig+0xc44>)
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8006de4:	1d3b      	adds	r3, r7, #4
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6a19      	ldr	r1, [r3, #32]
 8006dea:	1d3b      	adds	r3, r7, #4
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	430b      	orrs	r3, r1
 8006df2:	4925      	ldr	r1, [pc, #148]	; (8006e88 <HAL_RCC_OscConfig+0xc44>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	604b      	str	r3, [r1, #4]
 8006df8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e02:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	fa93 f2a3 	rbit	r2, r3
 8006e0c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e10:	601a      	str	r2, [r3, #0]
  return result;
 8006e12:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006e16:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e18:	fab3 f383 	clz	r3, r3
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006e22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	461a      	mov	r2, r3
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e2e:	f7fd f80b 	bl	8003e48 <HAL_GetTick>
 8006e32:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e36:	e009      	b.n	8006e4c <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e38:	f7fd f806 	bl	8003e48 <HAL_GetTick>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006e42:	1ad3      	subs	r3, r2, r3
 8006e44:	2b02      	cmp	r3, #2
 8006e46:	d901      	bls.n	8006e4c <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006e48:	2303      	movs	r3, #3
 8006e4a:	e109      	b.n	8007060 <HAL_RCC_OscConfig+0xe1c>
 8006e4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006e50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e56:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	fa93 f2a3 	rbit	r2, r3
 8006e60:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e64:	601a      	str	r2, [r3, #0]
  return result;
 8006e66:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006e6a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006e6c:	fab3 f383 	clz	r3, r3
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	f043 0301 	orr.w	r3, r3, #1
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d105      	bne.n	8006e8c <HAL_RCC_OscConfig+0xc48>
 8006e80:	4b01      	ldr	r3, [pc, #4]	; (8006e88 <HAL_RCC_OscConfig+0xc44>)
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	e01e      	b.n	8006ec4 <HAL_RCC_OscConfig+0xc80>
 8006e86:	bf00      	nop
 8006e88:	40021000 	.word	0x40021000
 8006e8c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006e90:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006e94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e96:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	fa93 f2a3 	rbit	r2, r3
 8006ea0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006eaa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006eae:	601a      	str	r2, [r3, #0]
 8006eb0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	fa93 f2a3 	rbit	r2, r3
 8006eba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006ebe:	601a      	str	r2, [r3, #0]
 8006ec0:	4b6a      	ldr	r3, [pc, #424]	; (800706c <HAL_RCC_OscConfig+0xe28>)
 8006ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006ec8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006ecc:	6011      	str	r1, [r2, #0]
 8006ece:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006ed2:	6812      	ldr	r2, [r2, #0]
 8006ed4:	fa92 f1a2 	rbit	r1, r2
 8006ed8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006edc:	6011      	str	r1, [r2, #0]
  return result;
 8006ede:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006ee2:	6812      	ldr	r2, [r2, #0]
 8006ee4:	fab2 f282 	clz	r2, r2
 8006ee8:	b2d2      	uxtb	r2, r2
 8006eea:	f042 0220 	orr.w	r2, r2, #32
 8006eee:	b2d2      	uxtb	r2, r2
 8006ef0:	f002 021f 	and.w	r2, r2, #31
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8006efa:	4013      	ands	r3, r2
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d09b      	beq.n	8006e38 <HAL_RCC_OscConfig+0xbf4>
 8006f00:	e0ad      	b.n	800705e <HAL_RCC_OscConfig+0xe1a>
 8006f02:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006f06:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	fa93 f2a3 	rbit	r2, r3
 8006f16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f1a:	601a      	str	r2, [r3, #0]
  return result;
 8006f1c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8006f20:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f22:	fab3 f383 	clz	r3, r3
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8006f2c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	461a      	mov	r2, r3
 8006f34:	2300      	movs	r3, #0
 8006f36:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f38:	f7fc ff86 	bl	8003e48 <HAL_GetTick>
 8006f3c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f40:	e009      	b.n	8006f56 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f42:	f7fc ff81 	bl	8003e48 <HAL_GetTick>
 8006f46:	4602      	mov	r2, r0
 8006f48:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006f4c:	1ad3      	subs	r3, r2, r3
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d901      	bls.n	8006f56 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8006f52:	2303      	movs	r3, #3
 8006f54:	e084      	b.n	8007060 <HAL_RCC_OscConfig+0xe1c>
 8006f56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f5a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f60:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	fa93 f2a3 	rbit	r2, r3
 8006f6a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f6e:	601a      	str	r2, [r3, #0]
  return result;
 8006f70:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006f74:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006f76:	fab3 f383 	clz	r3, r3
 8006f7a:	b2db      	uxtb	r3, r3
 8006f7c:	095b      	lsrs	r3, r3, #5
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	f043 0301 	orr.w	r3, r3, #1
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	2b01      	cmp	r3, #1
 8006f88:	d102      	bne.n	8006f90 <HAL_RCC_OscConfig+0xd4c>
 8006f8a:	4b38      	ldr	r3, [pc, #224]	; (800706c <HAL_RCC_OscConfig+0xe28>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	e01b      	b.n	8006fc8 <HAL_RCC_OscConfig+0xd84>
 8006f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f94:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006f98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	fa93 f2a3 	rbit	r2, r3
 8006fa4:	f107 0320 	add.w	r3, r7, #32
 8006fa8:	601a      	str	r2, [r3, #0]
 8006faa:	f107 031c 	add.w	r3, r7, #28
 8006fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	f107 031c 	add.w	r3, r7, #28
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	fa93 f2a3 	rbit	r2, r3
 8006fbe:	f107 0318 	add.w	r3, r7, #24
 8006fc2:	601a      	str	r2, [r3, #0]
 8006fc4:	4b29      	ldr	r3, [pc, #164]	; (800706c <HAL_RCC_OscConfig+0xe28>)
 8006fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc8:	f107 0214 	add.w	r2, r7, #20
 8006fcc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006fd0:	6011      	str	r1, [r2, #0]
 8006fd2:	f107 0214 	add.w	r2, r7, #20
 8006fd6:	6812      	ldr	r2, [r2, #0]
 8006fd8:	fa92 f1a2 	rbit	r1, r2
 8006fdc:	f107 0210 	add.w	r2, r7, #16
 8006fe0:	6011      	str	r1, [r2, #0]
  return result;
 8006fe2:	f107 0210 	add.w	r2, r7, #16
 8006fe6:	6812      	ldr	r2, [r2, #0]
 8006fe8:	fab2 f282 	clz	r2, r2
 8006fec:	b2d2      	uxtb	r2, r2
 8006fee:	f042 0220 	orr.w	r2, r2, #32
 8006ff2:	b2d2      	uxtb	r2, r2
 8006ff4:	f002 021f 	and.w	r2, r2, #31
 8006ff8:	2101      	movs	r1, #1
 8006ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8006ffe:	4013      	ands	r3, r2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d19e      	bne.n	8006f42 <HAL_RCC_OscConfig+0xcfe>
 8007004:	e02b      	b.n	800705e <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007006:	1d3b      	adds	r3, r7, #4
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	699b      	ldr	r3, [r3, #24]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d101      	bne.n	8007014 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8007010:	2301      	movs	r3, #1
 8007012:	e025      	b.n	8007060 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007014:	4b15      	ldr	r3, [pc, #84]	; (800706c <HAL_RCC_OscConfig+0xe28>)
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800701c:	4b13      	ldr	r3, [pc, #76]	; (800706c <HAL_RCC_OscConfig+0xe28>)
 800701e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007020:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007024:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8007028:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 800702c:	1d3b      	adds	r3, r7, #4
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	69db      	ldr	r3, [r3, #28]
 8007032:	429a      	cmp	r2, r3
 8007034:	d111      	bne.n	800705a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007036:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800703a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800703e:	1d3b      	adds	r3, r7, #4
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8007044:	429a      	cmp	r2, r3
 8007046:	d108      	bne.n	800705a <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8007048:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800704c:	f003 020f 	and.w	r2, r3, #15
 8007050:	1d3b      	adds	r3, r7, #4
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8007056:	429a      	cmp	r2, r3
 8007058:	d001      	beq.n	800705e <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e000      	b.n	8007060 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800705e:	2300      	movs	r3, #0
}
 8007060:	4618      	mov	r0, r3
 8007062:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	40021000 	.word	0x40021000

08007070 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b09e      	sub	sp, #120	; 0x78
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800707a:	2300      	movs	r3, #0
 800707c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e162      	b.n	800734e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007088:	4b90      	ldr	r3, [pc, #576]	; (80072cc <HAL_RCC_ClockConfig+0x25c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f003 0307 	and.w	r3, r3, #7
 8007090:	683a      	ldr	r2, [r7, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d910      	bls.n	80070b8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007096:	4b8d      	ldr	r3, [pc, #564]	; (80072cc <HAL_RCC_ClockConfig+0x25c>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f023 0207 	bic.w	r2, r3, #7
 800709e:	498b      	ldr	r1, [pc, #556]	; (80072cc <HAL_RCC_ClockConfig+0x25c>)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80070a6:	4b89      	ldr	r3, [pc, #548]	; (80072cc <HAL_RCC_ClockConfig+0x25c>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d001      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e14a      	b.n	800734e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d008      	beq.n	80070d6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070c4:	4b82      	ldr	r3, [pc, #520]	; (80072d0 <HAL_RCC_ClockConfig+0x260>)
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	497f      	ldr	r1, [pc, #508]	; (80072d0 <HAL_RCC_ClockConfig+0x260>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	f000 80dc 	beq.w	800729c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d13c      	bne.n	8007166 <HAL_RCC_ClockConfig+0xf6>
 80070ec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80070f0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070f4:	fa93 f3a3 	rbit	r3, r3
 80070f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80070fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070fc:	fab3 f383 	clz	r3, r3
 8007100:	b2db      	uxtb	r3, r3
 8007102:	095b      	lsrs	r3, r3, #5
 8007104:	b2db      	uxtb	r3, r3
 8007106:	f043 0301 	orr.w	r3, r3, #1
 800710a:	b2db      	uxtb	r3, r3
 800710c:	2b01      	cmp	r3, #1
 800710e:	d102      	bne.n	8007116 <HAL_RCC_ClockConfig+0xa6>
 8007110:	4b6f      	ldr	r3, [pc, #444]	; (80072d0 <HAL_RCC_ClockConfig+0x260>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	e00f      	b.n	8007136 <HAL_RCC_ClockConfig+0xc6>
 8007116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800711a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800711c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800711e:	fa93 f3a3 	rbit	r3, r3
 8007122:	667b      	str	r3, [r7, #100]	; 0x64
 8007124:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007128:	663b      	str	r3, [r7, #96]	; 0x60
 800712a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800712c:	fa93 f3a3 	rbit	r3, r3
 8007130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007132:	4b67      	ldr	r3, [pc, #412]	; (80072d0 <HAL_RCC_ClockConfig+0x260>)
 8007134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007136:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800713a:	65ba      	str	r2, [r7, #88]	; 0x58
 800713c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800713e:	fa92 f2a2 	rbit	r2, r2
 8007142:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8007144:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007146:	fab2 f282 	clz	r2, r2
 800714a:	b2d2      	uxtb	r2, r2
 800714c:	f042 0220 	orr.w	r2, r2, #32
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	f002 021f 	and.w	r2, r2, #31
 8007156:	2101      	movs	r1, #1
 8007158:	fa01 f202 	lsl.w	r2, r1, r2
 800715c:	4013      	ands	r3, r2
 800715e:	2b00      	cmp	r3, #0
 8007160:	d17b      	bne.n	800725a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e0f3      	b.n	800734e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d13c      	bne.n	80071e8 <HAL_RCC_ClockConfig+0x178>
 800716e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007172:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007174:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007176:	fa93 f3a3 	rbit	r3, r3
 800717a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800717c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800717e:	fab3 f383 	clz	r3, r3
 8007182:	b2db      	uxtb	r3, r3
 8007184:	095b      	lsrs	r3, r3, #5
 8007186:	b2db      	uxtb	r3, r3
 8007188:	f043 0301 	orr.w	r3, r3, #1
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b01      	cmp	r3, #1
 8007190:	d102      	bne.n	8007198 <HAL_RCC_ClockConfig+0x128>
 8007192:	4b4f      	ldr	r3, [pc, #316]	; (80072d0 <HAL_RCC_ClockConfig+0x260>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	e00f      	b.n	80071b8 <HAL_RCC_ClockConfig+0x148>
 8007198:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800719c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800719e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071a0:	fa93 f3a3 	rbit	r3, r3
 80071a4:	647b      	str	r3, [r7, #68]	; 0x44
 80071a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071aa:	643b      	str	r3, [r7, #64]	; 0x40
 80071ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80071ae:	fa93 f3a3 	rbit	r3, r3
 80071b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071b4:	4b46      	ldr	r3, [pc, #280]	; (80072d0 <HAL_RCC_ClockConfig+0x260>)
 80071b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80071bc:	63ba      	str	r2, [r7, #56]	; 0x38
 80071be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071c0:	fa92 f2a2 	rbit	r2, r2
 80071c4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80071c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071c8:	fab2 f282 	clz	r2, r2
 80071cc:	b2d2      	uxtb	r2, r2
 80071ce:	f042 0220 	orr.w	r2, r2, #32
 80071d2:	b2d2      	uxtb	r2, r2
 80071d4:	f002 021f 	and.w	r2, r2, #31
 80071d8:	2101      	movs	r1, #1
 80071da:	fa01 f202 	lsl.w	r2, r1, r2
 80071de:	4013      	ands	r3, r2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d13a      	bne.n	800725a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e0b2      	b.n	800734e <HAL_RCC_ClockConfig+0x2de>
 80071e8:	2302      	movs	r3, #2
 80071ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ee:	fa93 f3a3 	rbit	r3, r3
 80071f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80071f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071f6:	fab3 f383 	clz	r3, r3
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	095b      	lsrs	r3, r3, #5
 80071fe:	b2db      	uxtb	r3, r3
 8007200:	f043 0301 	orr.w	r3, r3, #1
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b01      	cmp	r3, #1
 8007208:	d102      	bne.n	8007210 <HAL_RCC_ClockConfig+0x1a0>
 800720a:	4b31      	ldr	r3, [pc, #196]	; (80072d0 <HAL_RCC_ClockConfig+0x260>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	e00d      	b.n	800722c <HAL_RCC_ClockConfig+0x1bc>
 8007210:	2302      	movs	r3, #2
 8007212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007216:	fa93 f3a3 	rbit	r3, r3
 800721a:	627b      	str	r3, [r7, #36]	; 0x24
 800721c:	2302      	movs	r3, #2
 800721e:	623b      	str	r3, [r7, #32]
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	fa93 f3a3 	rbit	r3, r3
 8007226:	61fb      	str	r3, [r7, #28]
 8007228:	4b29      	ldr	r3, [pc, #164]	; (80072d0 <HAL_RCC_ClockConfig+0x260>)
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	2202      	movs	r2, #2
 800722e:	61ba      	str	r2, [r7, #24]
 8007230:	69ba      	ldr	r2, [r7, #24]
 8007232:	fa92 f2a2 	rbit	r2, r2
 8007236:	617a      	str	r2, [r7, #20]
  return result;
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	fab2 f282 	clz	r2, r2
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	f042 0220 	orr.w	r2, r2, #32
 8007244:	b2d2      	uxtb	r2, r2
 8007246:	f002 021f 	and.w	r2, r2, #31
 800724a:	2101      	movs	r1, #1
 800724c:	fa01 f202 	lsl.w	r2, r1, r2
 8007250:	4013      	ands	r3, r2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e079      	b.n	800734e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800725a:	4b1d      	ldr	r3, [pc, #116]	; (80072d0 <HAL_RCC_ClockConfig+0x260>)
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f023 0203 	bic.w	r2, r3, #3
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	491a      	ldr	r1, [pc, #104]	; (80072d0 <HAL_RCC_ClockConfig+0x260>)
 8007268:	4313      	orrs	r3, r2
 800726a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800726c:	f7fc fdec 	bl	8003e48 <HAL_GetTick>
 8007270:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007272:	e00a      	b.n	800728a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007274:	f7fc fde8 	bl	8003e48 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007282:	4293      	cmp	r3, r2
 8007284:	d901      	bls.n	800728a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e061      	b.n	800734e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800728a:	4b11      	ldr	r3, [pc, #68]	; (80072d0 <HAL_RCC_ClockConfig+0x260>)
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f003 020c 	and.w	r2, r3, #12
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	429a      	cmp	r2, r3
 800729a:	d1eb      	bne.n	8007274 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800729c:	4b0b      	ldr	r3, [pc, #44]	; (80072cc <HAL_RCC_ClockConfig+0x25c>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	683a      	ldr	r2, [r7, #0]
 80072a6:	429a      	cmp	r2, r3
 80072a8:	d214      	bcs.n	80072d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80072aa:	4b08      	ldr	r3, [pc, #32]	; (80072cc <HAL_RCC_ClockConfig+0x25c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f023 0207 	bic.w	r2, r3, #7
 80072b2:	4906      	ldr	r1, [pc, #24]	; (80072cc <HAL_RCC_ClockConfig+0x25c>)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80072ba:	4b04      	ldr	r3, [pc, #16]	; (80072cc <HAL_RCC_ClockConfig+0x25c>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f003 0307 	and.w	r3, r3, #7
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d005      	beq.n	80072d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e040      	b.n	800734e <HAL_RCC_ClockConfig+0x2de>
 80072cc:	40022000 	.word	0x40022000
 80072d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f003 0304 	and.w	r3, r3, #4
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d008      	beq.n	80072f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072e0:	4b1d      	ldr	r3, [pc, #116]	; (8007358 <HAL_RCC_ClockConfig+0x2e8>)
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	491a      	ldr	r1, [pc, #104]	; (8007358 <HAL_RCC_ClockConfig+0x2e8>)
 80072ee:	4313      	orrs	r3, r2
 80072f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0308 	and.w	r3, r3, #8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80072fe:	4b16      	ldr	r3, [pc, #88]	; (8007358 <HAL_RCC_ClockConfig+0x2e8>)
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	00db      	lsls	r3, r3, #3
 800730c:	4912      	ldr	r1, [pc, #72]	; (8007358 <HAL_RCC_ClockConfig+0x2e8>)
 800730e:	4313      	orrs	r3, r2
 8007310:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8007312:	f000 f829 	bl	8007368 <HAL_RCC_GetSysClockFreq>
 8007316:	4601      	mov	r1, r0
 8007318:	4b0f      	ldr	r3, [pc, #60]	; (8007358 <HAL_RCC_ClockConfig+0x2e8>)
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007320:	22f0      	movs	r2, #240	; 0xf0
 8007322:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007324:	693a      	ldr	r2, [r7, #16]
 8007326:	fa92 f2a2 	rbit	r2, r2
 800732a:	60fa      	str	r2, [r7, #12]
  return result;
 800732c:	68fa      	ldr	r2, [r7, #12]
 800732e:	fab2 f282 	clz	r2, r2
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	40d3      	lsrs	r3, r2
 8007336:	4a09      	ldr	r2, [pc, #36]	; (800735c <HAL_RCC_ClockConfig+0x2ec>)
 8007338:	5cd3      	ldrb	r3, [r2, r3]
 800733a:	fa21 f303 	lsr.w	r3, r1, r3
 800733e:	4a08      	ldr	r2, [pc, #32]	; (8007360 <HAL_RCC_ClockConfig+0x2f0>)
 8007340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8007342:	4b08      	ldr	r3, [pc, #32]	; (8007364 <HAL_RCC_ClockConfig+0x2f4>)
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4618      	mov	r0, r3
 8007348:	f7fc fd3a 	bl	8003dc0 <HAL_InitTick>
  
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3778      	adds	r7, #120	; 0x78
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	40021000 	.word	0x40021000
 800735c:	0800d760 	.word	0x0800d760
 8007360:	20000010 	.word	0x20000010
 8007364:	20000000 	.word	0x20000000

08007368 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007368:	b480      	push	{r7}
 800736a:	b08b      	sub	sp, #44	; 0x2c
 800736c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800736e:	2300      	movs	r3, #0
 8007370:	61fb      	str	r3, [r7, #28]
 8007372:	2300      	movs	r3, #0
 8007374:	61bb      	str	r3, [r7, #24]
 8007376:	2300      	movs	r3, #0
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
 800737a:	2300      	movs	r3, #0
 800737c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800737e:	2300      	movs	r3, #0
 8007380:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8007382:	4b2a      	ldr	r3, [pc, #168]	; (800742c <HAL_RCC_GetSysClockFreq+0xc4>)
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	f003 030c 	and.w	r3, r3, #12
 800738e:	2b04      	cmp	r3, #4
 8007390:	d002      	beq.n	8007398 <HAL_RCC_GetSysClockFreq+0x30>
 8007392:	2b08      	cmp	r3, #8
 8007394:	d003      	beq.n	800739e <HAL_RCC_GetSysClockFreq+0x36>
 8007396:	e03f      	b.n	8007418 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007398:	4b25      	ldr	r3, [pc, #148]	; (8007430 <HAL_RCC_GetSysClockFreq+0xc8>)
 800739a:	623b      	str	r3, [r7, #32]
      break;
 800739c:	e03f      	b.n	800741e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80073a4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80073a8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073aa:	68ba      	ldr	r2, [r7, #8]
 80073ac:	fa92 f2a2 	rbit	r2, r2
 80073b0:	607a      	str	r2, [r7, #4]
  return result;
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	fab2 f282 	clz	r2, r2
 80073b8:	b2d2      	uxtb	r2, r2
 80073ba:	40d3      	lsrs	r3, r2
 80073bc:	4a1d      	ldr	r2, [pc, #116]	; (8007434 <HAL_RCC_GetSysClockFreq+0xcc>)
 80073be:	5cd3      	ldrb	r3, [r2, r3]
 80073c0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80073c2:	4b1a      	ldr	r3, [pc, #104]	; (800742c <HAL_RCC_GetSysClockFreq+0xc4>)
 80073c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073c6:	f003 030f 	and.w	r3, r3, #15
 80073ca:	220f      	movs	r2, #15
 80073cc:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073ce:	693a      	ldr	r2, [r7, #16]
 80073d0:	fa92 f2a2 	rbit	r2, r2
 80073d4:	60fa      	str	r2, [r7, #12]
  return result;
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	fab2 f282 	clz	r2, r2
 80073dc:	b2d2      	uxtb	r2, r2
 80073de:	40d3      	lsrs	r3, r2
 80073e0:	4a15      	ldr	r2, [pc, #84]	; (8007438 <HAL_RCC_GetSysClockFreq+0xd0>)
 80073e2:	5cd3      	ldrb	r3, [r2, r3]
 80073e4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d008      	beq.n	8007402 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80073f0:	4a0f      	ldr	r2, [pc, #60]	; (8007430 <HAL_RCC_GetSysClockFreq+0xc8>)
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	fb02 f303 	mul.w	r3, r2, r3
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007400:	e007      	b.n	8007412 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8007402:	4a0b      	ldr	r2, [pc, #44]	; (8007430 <HAL_RCC_GetSysClockFreq+0xc8>)
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	fbb2 f2f3 	udiv	r2, r2, r3
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	fb02 f303 	mul.w	r3, r2, r3
 8007410:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8007412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007414:	623b      	str	r3, [r7, #32]
      break;
 8007416:	e002      	b.n	800741e <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8007418:	4b05      	ldr	r3, [pc, #20]	; (8007430 <HAL_RCC_GetSysClockFreq+0xc8>)
 800741a:	623b      	str	r3, [r7, #32]
      break;
 800741c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800741e:	6a3b      	ldr	r3, [r7, #32]
}
 8007420:	4618      	mov	r0, r3
 8007422:	372c      	adds	r7, #44	; 0x2c
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr
 800742c:	40021000 	.word	0x40021000
 8007430:	007a1200 	.word	0x007a1200
 8007434:	0800d740 	.word	0x0800d740
 8007438:	0800d750 	.word	0x0800d750

0800743c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007440:	4b03      	ldr	r3, [pc, #12]	; (8007450 <HAL_RCC_GetHCLKFreq+0x14>)
 8007442:	681b      	ldr	r3, [r3, #0]
}
 8007444:	4618      	mov	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	20000010 	.word	0x20000010

08007454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800745a:	f7ff ffef 	bl	800743c <HAL_RCC_GetHCLKFreq>
 800745e:	4601      	mov	r1, r0
 8007460:	4b0b      	ldr	r3, [pc, #44]	; (8007490 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007468:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800746c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	fa92 f2a2 	rbit	r2, r2
 8007474:	603a      	str	r2, [r7, #0]
  return result;
 8007476:	683a      	ldr	r2, [r7, #0]
 8007478:	fab2 f282 	clz	r2, r2
 800747c:	b2d2      	uxtb	r2, r2
 800747e:	40d3      	lsrs	r3, r2
 8007480:	4a04      	ldr	r2, [pc, #16]	; (8007494 <HAL_RCC_GetPCLK1Freq+0x40>)
 8007482:	5cd3      	ldrb	r3, [r2, r3]
 8007484:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8007488:	4618      	mov	r0, r3
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	40021000 	.word	0x40021000
 8007494:	0800d770 	.word	0x0800d770

08007498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800749e:	f7ff ffcd 	bl	800743c <HAL_RCC_GetHCLKFreq>
 80074a2:	4601      	mov	r1, r0
 80074a4:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80074ac:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80074b0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074b2:	687a      	ldr	r2, [r7, #4]
 80074b4:	fa92 f2a2 	rbit	r2, r2
 80074b8:	603a      	str	r2, [r7, #0]
  return result;
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	fab2 f282 	clz	r2, r2
 80074c0:	b2d2      	uxtb	r2, r2
 80074c2:	40d3      	lsrs	r3, r2
 80074c4:	4a04      	ldr	r2, [pc, #16]	; (80074d8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80074c6:	5cd3      	ldrb	r3, [r2, r3]
 80074c8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	40021000 	.word	0x40021000
 80074d8:	0800d770 	.word	0x0800d770

080074dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b092      	sub	sp, #72	; 0x48
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80074e4:	2300      	movs	r3, #0
 80074e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 80d7 	beq.w	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80074fa:	2300      	movs	r3, #0
 80074fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007500:	4b4e      	ldr	r3, [pc, #312]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007508:	2b00      	cmp	r3, #0
 800750a:	d10e      	bne.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800750c:	4b4b      	ldr	r3, [pc, #300]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	4a4a      	ldr	r2, [pc, #296]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007516:	61d3      	str	r3, [r2, #28]
 8007518:	4b48      	ldr	r3, [pc, #288]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800751a:	69db      	ldr	r3, [r3, #28]
 800751c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007520:	60bb      	str	r3, [r7, #8]
 8007522:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007524:	2301      	movs	r3, #1
 8007526:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800752a:	4b45      	ldr	r3, [pc, #276]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007532:	2b00      	cmp	r3, #0
 8007534:	d118      	bne.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007536:	4b42      	ldr	r3, [pc, #264]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a41      	ldr	r2, [pc, #260]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800753c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007540:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007542:	f7fc fc81 	bl	8003e48 <HAL_GetTick>
 8007546:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007548:	e008      	b.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800754a:	f7fc fc7d 	bl	8003e48 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b64      	cmp	r3, #100	; 0x64
 8007556:	d901      	bls.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e1d6      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800755c:	4b38      	ldr	r3, [pc, #224]	; (8007640 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0f0      	beq.n	800754a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007568:	4b34      	ldr	r3, [pc, #208]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800756a:	6a1b      	ldr	r3, [r3, #32]
 800756c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007570:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007574:	2b00      	cmp	r3, #0
 8007576:	f000 8084 	beq.w	8007682 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007582:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007584:	429a      	cmp	r2, r3
 8007586:	d07c      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007588:	4b2c      	ldr	r3, [pc, #176]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007592:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007596:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	fa93 f3a3 	rbit	r3, r3
 800759e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80075a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80075a2:	fab3 f383 	clz	r3, r3
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	461a      	mov	r2, r3
 80075aa:	4b26      	ldr	r3, [pc, #152]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075ac:	4413      	add	r3, r2
 80075ae:	009b      	lsls	r3, r3, #2
 80075b0:	461a      	mov	r2, r3
 80075b2:	2301      	movs	r3, #1
 80075b4:	6013      	str	r3, [r2, #0]
 80075b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80075ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075be:	fa93 f3a3 	rbit	r3, r3
 80075c2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80075c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80075c6:	fab3 f383 	clz	r3, r3
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	461a      	mov	r2, r3
 80075ce:	4b1d      	ldr	r3, [pc, #116]	; (8007644 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80075d0:	4413      	add	r3, r2
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	461a      	mov	r2, r3
 80075d6:	2300      	movs	r3, #0
 80075d8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80075da:	4a18      	ldr	r2, [pc, #96]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80075dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075de:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80075e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075e2:	f003 0301 	and.w	r3, r3, #1
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d04b      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075ea:	f7fc fc2d 	bl	8003e48 <HAL_GetTick>
 80075ee:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075f0:	e00a      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80075f2:	f7fc fc29 	bl	8003e48 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007600:	4293      	cmp	r3, r2
 8007602:	d901      	bls.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e180      	b.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8007608:	2302      	movs	r3, #2
 800760a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800760c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800760e:	fa93 f3a3 	rbit	r3, r3
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
 8007614:	2302      	movs	r3, #2
 8007616:	623b      	str	r3, [r7, #32]
 8007618:	6a3b      	ldr	r3, [r7, #32]
 800761a:	fa93 f3a3 	rbit	r3, r3
 800761e:	61fb      	str	r3, [r7, #28]
  return result;
 8007620:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007622:	fab3 f383 	clz	r3, r3
 8007626:	b2db      	uxtb	r3, r3
 8007628:	095b      	lsrs	r3, r3, #5
 800762a:	b2db      	uxtb	r3, r3
 800762c:	f043 0302 	orr.w	r3, r3, #2
 8007630:	b2db      	uxtb	r3, r3
 8007632:	2b02      	cmp	r3, #2
 8007634:	d108      	bne.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8007636:	4b01      	ldr	r3, [pc, #4]	; (800763c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8007638:	6a1b      	ldr	r3, [r3, #32]
 800763a:	e00d      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800763c:	40021000 	.word	0x40021000
 8007640:	40007000 	.word	0x40007000
 8007644:	10908100 	.word	0x10908100
 8007648:	2302      	movs	r3, #2
 800764a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	fa93 f3a3 	rbit	r3, r3
 8007652:	617b      	str	r3, [r7, #20]
 8007654:	4ba0      	ldr	r3, [pc, #640]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	2202      	movs	r2, #2
 800765a:	613a      	str	r2, [r7, #16]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	fa92 f2a2 	rbit	r2, r2
 8007662:	60fa      	str	r2, [r7, #12]
  return result;
 8007664:	68fa      	ldr	r2, [r7, #12]
 8007666:	fab2 f282 	clz	r2, r2
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007670:	b2d2      	uxtb	r2, r2
 8007672:	f002 021f 	and.w	r2, r2, #31
 8007676:	2101      	movs	r1, #1
 8007678:	fa01 f202 	lsl.w	r2, r1, r2
 800767c:	4013      	ands	r3, r2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0b7      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8007682:	4b95      	ldr	r3, [pc, #596]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	4992      	ldr	r1, [pc, #584]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007690:	4313      	orrs	r3, r2
 8007692:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8007694:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007698:	2b01      	cmp	r3, #1
 800769a:	d105      	bne.n	80076a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800769c:	4b8e      	ldr	r3, [pc, #568]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800769e:	69db      	ldr	r3, [r3, #28]
 80076a0:	4a8d      	ldr	r2, [pc, #564]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076a6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f003 0301 	and.w	r3, r3, #1
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d008      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076b4:	4b88      	ldr	r3, [pc, #544]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076b8:	f023 0203 	bic.w	r2, r3, #3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	4985      	ldr	r1, [pc, #532]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076c2:	4313      	orrs	r3, r2
 80076c4:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0302 	and.w	r3, r3, #2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d008      	beq.n	80076e4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076d2:	4b81      	ldr	r3, [pc, #516]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	68db      	ldr	r3, [r3, #12]
 80076de:	497e      	ldr	r1, [pc, #504]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076e0:	4313      	orrs	r3, r2
 80076e2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0304 	and.w	r3, r3, #4
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80076f0:	4b79      	ldr	r3, [pc, #484]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	4976      	ldr	r1, [pc, #472]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0320 	and.w	r3, r3, #32
 800770a:	2b00      	cmp	r3, #0
 800770c:	d008      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800770e:	4b72      	ldr	r3, [pc, #456]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007712:	f023 0210 	bic.w	r2, r3, #16
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	496f      	ldr	r1, [pc, #444]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800771c:	4313      	orrs	r3, r2
 800771e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007728:	2b00      	cmp	r3, #0
 800772a:	d008      	beq.n	800773e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800772c:	4b6a      	ldr	r3, [pc, #424]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007738:	4967      	ldr	r1, [pc, #412]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800773a:	4313      	orrs	r3, r2
 800773c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007746:	2b00      	cmp	r3, #0
 8007748:	d008      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800774a:	4b63      	ldr	r3, [pc, #396]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800774c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774e:	f023 0220 	bic.w	r2, r3, #32
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	4960      	ldr	r1, [pc, #384]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007758:	4313      	orrs	r3, r2
 800775a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007764:	2b00      	cmp	r3, #0
 8007766:	d008      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007768:	4b5b      	ldr	r3, [pc, #364]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800776a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800776c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	4958      	ldr	r1, [pc, #352]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007776:	4313      	orrs	r3, r2
 8007778:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0308 	and.w	r3, r3, #8
 8007782:	2b00      	cmp	r3, #0
 8007784:	d008      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007786:	4b54      	ldr	r3, [pc, #336]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	695b      	ldr	r3, [r3, #20]
 8007792:	4951      	ldr	r1, [pc, #324]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007794:	4313      	orrs	r3, r2
 8007796:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0310 	and.w	r3, r3, #16
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d008      	beq.n	80077b6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80077a4:	4b4c      	ldr	r3, [pc, #304]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80077a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	4949      	ldr	r1, [pc, #292]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d008      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80077c2:	4b45      	ldr	r3, [pc, #276]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077ce:	4942      	ldr	r1, [pc, #264]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80077d0:	4313      	orrs	r3, r2
 80077d2:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d008      	beq.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80077e0:	4b3d      	ldr	r3, [pc, #244]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80077e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	493a      	ldr	r1, [pc, #232]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80077ee:	4313      	orrs	r3, r2
 80077f0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d008      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80077fe:	4b36      	ldr	r3, [pc, #216]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780a:	4933      	ldr	r1, [pc, #204]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800780c:	4313      	orrs	r3, r2
 800780e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d008      	beq.n	800782e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800781c:	4b2e      	ldr	r3, [pc, #184]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800781e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007828:	492b      	ldr	r1, [pc, #172]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800782a:	4313      	orrs	r3, r2
 800782c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d008      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800783a:	4b27      	ldr	r3, [pc, #156]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007846:	4924      	ldr	r1, [pc, #144]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007848:	4313      	orrs	r3, r2
 800784a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d008      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8007858:	4b1f      	ldr	r3, [pc, #124]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800785a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007864:	491c      	ldr	r1, [pc, #112]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007866:	4313      	orrs	r3, r2
 8007868:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d008      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8007876:	4b18      	ldr	r3, [pc, #96]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800787a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007882:	4915      	ldr	r1, [pc, #84]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007884:	4313      	orrs	r3, r2
 8007886:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007890:	2b00      	cmp	r3, #0
 8007892:	d008      	beq.n	80078a6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007894:	4b10      	ldr	r3, [pc, #64]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8007896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007898:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a0:	490d      	ldr	r1, [pc, #52]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d008      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80078b2:	4b09      	ldr	r3, [pc, #36]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80078b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078b6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078be:	4906      	ldr	r1, [pc, #24]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00c      	beq.n	80078ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80078d0:	4b01      	ldr	r3, [pc, #4]	; (80078d8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80078d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078d4:	e002      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x400>
 80078d6:	bf00      	nop
 80078d8:	40021000 	.word	0x40021000
 80078dc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078e4:	490b      	ldr	r1, [pc, #44]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80078e6:	4313      	orrs	r3, r2
 80078e8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d008      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80078f6:	4b07      	ldr	r3, [pc, #28]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80078f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fa:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007902:	4904      	ldr	r1, [pc, #16]	; (8007914 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8007904:	4313      	orrs	r3, r2
 8007906:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	3748      	adds	r7, #72	; 0x48
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	40021000 	.word	0x40021000

08007918 <HAL_RTC_Init>:
  *         in the RTC_InitTypeDef structure and initialize the associated handle.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d101      	bne.n	800792a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8007926:	2301      	movs	r3, #1
 8007928:	e083      	b.n	8007a32 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	7f5b      	ldrb	r3, [r3, #29]
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b00      	cmp	r3, #0
 8007932:	d105      	bne.n	8007940 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f003 f842 	bl	800a9c4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	22ca      	movs	r2, #202	; 0xca
 800794c:	625a      	str	r2, [r3, #36]	; 0x24
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	2253      	movs	r2, #83	; 0x53
 8007954:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 fb7a 	bl	8008050 <RTC_EnterInitMode>
 800795c:	4603      	mov	r3, r0
 800795e:	2b00      	cmp	r3, #0
 8007960:	d008      	beq.n	8007974 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	22ff      	movs	r2, #255	; 0xff
 8007968:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2204      	movs	r2, #4
 800796e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e05e      	b.n	8007a32 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	6812      	ldr	r2, [r2, #0]
 800797e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007982:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007986:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	6899      	ldr	r1, [r3, #8]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685a      	ldr	r2, [r3, #4]
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	68d2      	ldr	r2, [r2, #12]
 80079ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	6919      	ldr	r1, [r3, #16]
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	041a      	lsls	r2, r3, #16
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	430a      	orrs	r2, r1
 80079c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	68da      	ldr	r2, [r3, #12]
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079d2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	f003 0320 	and.w	r3, r3, #32
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10e      	bne.n	8007a00 <HAL_RTC_Init+0xe8>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fb0c 	bl	8008000 <HAL_RTC_WaitForSynchro>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d008      	beq.n	8007a00 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	22ff      	movs	r2, #255	; 0xff
 80079f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2204      	movs	r2, #4
 80079fa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80079fc:	2301      	movs	r3, #1
 80079fe:	e018      	b.n	8007a32 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007a0e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	699a      	ldr	r2, [r3, #24]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	22ff      	movs	r2, #255	; 0xff
 8007a28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007a30:	2300      	movs	r3, #0
  }
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007a3a:	b590      	push	{r4, r7, lr}
 8007a3c:	b087      	sub	sp, #28
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	60f8      	str	r0, [r7, #12]
 8007a42:	60b9      	str	r1, [r7, #8]
 8007a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	7f1b      	ldrb	r3, [r3, #28]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d101      	bne.n	8007a56 <HAL_RTC_SetTime+0x1c>
 8007a52:	2302      	movs	r3, #2
 8007a54:	e0aa      	b.n	8007bac <HAL_RTC_SetTime+0x172>
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	2202      	movs	r2, #2
 8007a60:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d126      	bne.n	8007ab6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d102      	bne.n	8007a7c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f000 fb11 	bl	80080a8 <RTC_ByteToBcd2>
 8007a86:	4603      	mov	r3, r0
 8007a88:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	785b      	ldrb	r3, [r3, #1]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f000 fb0a 	bl	80080a8 <RTC_ByteToBcd2>
 8007a94:	4603      	mov	r3, r0
 8007a96:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007a98:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	789b      	ldrb	r3, [r3, #2]
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 fb02 	bl	80080a8 <RTC_ByteToBcd2>
 8007aa4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007aa6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	78db      	ldrb	r3, [r3, #3]
 8007aae:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
 8007ab4:	e018      	b.n	8007ae8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	689b      	ldr	r3, [r3, #8]
 8007abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d102      	bne.n	8007aca <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	785b      	ldrb	r3, [r3, #1]
 8007ad4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007ad6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8007adc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	78db      	ldrb	r3, [r3, #3]
 8007ae2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	22ca      	movs	r2, #202	; 0xca
 8007aee:	625a      	str	r2, [r3, #36]	; 0x24
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	2253      	movs	r2, #83	; 0x53
 8007af6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 faa9 	bl	8008050 <RTC_EnterInitMode>
 8007afe:	4603      	mov	r3, r0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d00b      	beq.n	8007b1c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	22ff      	movs	r2, #255	; 0xff
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2204      	movs	r2, #4
 8007b10:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2200      	movs	r2, #0
 8007b16:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e047      	b.n	8007bac <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007b26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007b2a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BCK);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	689a      	ldr	r2, [r3, #8]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007b3a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	6899      	ldr	r1, [r3, #8]
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	68da      	ldr	r2, [r3, #12]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	691b      	ldr	r3, [r3, #16]
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68da      	ldr	r2, [r3, #12]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b62:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689b      	ldr	r3, [r3, #8]
 8007b6a:	f003 0320 	and.w	r3, r3, #32
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d111      	bne.n	8007b96 <HAL_RTC_SetTime+0x15c>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007b72:	68f8      	ldr	r0, [r7, #12]
 8007b74:	f000 fa44 	bl	8008000 <HAL_RTC_WaitForSynchro>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00b      	beq.n	8007b96 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	22ff      	movs	r2, #255	; 0xff
 8007b84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2204      	movs	r2, #4
 8007b8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007b92:	2301      	movs	r3, #1
 8007b94:	e00a      	b.n	8007bac <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	22ff      	movs	r2, #255	; 0xff
 8007b9c:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007baa:	2300      	movs	r3, #0
  }
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	371c      	adds	r7, #28
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd90      	pop	{r4, r7, pc}

08007bb4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007bb4:	b590      	push	{r4, r7, lr}
 8007bb6:	b087      	sub	sp, #28
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	60f8      	str	r0, [r7, #12]
 8007bbc:	60b9      	str	r1, [r7, #8]
 8007bbe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	7f1b      	ldrb	r3, [r3, #28]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	d101      	bne.n	8007bd0 <HAL_RTC_SetDate+0x1c>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e094      	b.n	8007cfa <HAL_RTC_SetDate+0x146>
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2202      	movs	r2, #2
 8007bda:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10e      	bne.n	8007c00 <HAL_RTC_SetDate+0x4c>
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	785b      	ldrb	r3, [r3, #1]
 8007be6:	f003 0310 	and.w	r3, r3, #16
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d008      	beq.n	8007c00 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	785b      	ldrb	r3, [r3, #1]
 8007bf2:	f023 0310 	bic.w	r3, r3, #16
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	330a      	adds	r3, #10
 8007bfa:	b2da      	uxtb	r2, r3
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d11c      	bne.n	8007c40 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	78db      	ldrb	r3, [r3, #3]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 fa4c 	bl	80080a8 <RTC_ByteToBcd2>
 8007c10:	4603      	mov	r3, r0
 8007c12:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	785b      	ldrb	r3, [r3, #1]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f000 fa45 	bl	80080a8 <RTC_ByteToBcd2>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007c22:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	789b      	ldrb	r3, [r3, #2]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 fa3d 	bl	80080a8 <RTC_ByteToBcd2>
 8007c2e:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8007c30:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007c3a:	4313      	orrs	r3, r2
 8007c3c:	617b      	str	r3, [r7, #20]
 8007c3e:	e00e      	b.n	8007c5e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	78db      	ldrb	r3, [r3, #3]
 8007c44:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	785b      	ldrb	r3, [r3, #1]
 8007c4a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007c4c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8007c4e:	68ba      	ldr	r2, [r7, #8]
 8007c50:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8007c52:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	781b      	ldrb	r3, [r3, #0]
 8007c58:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	22ca      	movs	r2, #202	; 0xca
 8007c64:	625a      	str	r2, [r3, #36]	; 0x24
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2253      	movs	r2, #83	; 0x53
 8007c6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f000 f9ee 	bl	8008050 <RTC_EnterInitMode>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00b      	beq.n	8007c92 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	22ff      	movs	r2, #255	; 0xff
 8007c80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2204      	movs	r2, #4
 8007c86:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e033      	b.n	8007cfa <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007ca0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68da      	ldr	r2, [r3, #12]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cb0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0U, wait for synchro else this check is not needed */
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	f003 0320 	and.w	r3, r3, #32
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d111      	bne.n	8007ce4 <HAL_RTC_SetDate+0x130>
    {
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 f99d 	bl	8008000 <HAL_RTC_WaitForSynchro>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d00b      	beq.n	8007ce4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	22ff      	movs	r2, #255	; 0xff
 8007cd2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2204      	movs	r2, #4
 8007cd8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2200      	movs	r2, #0
 8007cde:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e00a      	b.n	8007cfa <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	22ff      	movs	r2, #255	; 0xff
 8007cea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
  }
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd90      	pop	{r4, r7, pc}
	...

08007d04 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007d04:	b590      	push	{r4, r7, lr}
 8007d06:	b089      	sub	sp, #36	; 0x24
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	60f8      	str	r0, [r7, #12]
 8007d0c:	60b9      	str	r1, [r7, #8]
 8007d0e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8007d10:	2300      	movs	r3, #0
 8007d12:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007d14:	2300      	movs	r3, #0
 8007d16:	61fb      	str	r3, [r7, #28]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	7f1b      	ldrb	r3, [r3, #28]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d101      	bne.n	8007d28 <HAL_RTC_SetAlarm_IT+0x24>
 8007d24:	2302      	movs	r3, #2
 8007d26:	e11f      	b.n	8007f68 <HAL_RTC_SetAlarm_IT+0x264>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2202      	movs	r2, #2
 8007d32:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d137      	bne.n	8007daa <HAL_RTC_SetAlarm_IT+0xa6>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d102      	bne.n	8007d4e <HAL_RTC_SetAlarm_IT+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f000 f9a8 	bl	80080a8 <RTC_ByteToBcd2>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007d5c:	68bb      	ldr	r3, [r7, #8]
 8007d5e:	785b      	ldrb	r3, [r3, #1]
 8007d60:	4618      	mov	r0, r3
 8007d62:	f000 f9a1 	bl	80080a8 <RTC_ByteToBcd2>
 8007d66:	4603      	mov	r3, r0
 8007d68:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007d6a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	789b      	ldrb	r3, [r3, #2]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f000 f999 	bl	80080a8 <RTC_ByteToBcd2>
 8007d76:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007d78:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	78db      	ldrb	r3, [r3, #3]
 8007d80:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007d82:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 f98b 	bl	80080a8 <RTC_ByteToBcd2>
 8007d92:	4603      	mov	r3, r0
 8007d94:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007d96:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007d9e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007da4:	4313      	orrs	r3, r2
 8007da6:	61fb      	str	r3, [r7, #28]
 8007da8:	e023      	b.n	8007df2 <HAL_RTC_SetAlarm_IT+0xee>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d102      	bne.n	8007dbe <HAL_RTC_SetAlarm_IT+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	785b      	ldrb	r3, [r3, #1]
 8007dc8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007dca:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8007dd0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	78db      	ldrb	r3, [r3, #3]
 8007dd6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8007dd8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007de0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8007de2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007de8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007dee:	4313      	orrs	r3, r2
 8007df0:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	685a      	ldr	r2, [r3, #4]
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	22ca      	movs	r2, #202	; 0xca
 8007e04:	625a      	str	r2, [r3, #36]	; 0x24
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2253      	movs	r2, #83	; 0x53
 8007e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e16:	d148      	bne.n	8007eaa <HAL_RTC_SetAlarm_IT+0x1a6>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	689a      	ldr	r2, [r3, #8]
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e26:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	b2da      	uxtb	r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007e38:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007e3a:	f7fc f805 	bl	8003e48 <HAL_GetTick>
 8007e3e:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007e40:	e013      	b.n	8007e6a <HAL_RTC_SetAlarm_IT+0x166>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007e42:	f7fc f801 	bl	8003e48 <HAL_GetTick>
 8007e46:	4602      	mov	r2, r0
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007e50:	d90b      	bls.n	8007e6a <HAL_RTC_SetAlarm_IT+0x166>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	22ff      	movs	r2, #255	; 0xff
 8007e58:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2203      	movs	r2, #3
 8007e5e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	2200      	movs	r2, #0
 8007e64:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e07e      	b.n	8007f68 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f003 0301 	and.w	r3, r3, #1
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0e4      	beq.n	8007e42 <HAL_RTC_SetAlarm_IT+0x13e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	69fa      	ldr	r2, [r7, #28]
 8007e7e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e96:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	689a      	ldr	r2, [r3, #8]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007ea6:	609a      	str	r2, [r3, #8]
 8007ea8:	e047      	b.n	8007f3a <HAL_RTC_SetAlarm_IT+0x236>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007eb8:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	68db      	ldr	r3, [r3, #12]
 8007ec0:	b2da      	uxtb	r2, r3
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007eca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8007ecc:	f7fb ffbc 	bl	8003e48 <HAL_GetTick>
 8007ed0:	61b8      	str	r0, [r7, #24]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007ed2:	e013      	b.n	8007efc <HAL_RTC_SetAlarm_IT+0x1f8>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007ed4:	f7fb ffb8 	bl	8003e48 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	1ad3      	subs	r3, r2, r3
 8007ede:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007ee2:	d90b      	bls.n	8007efc <HAL_RTC_SetAlarm_IT+0x1f8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	22ff      	movs	r2, #255	; 0xff
 8007eea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2203      	movs	r2, #3
 8007ef0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007ef8:	2303      	movs	r3, #3
 8007efa:	e035      	b.n	8007f68 <HAL_RTC_SetAlarm_IT+0x264>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d0e4      	beq.n	8007ed4 <HAL_RTC_SetAlarm_IT+0x1d0>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69fa      	ldr	r2, [r7, #28]
 8007f10:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	689a      	ldr	r2, [r3, #8]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f28:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f38:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007f3a:	4b0d      	ldr	r3, [pc, #52]	; (8007f70 <HAL_RTC_SetAlarm_IT+0x26c>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a0c      	ldr	r2, [pc, #48]	; (8007f70 <HAL_RTC_SetAlarm_IT+0x26c>)
 8007f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f44:	6013      	str	r3, [r2, #0]

  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8007f46:	4b0a      	ldr	r3, [pc, #40]	; (8007f70 <HAL_RTC_SetAlarm_IT+0x26c>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	4a09      	ldr	r2, [pc, #36]	; (8007f70 <HAL_RTC_SetAlarm_IT+0x26c>)
 8007f4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f50:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	22ff      	movs	r2, #255	; 0xff
 8007f58:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2201      	movs	r2, #1
 8007f5e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3724      	adds	r7, #36	; 0x24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd90      	pop	{r4, r7, pc}
 8007f70:	40010400 	.word	0x40010400

08007f74 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != RESET)
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d012      	beq.n	8007fb0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d00b      	beq.n	8007fb0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f002 fbcb 	bl	800a734 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	b2da      	uxtb	r2, r3
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8007fae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != RESET)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d012      	beq.n	8007fe4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != RESET)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d00b      	beq.n	8007fe4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f002 fbdf 	bl	800a790 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	b2da      	uxtb	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f462 7220 	orn	r2, r2, #640	; 0x280
 8007fe2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8007fe4:	4b05      	ldr	r3, [pc, #20]	; (8007ffc <HAL_RTC_AlarmIRQHandler+0x88>)
 8007fe6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007fea:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	775a      	strb	r2, [r3, #29]
}
 8007ff2:	bf00      	nop
 8007ff4:	3708      	adds	r7, #8
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
 8007ffa:	bf00      	nop
 8007ffc:	40010400 	.word	0x40010400

08008000 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68da      	ldr	r2, [r3, #12]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800801a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800801c:	f7fb ff14 	bl	8003e48 <HAL_GetTick>
 8008020:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008022:	e009      	b.n	8008038 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008024:	f7fb ff10 	bl	8003e48 <HAL_GetTick>
 8008028:	4602      	mov	r2, r0
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	1ad3      	subs	r3, r2, r3
 800802e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008032:	d901      	bls.n	8008038 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008034:	2303      	movs	r3, #3
 8008036:	e007      	b.n	8008048 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	68db      	ldr	r3, [r3, #12]
 800803e:	f003 0320 	and.w	r3, r3, #32
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0ee      	beq.n	8008024 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008046:	2300      	movs	r3, #0
}
 8008048:	4618      	mov	r0, r3
 800804a:	3710      	adds	r7, #16
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}

08008050 <RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - HAL_OK : RTC is in Init mode
  *          - HAL_TIMEOUT : RTC is not in Init mode and in Timeout
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b084      	sub	sp, #16
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008058:	2300      	movs	r3, #0
 800805a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	68db      	ldr	r3, [r3, #12]
 8008062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008066:	2b00      	cmp	r3, #0
 8008068:	d119      	bne.n	800809e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008072:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008074:	f7fb fee8 	bl	8003e48 <HAL_GetTick>
 8008078:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800807a:	e009      	b.n	8008090 <RTC_EnterInitMode+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800807c:	f7fb fee4 	bl	8003e48 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800808a:	d901      	bls.n	8008090 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800808c:	2303      	movs	r3, #3
 800808e:	e007      	b.n	80080a0 <RTC_EnterInitMode+0x50>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	68db      	ldr	r3, [r3, #12]
 8008096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809a:	2b00      	cmp	r3, #0
 800809c:	d0ee      	beq.n	800807c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b085      	sub	sp, #20
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	4603      	mov	r3, r0
 80080b0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80080b2:	2300      	movs	r3, #0
 80080b4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 80080b6:	e005      	b.n	80080c4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	3301      	adds	r3, #1
 80080bc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80080be:	79fb      	ldrb	r3, [r7, #7]
 80080c0:	3b0a      	subs	r3, #10
 80080c2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80080c4:	79fb      	ldrb	r3, [r7, #7]
 80080c6:	2b09      	cmp	r3, #9
 80080c8:	d8f6      	bhi.n	80080b8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	b2da      	uxtb	r2, r3
 80080d2:	79fb      	ldrb	r3, [r7, #7]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	b2db      	uxtb	r3, r3
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d101      	bne.n	80080f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80080f2:	2301      	movs	r3, #1
 80080f4:	e01d      	b.n	8008132 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d106      	bne.n	8008110 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f002 fc86 	bl	800aa1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681a      	ldr	r2, [r3, #0]
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	3304      	adds	r3, #4
 8008120:	4619      	mov	r1, r3
 8008122:	4610      	mov	r0, r2
 8008124:	f000 f930 	bl	8008388 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
	...

0800813c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800813c:	b480      	push	{r7}
 800813e:	b085      	sub	sp, #20
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	4b0e      	ldr	r3, [pc, #56]	; (800818c <HAL_TIM_Base_Start+0x50>)
 8008154:	4013      	ands	r3, r2
 8008156:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2b06      	cmp	r3, #6
 800815c:	d00b      	beq.n	8008176 <HAL_TIM_Base_Start+0x3a>
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008164:	d007      	beq.n	8008176 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f042 0201 	orr.w	r2, r2, #1
 8008174:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2201      	movs	r2, #1
 800817a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3714      	adds	r7, #20
 8008184:	46bd      	mov	sp, r7
 8008186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818a:	4770      	bx	lr
 800818c:	00010007 	.word	0x00010007

08008190 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b084      	sub	sp, #16
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d101      	bne.n	80081a8 <HAL_TIM_ConfigClockSource+0x18>
 80081a4:	2302      	movs	r3, #2
 80081a6:	e0a8      	b.n	80082fa <HAL_TIM_ConfigClockSource+0x16a>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2201      	movs	r2, #1
 80081ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80081c6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081d2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b40      	cmp	r3, #64	; 0x40
 80081e2:	d067      	beq.n	80082b4 <HAL_TIM_ConfigClockSource+0x124>
 80081e4:	2b40      	cmp	r3, #64	; 0x40
 80081e6:	d80b      	bhi.n	8008200 <HAL_TIM_ConfigClockSource+0x70>
 80081e8:	2b10      	cmp	r3, #16
 80081ea:	d073      	beq.n	80082d4 <HAL_TIM_ConfigClockSource+0x144>
 80081ec:	2b10      	cmp	r3, #16
 80081ee:	d802      	bhi.n	80081f6 <HAL_TIM_ConfigClockSource+0x66>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d06f      	beq.n	80082d4 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80081f4:	e078      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	d06c      	beq.n	80082d4 <HAL_TIM_ConfigClockSource+0x144>
 80081fa:	2b30      	cmp	r3, #48	; 0x30
 80081fc:	d06a      	beq.n	80082d4 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80081fe:	e073      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008200:	2b70      	cmp	r3, #112	; 0x70
 8008202:	d00d      	beq.n	8008220 <HAL_TIM_ConfigClockSource+0x90>
 8008204:	2b70      	cmp	r3, #112	; 0x70
 8008206:	d804      	bhi.n	8008212 <HAL_TIM_ConfigClockSource+0x82>
 8008208:	2b50      	cmp	r3, #80	; 0x50
 800820a:	d033      	beq.n	8008274 <HAL_TIM_ConfigClockSource+0xe4>
 800820c:	2b60      	cmp	r3, #96	; 0x60
 800820e:	d041      	beq.n	8008294 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8008210:	e06a      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8008212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008216:	d066      	beq.n	80082e6 <HAL_TIM_ConfigClockSource+0x156>
 8008218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800821c:	d017      	beq.n	800824e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800821e:	e063      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6818      	ldr	r0, [r3, #0]
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	6899      	ldr	r1, [r3, #8]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	685a      	ldr	r2, [r3, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f000 fa4a 	bl	80086c8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008242:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	609a      	str	r2, [r3, #8]
      break;
 800824c:	e04c      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6818      	ldr	r0, [r3, #0]
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	6899      	ldr	r1, [r3, #8]
 8008256:	683b      	ldr	r3, [r7, #0]
 8008258:	685a      	ldr	r2, [r3, #4]
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	68db      	ldr	r3, [r3, #12]
 800825e:	f000 fa33 	bl	80086c8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	689a      	ldr	r2, [r3, #8]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008270:	609a      	str	r2, [r3, #8]
      break;
 8008272:	e039      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	6859      	ldr	r1, [r3, #4]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	461a      	mov	r2, r3
 8008282:	f000 f9a7 	bl	80085d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2150      	movs	r1, #80	; 0x50
 800828c:	4618      	mov	r0, r3
 800828e:	f000 fa00 	bl	8008692 <TIM_ITRx_SetConfig>
      break;
 8008292:	e029      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6818      	ldr	r0, [r3, #0]
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	6859      	ldr	r1, [r3, #4]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	461a      	mov	r2, r3
 80082a2:	f000 f9c6 	bl	8008632 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2160      	movs	r1, #96	; 0x60
 80082ac:	4618      	mov	r0, r3
 80082ae:	f000 f9f0 	bl	8008692 <TIM_ITRx_SetConfig>
      break;
 80082b2:	e019      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6818      	ldr	r0, [r3, #0]
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	6859      	ldr	r1, [r3, #4]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	461a      	mov	r2, r3
 80082c2:	f000 f987 	bl	80085d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	2140      	movs	r1, #64	; 0x40
 80082cc:	4618      	mov	r0, r3
 80082ce:	f000 f9e0 	bl	8008692 <TIM_ITRx_SetConfig>
      break;
 80082d2:	e009      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681a      	ldr	r2, [r3, #0]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4619      	mov	r1, r3
 80082de:	4610      	mov	r0, r2
 80082e0:	f000 f9d7 	bl	8008692 <TIM_ITRx_SetConfig>
      break;
 80082e4:	e000      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80082e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3710      	adds	r7, #16
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
 800830a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008312:	2b01      	cmp	r3, #1
 8008314:	d101      	bne.n	800831a <HAL_TIM_SlaveConfigSynchro+0x18>
 8008316:	2302      	movs	r3, #2
 8008318:	e031      	b.n	800837e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2202      	movs	r2, #2
 8008326:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800832a:	6839      	ldr	r1, [r7, #0]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f8c9 	bl	80084c4 <TIM_SlaveTimer_SetConfig>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d009      	beq.n	800834c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2200      	movs	r2, #0
 8008344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008348:	2301      	movs	r3, #1
 800834a:	e018      	b.n	800837e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68da      	ldr	r2, [r3, #12]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800835a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	68da      	ldr	r2, [r3, #12]
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800836a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800837c:	2300      	movs	r3, #0
}
 800837e:	4618      	mov	r0, r3
 8008380:	3708      	adds	r7, #8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
	...

08008388 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	4a42      	ldr	r2, [pc, #264]	; (80084a4 <TIM_Base_SetConfig+0x11c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d013      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a6:	d00f      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a3f      	ldr	r2, [pc, #252]	; (80084a8 <TIM_Base_SetConfig+0x120>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d00b      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a3e      	ldr	r2, [pc, #248]	; (80084ac <TIM_Base_SetConfig+0x124>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d007      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a3d      	ldr	r2, [pc, #244]	; (80084b0 <TIM_Base_SetConfig+0x128>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d003      	beq.n	80083c8 <TIM_Base_SetConfig+0x40>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a3c      	ldr	r2, [pc, #240]	; (80084b4 <TIM_Base_SetConfig+0x12c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d108      	bne.n	80083da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	68fa      	ldr	r2, [r7, #12]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a31      	ldr	r2, [pc, #196]	; (80084a4 <TIM_Base_SetConfig+0x11c>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d01f      	beq.n	8008422 <TIM_Base_SetConfig+0x9a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083e8:	d01b      	beq.n	8008422 <TIM_Base_SetConfig+0x9a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a2e      	ldr	r2, [pc, #184]	; (80084a8 <TIM_Base_SetConfig+0x120>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d017      	beq.n	8008422 <TIM_Base_SetConfig+0x9a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a2d      	ldr	r2, [pc, #180]	; (80084ac <TIM_Base_SetConfig+0x124>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d013      	beq.n	8008422 <TIM_Base_SetConfig+0x9a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a2c      	ldr	r2, [pc, #176]	; (80084b0 <TIM_Base_SetConfig+0x128>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d00f      	beq.n	8008422 <TIM_Base_SetConfig+0x9a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a2c      	ldr	r2, [pc, #176]	; (80084b8 <TIM_Base_SetConfig+0x130>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d00b      	beq.n	8008422 <TIM_Base_SetConfig+0x9a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a2b      	ldr	r2, [pc, #172]	; (80084bc <TIM_Base_SetConfig+0x134>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d007      	beq.n	8008422 <TIM_Base_SetConfig+0x9a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a2a      	ldr	r2, [pc, #168]	; (80084c0 <TIM_Base_SetConfig+0x138>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d003      	beq.n	8008422 <TIM_Base_SetConfig+0x9a>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a25      	ldr	r2, [pc, #148]	; (80084b4 <TIM_Base_SetConfig+0x12c>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d108      	bne.n	8008434 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008428:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	4313      	orrs	r3, r2
 8008432:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	695b      	ldr	r3, [r3, #20]
 800843e:	4313      	orrs	r3, r2
 8008440:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	689a      	ldr	r2, [r3, #8]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a12      	ldr	r2, [pc, #72]	; (80084a4 <TIM_Base_SetConfig+0x11c>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d013      	beq.n	8008488 <TIM_Base_SetConfig+0x100>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a13      	ldr	r2, [pc, #76]	; (80084b0 <TIM_Base_SetConfig+0x128>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d00f      	beq.n	8008488 <TIM_Base_SetConfig+0x100>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4a13      	ldr	r2, [pc, #76]	; (80084b8 <TIM_Base_SetConfig+0x130>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d00b      	beq.n	8008488 <TIM_Base_SetConfig+0x100>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4a12      	ldr	r2, [pc, #72]	; (80084bc <TIM_Base_SetConfig+0x134>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d007      	beq.n	8008488 <TIM_Base_SetConfig+0x100>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a11      	ldr	r2, [pc, #68]	; (80084c0 <TIM_Base_SetConfig+0x138>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d003      	beq.n	8008488 <TIM_Base_SetConfig+0x100>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a0c      	ldr	r2, [pc, #48]	; (80084b4 <TIM_Base_SetConfig+0x12c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d103      	bne.n	8008490 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	691a      	ldr	r2, [r3, #16]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2201      	movs	r2, #1
 8008494:	615a      	str	r2, [r3, #20]
}
 8008496:	bf00      	nop
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr
 80084a2:	bf00      	nop
 80084a4:	40012c00 	.word	0x40012c00
 80084a8:	40000400 	.word	0x40000400
 80084ac:	40000800 	.word	0x40000800
 80084b0:	40013400 	.word	0x40013400
 80084b4:	40015000 	.word	0x40015000
 80084b8:	40014000 	.word	0x40014000
 80084bc:	40014400 	.word	0x40014400
 80084c0:	40014800 	.word	0x40014800

080084c4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b086      	sub	sp, #24
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084dc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	697a      	ldr	r2, [r7, #20]
 80084e4:	4313      	orrs	r3, r2
 80084e6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ee:	f023 0307 	bic.w	r3, r3, #7
 80084f2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	4313      	orrs	r3, r2
 80084fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	697a      	ldr	r2, [r7, #20]
 8008504:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	2b30      	cmp	r3, #48	; 0x30
 800850c:	d05c      	beq.n	80085c8 <TIM_SlaveTimer_SetConfig+0x104>
 800850e:	2b30      	cmp	r3, #48	; 0x30
 8008510:	d806      	bhi.n	8008520 <TIM_SlaveTimer_SetConfig+0x5c>
 8008512:	2b10      	cmp	r3, #16
 8008514:	d058      	beq.n	80085c8 <TIM_SlaveTimer_SetConfig+0x104>
 8008516:	2b20      	cmp	r3, #32
 8008518:	d056      	beq.n	80085c8 <TIM_SlaveTimer_SetConfig+0x104>
 800851a:	2b00      	cmp	r3, #0
 800851c:	d054      	beq.n	80085c8 <TIM_SlaveTimer_SetConfig+0x104>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800851e:	e054      	b.n	80085ca <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 8008520:	2b50      	cmp	r3, #80	; 0x50
 8008522:	d03d      	beq.n	80085a0 <TIM_SlaveTimer_SetConfig+0xdc>
 8008524:	2b50      	cmp	r3, #80	; 0x50
 8008526:	d802      	bhi.n	800852e <TIM_SlaveTimer_SetConfig+0x6a>
 8008528:	2b40      	cmp	r3, #64	; 0x40
 800852a:	d010      	beq.n	800854e <TIM_SlaveTimer_SetConfig+0x8a>
      break;
 800852c:	e04d      	b.n	80085ca <TIM_SlaveTimer_SetConfig+0x106>
  switch (sSlaveConfig->InputTrigger)
 800852e:	2b60      	cmp	r3, #96	; 0x60
 8008530:	d040      	beq.n	80085b4 <TIM_SlaveTimer_SetConfig+0xf0>
 8008532:	2b70      	cmp	r3, #112	; 0x70
 8008534:	d000      	beq.n	8008538 <TIM_SlaveTimer_SetConfig+0x74>
      break;
 8008536:	e048      	b.n	80085ca <TIM_SlaveTimer_SetConfig+0x106>
      TIM_ETR_SetConfig(htim->Instance,
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6818      	ldr	r0, [r3, #0]
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	68d9      	ldr	r1, [r3, #12]
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	689a      	ldr	r2, [r3, #8]
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	691b      	ldr	r3, [r3, #16]
 8008548:	f000 f8be 	bl	80086c8 <TIM_ETR_SetConfig>
      break;
 800854c:	e03d      	b.n	80085ca <TIM_SlaveTimer_SetConfig+0x106>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b05      	cmp	r3, #5
 8008554:	d101      	bne.n	800855a <TIM_SlaveTimer_SetConfig+0x96>
        return HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	e038      	b.n	80085cc <TIM_SlaveTimer_SetConfig+0x108>
      tmpccer = htim->Instance->CCER;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	6a1b      	ldr	r3, [r3, #32]
 8008560:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6a1a      	ldr	r2, [r3, #32]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0201 	bic.w	r2, r2, #1
 8008570:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	699b      	ldr	r3, [r3, #24]
 8008578:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008580:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	691b      	ldr	r3, [r3, #16]
 8008586:	011b      	lsls	r3, r3, #4
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4313      	orrs	r3, r2
 800858c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68fa      	ldr	r2, [r7, #12]
 8008594:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	621a      	str	r2, [r3, #32]
      break;
 800859e:	e014      	b.n	80085ca <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	6899      	ldr	r1, [r3, #8]
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	691b      	ldr	r3, [r3, #16]
 80085ac:	461a      	mov	r2, r3
 80085ae:	f000 f811 	bl	80085d4 <TIM_TI1_ConfigInputStage>
      break;
 80085b2:	e00a      	b.n	80085ca <TIM_SlaveTimer_SetConfig+0x106>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6818      	ldr	r0, [r3, #0]
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	6899      	ldr	r1, [r3, #8]
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	461a      	mov	r2, r3
 80085c2:	f000 f836 	bl	8008632 <TIM_TI2_ConfigInputStage>
      break;
 80085c6:	e000      	b.n	80085ca <TIM_SlaveTimer_SetConfig+0x106>
      break;
 80085c8:	bf00      	nop
  }
  return HAL_OK;
 80085ca:	2300      	movs	r3, #0
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b087      	sub	sp, #28
 80085d8:	af00      	add	r7, sp, #0
 80085da:	60f8      	str	r0, [r7, #12]
 80085dc:	60b9      	str	r1, [r7, #8]
 80085de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6a1b      	ldr	r3, [r3, #32]
 80085e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6a1b      	ldr	r3, [r3, #32]
 80085ea:	f023 0201 	bic.w	r2, r3, #1
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	011b      	lsls	r3, r3, #4
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	4313      	orrs	r3, r2
 8008608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	f023 030a 	bic.w	r3, r3, #10
 8008610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008612:	697a      	ldr	r2, [r7, #20]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	4313      	orrs	r3, r2
 8008618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	697a      	ldr	r2, [r7, #20]
 8008624:	621a      	str	r2, [r3, #32]
}
 8008626:	bf00      	nop
 8008628:	371c      	adds	r7, #28
 800862a:	46bd      	mov	sp, r7
 800862c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008630:	4770      	bx	lr

08008632 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008632:	b480      	push	{r7}
 8008634:	b087      	sub	sp, #28
 8008636:	af00      	add	r7, sp, #0
 8008638:	60f8      	str	r0, [r7, #12]
 800863a:	60b9      	str	r1, [r7, #8]
 800863c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	6a1b      	ldr	r3, [r3, #32]
 8008642:	f023 0210 	bic.w	r2, r3, #16
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6a1b      	ldr	r3, [r3, #32]
 8008654:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800865c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	031b      	lsls	r3, r3, #12
 8008662:	697a      	ldr	r2, [r7, #20]
 8008664:	4313      	orrs	r3, r2
 8008666:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800866e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	011b      	lsls	r3, r3, #4
 8008674:	693a      	ldr	r2, [r7, #16]
 8008676:	4313      	orrs	r3, r2
 8008678:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	621a      	str	r2, [r3, #32]
}
 8008686:	bf00      	nop
 8008688:	371c      	adds	r7, #28
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008692:	b480      	push	{r7}
 8008694:	b085      	sub	sp, #20
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
 800869a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086aa:	683a      	ldr	r2, [r7, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	f043 0307 	orr.w	r3, r3, #7
 80086b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	68fa      	ldr	r2, [r7, #12]
 80086ba:	609a      	str	r2, [r3, #8]
}
 80086bc:	bf00      	nop
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b087      	sub	sp, #28
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
 80086d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086dc:	697b      	ldr	r3, [r7, #20]
 80086de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	021a      	lsls	r2, r3, #8
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	431a      	orrs	r2, r3
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	697a      	ldr	r2, [r7, #20]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	697a      	ldr	r2, [r7, #20]
 80086fa:	609a      	str	r2, [r3, #8]
}
 80086fc:	bf00      	nop
 80086fe:	371c      	adds	r7, #28
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr

08008708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008718:	2b01      	cmp	r3, #1
 800871a:	d101      	bne.n	8008720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800871c:	2302      	movs	r3, #2
 800871e:	e06d      	b.n	80087fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	685b      	ldr	r3, [r3, #4]
 8008736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	689b      	ldr	r3, [r3, #8]
 800873e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	4a30      	ldr	r2, [pc, #192]	; (8008808 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d009      	beq.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4a2f      	ldr	r2, [pc, #188]	; (800880c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d004      	beq.n	800875e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a2d      	ldr	r2, [pc, #180]	; (8008810 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d108      	bne.n	8008770 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008764:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	4313      	orrs	r3, r2
 800876e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68fa      	ldr	r2, [r7, #12]
 800877e:	4313      	orrs	r3, r2
 8008780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	68fa      	ldr	r2, [r7, #12]
 8008788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a1e      	ldr	r2, [pc, #120]	; (8008808 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d01d      	beq.n	80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879c:	d018      	beq.n	80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	4a1c      	ldr	r2, [pc, #112]	; (8008814 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d013      	beq.n	80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	4a1a      	ldr	r2, [pc, #104]	; (8008818 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d00e      	beq.n	80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a15      	ldr	r2, [pc, #84]	; (800880c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087b8:	4293      	cmp	r3, r2
 80087ba:	d009      	beq.n	80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a16      	ldr	r2, [pc, #88]	; (800881c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d004      	beq.n	80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4a11      	ldr	r2, [pc, #68]	; (8008810 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d10c      	bne.n	80087ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	689b      	ldr	r3, [r3, #8]
 80087dc:	68ba      	ldr	r2, [r7, #8]
 80087de:	4313      	orrs	r3, r2
 80087e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2201      	movs	r2, #1
 80087ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3714      	adds	r7, #20
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr
 8008808:	40012c00 	.word	0x40012c00
 800880c:	40013400 	.word	0x40013400
 8008810:	40015000 	.word	0x40015000
 8008814:	40000400 	.word	0x40000400
 8008818:	40000800 	.word	0x40000800
 800881c:	40014000 	.word	0x40014000

08008820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008820:	b580      	push	{r7, lr}
 8008822:	b082      	sub	sp, #8
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d101      	bne.n	8008832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800882e:	2301      	movs	r3, #1
 8008830:	e040      	b.n	80088b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008836:	2b00      	cmp	r3, #0
 8008838:	d106      	bne.n	8008848 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2200      	movs	r2, #0
 800883e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f002 f908 	bl	800aa58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2224      	movs	r2, #36	; 0x24
 800884c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	681a      	ldr	r2, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 0201 	bic.w	r2, r2, #1
 800885c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fabc 	bl	8008ddc <UART_SetConfig>
 8008864:	4603      	mov	r3, r0
 8008866:	2b01      	cmp	r3, #1
 8008868:	d101      	bne.n	800886e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800886a:	2301      	movs	r3, #1
 800886c:	e022      	b.n	80088b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008872:	2b00      	cmp	r3, #0
 8008874:	d002      	beq.n	800887c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fcca 	bl	8009210 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	685a      	ldr	r2, [r3, #4]
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800888a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	689a      	ldr	r2, [r3, #8]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800889a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0201 	orr.w	r2, r2, #1
 80088aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 fd51 	bl	8009354 <UART_CheckIdleState>
 80088b2:	4603      	mov	r3, r0
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b08a      	sub	sp, #40	; 0x28
 80088c0:	af02      	add	r7, sp, #8
 80088c2:	60f8      	str	r0, [r7, #12]
 80088c4:	60b9      	str	r1, [r7, #8]
 80088c6:	603b      	str	r3, [r7, #0]
 80088c8:	4613      	mov	r3, r2
 80088ca:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80088d0:	2b20      	cmp	r3, #32
 80088d2:	f040 8081 	bne.w	80089d8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d002      	beq.n	80088e2 <HAL_UART_Transmit+0x26>
 80088dc:	88fb      	ldrh	r3, [r7, #6]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d101      	bne.n	80088e6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80088e2:	2301      	movs	r3, #1
 80088e4:	e079      	b.n	80089da <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_UART_Transmit+0x38>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e072      	b.n	80089da <HAL_UART_Transmit+0x11e>
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2200      	movs	r2, #0
 8008900:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2221      	movs	r2, #33	; 0x21
 8008906:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8008908:	f7fb fa9e 	bl	8003e48 <HAL_GetTick>
 800890c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	88fa      	ldrh	r2, [r7, #6]
 8008912:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	88fa      	ldrh	r2, [r7, #6]
 800891a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	689b      	ldr	r3, [r3, #8]
 8008922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008926:	d108      	bne.n	800893a <HAL_UART_Transmit+0x7e>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	691b      	ldr	r3, [r3, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d104      	bne.n	800893a <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8008930:	2300      	movs	r3, #0
 8008932:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	61bb      	str	r3, [r7, #24]
 8008938:	e003      	b.n	8008942 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800893e:	2300      	movs	r3, #0
 8008940:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008942:	e02d      	b.n	80089a0 <HAL_UART_Transmit+0xe4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	9300      	str	r3, [sp, #0]
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2200      	movs	r2, #0
 800894c:	2180      	movs	r1, #128	; 0x80
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f000 fd45 	bl	80093de <UART_WaitOnFlagUntilTimeout>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d001      	beq.n	800895e <HAL_UART_Transmit+0xa2>
      {
        return HAL_TIMEOUT;
 800895a:	2303      	movs	r3, #3
 800895c:	e03d      	b.n	80089da <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10b      	bne.n	800897c <HAL_UART_Transmit+0xc0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	881a      	ldrh	r2, [r3, #0]
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008970:	b292      	uxth	r2, r2
 8008972:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	3302      	adds	r3, #2
 8008978:	61bb      	str	r3, [r7, #24]
 800897a:	e008      	b.n	800898e <HAL_UART_Transmit+0xd2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	781a      	ldrb	r2, [r3, #0]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	b292      	uxth	r2, r2
 8008986:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	3301      	adds	r3, #1
 800898c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008994:	b29b      	uxth	r3, r3
 8008996:	3b01      	subs	r3, #1
 8008998:	b29a      	uxth	r2, r3
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1cb      	bne.n	8008944 <HAL_UART_Transmit+0x88>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	9300      	str	r3, [sp, #0]
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2200      	movs	r2, #0
 80089b4:	2140      	movs	r1, #64	; 0x40
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 fd11 	bl	80093de <UART_WaitOnFlagUntilTimeout>
 80089bc:	4603      	mov	r3, r0
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d001      	beq.n	80089c6 <HAL_UART_Transmit+0x10a>
    {
      return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e009      	b.n	80089da <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	2220      	movs	r2, #32
 80089ca:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	e000      	b.n	80089da <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80089d8:	2302      	movs	r3, #2
  }
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3720      	adds	r7, #32
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
	...

080089e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	4613      	mov	r3, r2
 80089f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089f6:	2b20      	cmp	r3, #32
 80089f8:	f040 808a 	bne.w	8008b10 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d002      	beq.n	8008a08 <HAL_UART_Receive_IT+0x24>
 8008a02:	88fb      	ldrh	r3, [r7, #6]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d101      	bne.n	8008a0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e082      	b.n	8008b12 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8008a12:	2b01      	cmp	r3, #1
 8008a14:	d101      	bne.n	8008a1a <HAL_UART_Receive_IT+0x36>
 8008a16:	2302      	movs	r3, #2
 8008a18:	e07b      	b.n	8008b12 <HAL_UART_Receive_IT+0x12e>
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	88fa      	ldrh	r2, [r7, #6]
 8008a2c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	88fa      	ldrh	r2, [r7, #6]
 8008a34:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	689b      	ldr	r3, [r3, #8]
 8008a42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a46:	d10e      	bne.n	8008a66 <HAL_UART_Receive_IT+0x82>
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	691b      	ldr	r3, [r3, #16]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d105      	bne.n	8008a5c <HAL_UART_Receive_IT+0x78>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008a56:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a5a:	e02d      	b.n	8008ab8 <HAL_UART_Receive_IT+0xd4>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	22ff      	movs	r2, #255	; 0xff
 8008a60:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a64:	e028      	b.n	8008ab8 <HAL_UART_Receive_IT+0xd4>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d10d      	bne.n	8008a8a <HAL_UART_Receive_IT+0xa6>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d104      	bne.n	8008a80 <HAL_UART_Receive_IT+0x9c>
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	22ff      	movs	r2, #255	; 0xff
 8008a7a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a7e:	e01b      	b.n	8008ab8 <HAL_UART_Receive_IT+0xd4>
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	227f      	movs	r2, #127	; 0x7f
 8008a84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008a88:	e016      	b.n	8008ab8 <HAL_UART_Receive_IT+0xd4>
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a92:	d10d      	bne.n	8008ab0 <HAL_UART_Receive_IT+0xcc>
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d104      	bne.n	8008aa6 <HAL_UART_Receive_IT+0xc2>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	227f      	movs	r2, #127	; 0x7f
 8008aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008aa4:	e008      	b.n	8008ab8 <HAL_UART_Receive_IT+0xd4>
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	223f      	movs	r2, #63	; 0x3f
 8008aaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008aae:	e003      	b.n	8008ab8 <HAL_UART_Receive_IT+0xd4>
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2222      	movs	r2, #34	; 0x22
 8008ac2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	689a      	ldr	r2, [r3, #8]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f042 0201 	orr.w	r2, r2, #1
 8008ad2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008adc:	d107      	bne.n	8008aee <HAL_UART_Receive_IT+0x10a>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d103      	bne.n	8008aee <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	4a0d      	ldr	r2, [pc, #52]	; (8008b20 <HAL_UART_Receive_IT+0x13c>)
 8008aea:	661a      	str	r2, [r3, #96]	; 0x60
 8008aec:	e002      	b.n	8008af4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	4a0c      	ldr	r2, [pc, #48]	; (8008b24 <HAL_UART_Receive_IT+0x140>)
 8008af2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	681a      	ldr	r2, [r3, #0]
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8008b0a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	e000      	b.n	8008b12 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8008b10:	2302      	movs	r3, #2
  }
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3714      	adds	r7, #20
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	08009619 	.word	0x08009619
 8008b24:	08009573 	.word	0x08009573

08008b28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b088      	sub	sp, #32
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	69db      	ldr	r3, [r3, #28]
 8008b36:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b48:	69fa      	ldr	r2, [r7, #28]
 8008b4a:	f640 030f 	movw	r3, #2063	; 0x80f
 8008b4e:	4013      	ands	r3, r2
 8008b50:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d113      	bne.n	8008b80 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008b58:	69fb      	ldr	r3, [r7, #28]
 8008b5a:	f003 0320 	and.w	r3, r3, #32
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00e      	beq.n	8008b80 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008b62:	69bb      	ldr	r3, [r7, #24]
 8008b64:	f003 0320 	and.w	r3, r3, #32
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d009      	beq.n	8008b80 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 8114 	beq.w	8008d9e <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	4798      	blx	r3
      }
      return;
 8008b7e:	e10e      	b.n	8008d9e <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	f000 80d6 	beq.w	8008d34 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f003 0301 	and.w	r3, r3, #1
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d105      	bne.n	8008b9e <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f000 80cb 	beq.w	8008d34 <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	f003 0301 	and.w	r3, r3, #1
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00e      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x9e>
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d009      	beq.n	8008bc6 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008bbe:	f043 0201 	orr.w	r2, r3, #1
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bc6:	69fb      	ldr	r3, [r7, #28]
 8008bc8:	f003 0302 	and.w	r3, r3, #2
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d00e      	beq.n	8008bee <HAL_UART_IRQHandler+0xc6>
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f003 0301 	and.w	r3, r3, #1
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d009      	beq.n	8008bee <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2202      	movs	r2, #2
 8008be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008be6:	f043 0204 	orr.w	r2, r3, #4
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008bee:	69fb      	ldr	r3, [r7, #28]
 8008bf0:	f003 0304 	and.w	r3, r3, #4
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d00e      	beq.n	8008c16 <HAL_UART_IRQHandler+0xee>
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f003 0301 	and.w	r3, r3, #1
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d009      	beq.n	8008c16 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2204      	movs	r2, #4
 8008c08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c0e:	f043 0202 	orr.w	r2, r3, #2
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	f003 0308 	and.w	r3, r3, #8
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d013      	beq.n	8008c48 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	f003 0320 	and.w	r3, r3, #32
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d104      	bne.n	8008c34 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d009      	beq.n	8008c48 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	2208      	movs	r2, #8
 8008c3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c40:	f043 0208 	orr.w	r2, r3, #8
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d00f      	beq.n	8008c72 <HAL_UART_IRQHandler+0x14a>
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d00a      	beq.n	8008c72 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008c64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c6a:	f043 0220 	orr.w	r2, r3, #32
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 8093 	beq.w	8008da2 <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	f003 0320 	and.w	r3, r3, #32
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00c      	beq.n	8008ca0 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008c86:	69bb      	ldr	r3, [r7, #24]
 8008c88:	f003 0320 	and.w	r3, r3, #32
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d007      	beq.n	8008ca0 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ca4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb0:	2b40      	cmp	r3, #64	; 0x40
 8008cb2:	d004      	beq.n	8008cbe <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d031      	beq.n	8008d22 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fc08 	bl	80094d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cce:	2b40      	cmp	r3, #64	; 0x40
 8008cd0:	d123      	bne.n	8008d1a <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008ce0:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d013      	beq.n	8008d12 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cee:	4a30      	ldr	r2, [pc, #192]	; (8008db0 <HAL_UART_IRQHandler+0x288>)
 8008cf0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f7fc faad 	bl	8005256 <HAL_DMA_Abort_IT>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d016      	beq.n	8008d30 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d10:	e00e      	b.n	8008d30 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f858 	bl	8008dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d18:	e00a      	b.n	8008d30 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f854 	bl	8008dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d20:	e006      	b.n	8008d30 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 f850 	bl	8008dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8008d2e:	e038      	b.n	8008da2 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d30:	bf00      	nop
    return;
 8008d32:	e036      	b.n	8008da2 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00d      	beq.n	8008d5a <HAL_UART_IRQHandler+0x232>
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d008      	beq.n	8008d5a <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 fcb3 	bl	80096be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d58:	e026      	b.n	8008da8 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d00d      	beq.n	8008d80 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008d64:	69bb      	ldr	r3, [r7, #24]
 8008d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d008      	beq.n	8008d80 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d017      	beq.n	8008da6 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	4798      	blx	r3
    }
    return;
 8008d7e:	e012      	b.n	8008da6 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d00e      	beq.n	8008da8 <HAL_UART_IRQHandler+0x280>
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d009      	beq.n	8008da8 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f000 fbd3 	bl	8009540 <UART_EndTransmit_IT>
    return;
 8008d9a:	bf00      	nop
 8008d9c:	e004      	b.n	8008da8 <HAL_UART_IRQHandler+0x280>
      return;
 8008d9e:	bf00      	nop
 8008da0:	e002      	b.n	8008da8 <HAL_UART_IRQHandler+0x280>
    return;
 8008da2:	bf00      	nop
 8008da4:	e000      	b.n	8008da8 <HAL_UART_IRQHandler+0x280>
    return;
 8008da6:	bf00      	nop
  }

}
 8008da8:	3720      	adds	r7, #32
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bd80      	pop	{r7, pc}
 8008dae:	bf00      	nop
 8008db0:	08009515 	.word	0x08009515

08008db4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008dbc:	bf00      	nop
 8008dbe:	370c      	adds	r7, #12
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b083      	sub	sp, #12
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008dd0:	bf00      	nop
 8008dd2:	370c      	adds	r7, #12
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr

08008ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b088      	sub	sp, #32
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8008de4:	2300      	movs	r3, #0
 8008de6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8008de8:	2300      	movs	r3, #0
 8008dea:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	689a      	ldr	r2, [r3, #8]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	431a      	orrs	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	695b      	ldr	r3, [r3, #20]
 8008dfa:	431a      	orrs	r2, r3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	681a      	ldr	r2, [r3, #0]
 8008e0a:	4bac      	ldr	r3, [pc, #688]	; (80090bc <UART_SetConfig+0x2e0>)
 8008e0c:	4013      	ands	r3, r2
 8008e0e:	687a      	ldr	r2, [r7, #4]
 8008e10:	6812      	ldr	r2, [r2, #0]
 8008e12:	6939      	ldr	r1, [r7, #16]
 8008e14:	430b      	orrs	r3, r1
 8008e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	68da      	ldr	r2, [r3, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6a1b      	ldr	r3, [r3, #32]
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	693a      	ldr	r2, [r7, #16]
 8008e4e:	430a      	orrs	r2, r1
 8008e50:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a9a      	ldr	r2, [pc, #616]	; (80090c0 <UART_SetConfig+0x2e4>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d121      	bne.n	8008ea0 <UART_SetConfig+0xc4>
 8008e5c:	4b99      	ldr	r3, [pc, #612]	; (80090c4 <UART_SetConfig+0x2e8>)
 8008e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e60:	f003 0303 	and.w	r3, r3, #3
 8008e64:	2b03      	cmp	r3, #3
 8008e66:	d817      	bhi.n	8008e98 <UART_SetConfig+0xbc>
 8008e68:	a201      	add	r2, pc, #4	; (adr r2, 8008e70 <UART_SetConfig+0x94>)
 8008e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e6e:	bf00      	nop
 8008e70:	08008e81 	.word	0x08008e81
 8008e74:	08008e8d 	.word	0x08008e8d
 8008e78:	08008e93 	.word	0x08008e93
 8008e7c:	08008e87 	.word	0x08008e87
 8008e80:	2301      	movs	r3, #1
 8008e82:	77fb      	strb	r3, [r7, #31]
 8008e84:	e0b2      	b.n	8008fec <UART_SetConfig+0x210>
 8008e86:	2302      	movs	r3, #2
 8008e88:	77fb      	strb	r3, [r7, #31]
 8008e8a:	e0af      	b.n	8008fec <UART_SetConfig+0x210>
 8008e8c:	2304      	movs	r3, #4
 8008e8e:	77fb      	strb	r3, [r7, #31]
 8008e90:	e0ac      	b.n	8008fec <UART_SetConfig+0x210>
 8008e92:	2308      	movs	r3, #8
 8008e94:	77fb      	strb	r3, [r7, #31]
 8008e96:	e0a9      	b.n	8008fec <UART_SetConfig+0x210>
 8008e98:	2310      	movs	r3, #16
 8008e9a:	77fb      	strb	r3, [r7, #31]
 8008e9c:	bf00      	nop
 8008e9e:	e0a5      	b.n	8008fec <UART_SetConfig+0x210>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a88      	ldr	r2, [pc, #544]	; (80090c8 <UART_SetConfig+0x2ec>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d123      	bne.n	8008ef2 <UART_SetConfig+0x116>
 8008eaa:	4b86      	ldr	r3, [pc, #536]	; (80090c4 <UART_SetConfig+0x2e8>)
 8008eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008eb6:	d012      	beq.n	8008ede <UART_SetConfig+0x102>
 8008eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ebc:	d802      	bhi.n	8008ec4 <UART_SetConfig+0xe8>
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d007      	beq.n	8008ed2 <UART_SetConfig+0xf6>
 8008ec2:	e012      	b.n	8008eea <UART_SetConfig+0x10e>
 8008ec4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ec8:	d00c      	beq.n	8008ee4 <UART_SetConfig+0x108>
 8008eca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ece:	d003      	beq.n	8008ed8 <UART_SetConfig+0xfc>
 8008ed0:	e00b      	b.n	8008eea <UART_SetConfig+0x10e>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	77fb      	strb	r3, [r7, #31]
 8008ed6:	e089      	b.n	8008fec <UART_SetConfig+0x210>
 8008ed8:	2302      	movs	r3, #2
 8008eda:	77fb      	strb	r3, [r7, #31]
 8008edc:	e086      	b.n	8008fec <UART_SetConfig+0x210>
 8008ede:	2304      	movs	r3, #4
 8008ee0:	77fb      	strb	r3, [r7, #31]
 8008ee2:	e083      	b.n	8008fec <UART_SetConfig+0x210>
 8008ee4:	2308      	movs	r3, #8
 8008ee6:	77fb      	strb	r3, [r7, #31]
 8008ee8:	e080      	b.n	8008fec <UART_SetConfig+0x210>
 8008eea:	2310      	movs	r3, #16
 8008eec:	77fb      	strb	r3, [r7, #31]
 8008eee:	bf00      	nop
 8008ef0:	e07c      	b.n	8008fec <UART_SetConfig+0x210>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a75      	ldr	r2, [pc, #468]	; (80090cc <UART_SetConfig+0x2f0>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d123      	bne.n	8008f44 <UART_SetConfig+0x168>
 8008efc:	4b71      	ldr	r3, [pc, #452]	; (80090c4 <UART_SetConfig+0x2e8>)
 8008efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f00:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008f04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f08:	d012      	beq.n	8008f30 <UART_SetConfig+0x154>
 8008f0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008f0e:	d802      	bhi.n	8008f16 <UART_SetConfig+0x13a>
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d007      	beq.n	8008f24 <UART_SetConfig+0x148>
 8008f14:	e012      	b.n	8008f3c <UART_SetConfig+0x160>
 8008f16:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008f1a:	d00c      	beq.n	8008f36 <UART_SetConfig+0x15a>
 8008f1c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008f20:	d003      	beq.n	8008f2a <UART_SetConfig+0x14e>
 8008f22:	e00b      	b.n	8008f3c <UART_SetConfig+0x160>
 8008f24:	2300      	movs	r3, #0
 8008f26:	77fb      	strb	r3, [r7, #31]
 8008f28:	e060      	b.n	8008fec <UART_SetConfig+0x210>
 8008f2a:	2302      	movs	r3, #2
 8008f2c:	77fb      	strb	r3, [r7, #31]
 8008f2e:	e05d      	b.n	8008fec <UART_SetConfig+0x210>
 8008f30:	2304      	movs	r3, #4
 8008f32:	77fb      	strb	r3, [r7, #31]
 8008f34:	e05a      	b.n	8008fec <UART_SetConfig+0x210>
 8008f36:	2308      	movs	r3, #8
 8008f38:	77fb      	strb	r3, [r7, #31]
 8008f3a:	e057      	b.n	8008fec <UART_SetConfig+0x210>
 8008f3c:	2310      	movs	r3, #16
 8008f3e:	77fb      	strb	r3, [r7, #31]
 8008f40:	bf00      	nop
 8008f42:	e053      	b.n	8008fec <UART_SetConfig+0x210>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a61      	ldr	r2, [pc, #388]	; (80090d0 <UART_SetConfig+0x2f4>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d123      	bne.n	8008f96 <UART_SetConfig+0x1ba>
 8008f4e:	4b5d      	ldr	r3, [pc, #372]	; (80090c4 <UART_SetConfig+0x2e8>)
 8008f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f52:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f5a:	d012      	beq.n	8008f82 <UART_SetConfig+0x1a6>
 8008f5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f60:	d802      	bhi.n	8008f68 <UART_SetConfig+0x18c>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d007      	beq.n	8008f76 <UART_SetConfig+0x19a>
 8008f66:	e012      	b.n	8008f8e <UART_SetConfig+0x1b2>
 8008f68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f6c:	d00c      	beq.n	8008f88 <UART_SetConfig+0x1ac>
 8008f6e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f72:	d003      	beq.n	8008f7c <UART_SetConfig+0x1a0>
 8008f74:	e00b      	b.n	8008f8e <UART_SetConfig+0x1b2>
 8008f76:	2300      	movs	r3, #0
 8008f78:	77fb      	strb	r3, [r7, #31]
 8008f7a:	e037      	b.n	8008fec <UART_SetConfig+0x210>
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	77fb      	strb	r3, [r7, #31]
 8008f80:	e034      	b.n	8008fec <UART_SetConfig+0x210>
 8008f82:	2304      	movs	r3, #4
 8008f84:	77fb      	strb	r3, [r7, #31]
 8008f86:	e031      	b.n	8008fec <UART_SetConfig+0x210>
 8008f88:	2308      	movs	r3, #8
 8008f8a:	77fb      	strb	r3, [r7, #31]
 8008f8c:	e02e      	b.n	8008fec <UART_SetConfig+0x210>
 8008f8e:	2310      	movs	r3, #16
 8008f90:	77fb      	strb	r3, [r7, #31]
 8008f92:	bf00      	nop
 8008f94:	e02a      	b.n	8008fec <UART_SetConfig+0x210>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4a4e      	ldr	r2, [pc, #312]	; (80090d4 <UART_SetConfig+0x2f8>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d123      	bne.n	8008fe8 <UART_SetConfig+0x20c>
 8008fa0:	4b48      	ldr	r3, [pc, #288]	; (80090c4 <UART_SetConfig+0x2e8>)
 8008fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fa4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fac:	d012      	beq.n	8008fd4 <UART_SetConfig+0x1f8>
 8008fae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fb2:	d802      	bhi.n	8008fba <UART_SetConfig+0x1de>
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d007      	beq.n	8008fc8 <UART_SetConfig+0x1ec>
 8008fb8:	e012      	b.n	8008fe0 <UART_SetConfig+0x204>
 8008fba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008fbe:	d00c      	beq.n	8008fda <UART_SetConfig+0x1fe>
 8008fc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008fc4:	d003      	beq.n	8008fce <UART_SetConfig+0x1f2>
 8008fc6:	e00b      	b.n	8008fe0 <UART_SetConfig+0x204>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	77fb      	strb	r3, [r7, #31]
 8008fcc:	e00e      	b.n	8008fec <UART_SetConfig+0x210>
 8008fce:	2302      	movs	r3, #2
 8008fd0:	77fb      	strb	r3, [r7, #31]
 8008fd2:	e00b      	b.n	8008fec <UART_SetConfig+0x210>
 8008fd4:	2304      	movs	r3, #4
 8008fd6:	77fb      	strb	r3, [r7, #31]
 8008fd8:	e008      	b.n	8008fec <UART_SetConfig+0x210>
 8008fda:	2308      	movs	r3, #8
 8008fdc:	77fb      	strb	r3, [r7, #31]
 8008fde:	e005      	b.n	8008fec <UART_SetConfig+0x210>
 8008fe0:	2310      	movs	r3, #16
 8008fe2:	77fb      	strb	r3, [r7, #31]
 8008fe4:	bf00      	nop
 8008fe6:	e001      	b.n	8008fec <UART_SetConfig+0x210>
 8008fe8:	2310      	movs	r3, #16
 8008fea:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ff4:	f040 8090 	bne.w	8009118 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8008ff8:	7ffb      	ldrb	r3, [r7, #31]
 8008ffa:	2b08      	cmp	r3, #8
 8008ffc:	d86c      	bhi.n	80090d8 <UART_SetConfig+0x2fc>
 8008ffe:	a201      	add	r2, pc, #4	; (adr r2, 8009004 <UART_SetConfig+0x228>)
 8009000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009004:	08009029 	.word	0x08009029
 8009008:	08009049 	.word	0x08009049
 800900c:	08009069 	.word	0x08009069
 8009010:	080090d9 	.word	0x080090d9
 8009014:	08009085 	.word	0x08009085
 8009018:	080090d9 	.word	0x080090d9
 800901c:	080090d9 	.word	0x080090d9
 8009020:	080090d9 	.word	0x080090d9
 8009024:	080090a5 	.word	0x080090a5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009028:	f7fe fa14 	bl	8007454 <HAL_RCC_GetPCLK1Freq>
 800902c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	005a      	lsls	r2, r3, #1
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	085b      	lsrs	r3, r3, #1
 8009038:	441a      	add	r2, r3
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	685b      	ldr	r3, [r3, #4]
 800903e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009042:	b29b      	uxth	r3, r3
 8009044:	61bb      	str	r3, [r7, #24]
        break;
 8009046:	e04a      	b.n	80090de <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009048:	f7fe fa26 	bl	8007498 <HAL_RCC_GetPCLK2Freq>
 800904c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	005a      	lsls	r2, r3, #1
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	085b      	lsrs	r3, r3, #1
 8009058:	441a      	add	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009062:	b29b      	uxth	r3, r3
 8009064:	61bb      	str	r3, [r7, #24]
        break;
 8009066:	e03a      	b.n	80090de <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	085b      	lsrs	r3, r3, #1
 800906e:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8009072:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	6852      	ldr	r2, [r2, #4]
 800907a:	fbb3 f3f2 	udiv	r3, r3, r2
 800907e:	b29b      	uxth	r3, r3
 8009080:	61bb      	str	r3, [r7, #24]
        break;
 8009082:	e02c      	b.n	80090de <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009084:	f7fe f970 	bl	8007368 <HAL_RCC_GetSysClockFreq>
 8009088:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	005a      	lsls	r2, r3, #1
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685b      	ldr	r3, [r3, #4]
 8009092:	085b      	lsrs	r3, r3, #1
 8009094:	441a      	add	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	685b      	ldr	r3, [r3, #4]
 800909a:	fbb2 f3f3 	udiv	r3, r2, r3
 800909e:	b29b      	uxth	r3, r3
 80090a0:	61bb      	str	r3, [r7, #24]
        break;
 80090a2:	e01c      	b.n	80090de <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	685b      	ldr	r3, [r3, #4]
 80090a8:	085b      	lsrs	r3, r3, #1
 80090aa:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	685b      	ldr	r3, [r3, #4]
 80090b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	61bb      	str	r3, [r7, #24]
        break;
 80090ba:	e010      	b.n	80090de <UART_SetConfig+0x302>
 80090bc:	efff69f3 	.word	0xefff69f3
 80090c0:	40013800 	.word	0x40013800
 80090c4:	40021000 	.word	0x40021000
 80090c8:	40004400 	.word	0x40004400
 80090cc:	40004800 	.word	0x40004800
 80090d0:	40004c00 	.word	0x40004c00
 80090d4:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	75fb      	strb	r3, [r7, #23]
        break;
 80090dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	2b0f      	cmp	r3, #15
 80090e2:	d916      	bls.n	8009112 <UART_SetConfig+0x336>
 80090e4:	69bb      	ldr	r3, [r7, #24]
 80090e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090ea:	d212      	bcs.n	8009112 <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090ec:	69bb      	ldr	r3, [r7, #24]
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	f023 030f 	bic.w	r3, r3, #15
 80090f4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	085b      	lsrs	r3, r3, #1
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	f003 0307 	and.w	r3, r3, #7
 8009100:	b29a      	uxth	r2, r3
 8009102:	897b      	ldrh	r3, [r7, #10]
 8009104:	4313      	orrs	r3, r2
 8009106:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	897a      	ldrh	r2, [r7, #10]
 800910e:	60da      	str	r2, [r3, #12]
 8009110:	e072      	b.n	80091f8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	75fb      	strb	r3, [r7, #23]
 8009116:	e06f      	b.n	80091f8 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8009118:	7ffb      	ldrb	r3, [r7, #31]
 800911a:	2b08      	cmp	r3, #8
 800911c:	d85b      	bhi.n	80091d6 <UART_SetConfig+0x3fa>
 800911e:	a201      	add	r2, pc, #4	; (adr r2, 8009124 <UART_SetConfig+0x348>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	08009149 	.word	0x08009149
 8009128:	08009167 	.word	0x08009167
 800912c:	08009185 	.word	0x08009185
 8009130:	080091d7 	.word	0x080091d7
 8009134:	080091a1 	.word	0x080091a1
 8009138:	080091d7 	.word	0x080091d7
 800913c:	080091d7 	.word	0x080091d7
 8009140:	080091d7 	.word	0x080091d7
 8009144:	080091bf 	.word	0x080091bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009148:	f7fe f984 	bl	8007454 <HAL_RCC_GetPCLK1Freq>
 800914c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	685b      	ldr	r3, [r3, #4]
 8009152:	085a      	lsrs	r2, r3, #1
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	441a      	add	r2, r3
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009160:	b29b      	uxth	r3, r3
 8009162:	61bb      	str	r3, [r7, #24]
        break;
 8009164:	e03a      	b.n	80091dc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009166:	f7fe f997 	bl	8007498 <HAL_RCC_GetPCLK2Freq>
 800916a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	085a      	lsrs	r2, r3, #1
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	441a      	add	r2, r3
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	fbb2 f3f3 	udiv	r3, r2, r3
 800917e:	b29b      	uxth	r3, r3
 8009180:	61bb      	str	r3, [r7, #24]
        break;
 8009182:	e02b      	b.n	80091dc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	085b      	lsrs	r3, r3, #1
 800918a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800918e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	6852      	ldr	r2, [r2, #4]
 8009196:	fbb3 f3f2 	udiv	r3, r3, r2
 800919a:	b29b      	uxth	r3, r3
 800919c:	61bb      	str	r3, [r7, #24]
        break;
 800919e:	e01d      	b.n	80091dc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091a0:	f7fe f8e2 	bl	8007368 <HAL_RCC_GetSysClockFreq>
 80091a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	085a      	lsrs	r2, r3, #1
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	441a      	add	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	61bb      	str	r3, [r7, #24]
        break;
 80091bc:	e00e      	b.n	80091dc <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	685b      	ldr	r3, [r3, #4]
 80091c2:	085b      	lsrs	r3, r3, #1
 80091c4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	685b      	ldr	r3, [r3, #4]
 80091cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	61bb      	str	r3, [r7, #24]
        break;
 80091d4:	e002      	b.n	80091dc <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	75fb      	strb	r3, [r7, #23]
        break;
 80091da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	2b0f      	cmp	r3, #15
 80091e0:	d908      	bls.n	80091f4 <UART_SetConfig+0x418>
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091e8:	d204      	bcs.n	80091f4 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	69ba      	ldr	r2, [r7, #24]
 80091f0:	60da      	str	r2, [r3, #12]
 80091f2:	e001      	b.n	80091f8 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2200      	movs	r2, #0
 80091fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	2200      	movs	r2, #0
 8009202:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8009204:	7dfb      	ldrb	r3, [r7, #23]
}
 8009206:	4618      	mov	r0, r3
 8009208:	3720      	adds	r7, #32
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop

08009210 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800921c:	f003 0301 	and.w	r3, r3, #1
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00a      	beq.n	800923a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	685b      	ldr	r3, [r3, #4]
 800922a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	430a      	orrs	r2, r1
 8009238:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	2b00      	cmp	r3, #0
 8009244:	d00a      	beq.n	800925c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685b      	ldr	r3, [r3, #4]
 800924c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	430a      	orrs	r2, r1
 800925a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009260:	f003 0304 	and.w	r3, r3, #4
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00a      	beq.n	800927e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	685b      	ldr	r3, [r3, #4]
 800926e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	430a      	orrs	r2, r1
 800927c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009282:	f003 0308 	and.w	r3, r3, #8
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00a      	beq.n	80092a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	430a      	orrs	r2, r1
 800929e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a4:	f003 0310 	and.w	r3, r3, #16
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00a      	beq.n	80092c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	430a      	orrs	r2, r1
 80092c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092c6:	f003 0320 	and.w	r3, r3, #32
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d00a      	beq.n	80092e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	430a      	orrs	r2, r1
 80092e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d01a      	beq.n	8009326 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	430a      	orrs	r2, r1
 8009304:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800930e:	d10a      	bne.n	8009326 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	430a      	orrs	r2, r1
 8009324:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	605a      	str	r2, [r3, #4]
  }
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b086      	sub	sp, #24
 8009358:	af02      	add	r7, sp, #8
 800935a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2200      	movs	r2, #0
 8009360:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8009362:	f7fa fd71 	bl	8003e48 <HAL_GetTick>
 8009366:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f003 0308 	and.w	r3, r3, #8
 8009372:	2b08      	cmp	r3, #8
 8009374:	d10e      	bne.n	8009394 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009376:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800937a:	9300      	str	r3, [sp, #0]
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f82a 	bl	80093de <UART_WaitOnFlagUntilTimeout>
 800938a:	4603      	mov	r3, r0
 800938c:	2b00      	cmp	r3, #0
 800938e:	d001      	beq.n	8009394 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009390:	2303      	movs	r3, #3
 8009392:	e020      	b.n	80093d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 0304 	and.w	r3, r3, #4
 800939e:	2b04      	cmp	r3, #4
 80093a0:	d10e      	bne.n	80093c0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093a2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093a6:	9300      	str	r3, [sp, #0]
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	2200      	movs	r2, #0
 80093ac:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f814 	bl	80093de <UART_WaitOnFlagUntilTimeout>
 80093b6:	4603      	mov	r3, r0
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d001      	beq.n	80093c0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093bc:	2303      	movs	r3, #3
 80093be:	e00a      	b.n	80093d6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2220      	movs	r2, #32
 80093c4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2220      	movs	r2, #32
 80093ca:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	60f8      	str	r0, [r7, #12]
 80093e6:	60b9      	str	r1, [r7, #8]
 80093e8:	603b      	str	r3, [r7, #0]
 80093ea:	4613      	mov	r3, r2
 80093ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ee:	e05d      	b.n	80094ac <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093f6:	d059      	beq.n	80094ac <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093f8:	f7fa fd26 	bl	8003e48 <HAL_GetTick>
 80093fc:	4602      	mov	r2, r0
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	1ad3      	subs	r3, r2, r3
 8009402:	69ba      	ldr	r2, [r7, #24]
 8009404:	429a      	cmp	r2, r3
 8009406:	d302      	bcc.n	800940e <UART_WaitOnFlagUntilTimeout+0x30>
 8009408:	69bb      	ldr	r3, [r7, #24]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d11b      	bne.n	8009446 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	681a      	ldr	r2, [r3, #0]
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800941c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	f022 0201 	bic.w	r2, r2, #1
 800942c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2220      	movs	r2, #32
 8009432:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2220      	movs	r2, #32
 8009438:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8009442:	2303      	movs	r3, #3
 8009444:	e042      	b.n	80094cc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f003 0304 	and.w	r3, r3, #4
 8009450:	2b00      	cmp	r3, #0
 8009452:	d02b      	beq.n	80094ac <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	69db      	ldr	r3, [r3, #28]
 800945a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800945e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009462:	d123      	bne.n	80094ac <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800946c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800947c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	689a      	ldr	r2, [r3, #8]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f022 0201 	bic.w	r2, r2, #1
 800948c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	2220      	movs	r2, #32
 8009492:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2220      	movs	r2, #32
 8009498:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2220      	movs	r2, #32
 800949e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 80094a8:	2303      	movs	r3, #3
 80094aa:	e00f      	b.n	80094cc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	69da      	ldr	r2, [r3, #28]
 80094b2:	68bb      	ldr	r3, [r7, #8]
 80094b4:	4013      	ands	r3, r2
 80094b6:	68ba      	ldr	r2, [r7, #8]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	bf0c      	ite	eq
 80094bc:	2301      	moveq	r3, #1
 80094be:	2300      	movne	r3, #0
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	461a      	mov	r2, r3
 80094c4:	79fb      	ldrb	r3, [r7, #7]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d092      	beq.n	80093f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80094ca:	2300      	movs	r3, #0
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80094ea:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	689a      	ldr	r2, [r3, #8]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f022 0201 	bic.w	r2, r2, #1
 80094fa:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2220      	movs	r2, #32
 8009500:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2200      	movs	r2, #0
 8009506:	661a      	str	r2, [r3, #96]	; 0x60
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009520:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	2200      	movs	r2, #0
 800952e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f7ff fc48 	bl	8008dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009538:	bf00      	nop
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b082      	sub	sp, #8
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009556:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2220      	movs	r2, #32
 800955c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f7ff fc25 	bl	8008db4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800956a:	bf00      	nop
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009580:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009586:	2b22      	cmp	r3, #34	; 0x22
 8009588:	d13a      	bne.n	8009600 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009590:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009592:	89bb      	ldrh	r3, [r7, #12]
 8009594:	b2d9      	uxtb	r1, r3
 8009596:	89fb      	ldrh	r3, [r7, #14]
 8009598:	b2da      	uxtb	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800959e:	400a      	ands	r2, r1
 80095a0:	b2d2      	uxtb	r2, r2
 80095a2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095a8:	1c5a      	adds	r2, r3, #1
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	3b01      	subs	r3, #1
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80095c6:	b29b      	uxth	r3, r3
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d121      	bne.n	8009610 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80095da:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689a      	ldr	r2, [r3, #8]
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	f022 0201 	bic.w	r2, r2, #1
 80095ea:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	2220      	movs	r2, #32
 80095f0:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	2200      	movs	r2, #0
 80095f6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f001 f861 	bl	800a6c0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095fe:	e007      	b.n	8009610 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	699a      	ldr	r2, [r3, #24]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f042 0208 	orr.w	r2, r2, #8
 800960e:	619a      	str	r2, [r3, #24]
}
 8009610:	bf00      	nop
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009626:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800962c:	2b22      	cmp	r3, #34	; 0x22
 800962e:	d13a      	bne.n	80096a6 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009636:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800963c:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800963e:	89ba      	ldrh	r2, [r7, #12]
 8009640:	89fb      	ldrh	r3, [r7, #14]
 8009642:	4013      	ands	r3, r2
 8009644:	b29a      	uxth	r2, r3
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800964e:	1c9a      	adds	r2, r3, #2
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800965a:	b29b      	uxth	r3, r3
 800965c:	3b01      	subs	r3, #1
 800965e:	b29a      	uxth	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800966c:	b29b      	uxth	r3, r3
 800966e:	2b00      	cmp	r3, #0
 8009670:	d121      	bne.n	80096b6 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8009680:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	689a      	ldr	r2, [r3, #8]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f022 0201 	bic.w	r2, r2, #1
 8009690:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2220      	movs	r2, #32
 8009696:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f001 f80e 	bl	800a6c0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096a4:	e007      	b.n	80096b6 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	699a      	ldr	r2, [r3, #24]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	f042 0208 	orr.w	r2, r2, #8
 80096b4:	619a      	str	r2, [r3, #24]
}
 80096b6:	bf00      	nop
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}

080096be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096be:	b480      	push	{r7}
 80096c0:	b083      	sub	sp, #12
 80096c2:	af00      	add	r7, sp, #0
 80096c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	0000      	movs	r0, r0
 80096d4:	0000      	movs	r0, r0
	...

080096d8 <calculate_heat_index_fahrenheit>:
#include "weather_utils.h"


float calculate_heat_index_fahrenheit(float T, float RH)
{
 80096d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80096dc:	b086      	sub	sp, #24
 80096de:	af00      	add	r7, sp, #0
 80096e0:	ed87 0a01 	vstr	s0, [r7, #4]
 80096e4:	edc7 0a00 	vstr	s1, [r7]
	float heat_index =  0.5*(T + 61.0 + ((T - 68.0)*1.2) + (RH*0.094));
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f7f6 ff35 	bl	8000558 <__aeabi_f2d>
 80096ee:	f04f 0200 	mov.w	r2, #0
 80096f2:	4be9      	ldr	r3, [pc, #932]	; (8009a98 <calculate_heat_index_fahrenheit+0x3c0>)
 80096f4:	f7f6 fdd2 	bl	800029c <__adddf3>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	4690      	mov	r8, r2
 80096fe:	4699      	mov	r9, r3
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f7f6 ff29 	bl	8000558 <__aeabi_f2d>
 8009706:	f04f 0200 	mov.w	r2, #0
 800970a:	4be4      	ldr	r3, [pc, #912]	; (8009a9c <calculate_heat_index_fahrenheit+0x3c4>)
 800970c:	f7f6 fdc4 	bl	8000298 <__aeabi_dsub>
 8009710:	4602      	mov	r2, r0
 8009712:	460b      	mov	r3, r1
 8009714:	4610      	mov	r0, r2
 8009716:	4619      	mov	r1, r3
 8009718:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800971c:	4be0      	ldr	r3, [pc, #896]	; (8009aa0 <calculate_heat_index_fahrenheit+0x3c8>)
 800971e:	f7f6 ff73 	bl	8000608 <__aeabi_dmul>
 8009722:	4602      	mov	r2, r0
 8009724:	460b      	mov	r3, r1
 8009726:	4640      	mov	r0, r8
 8009728:	4649      	mov	r1, r9
 800972a:	f7f6 fdb7 	bl	800029c <__adddf3>
 800972e:	4602      	mov	r2, r0
 8009730:	460b      	mov	r3, r1
 8009732:	4690      	mov	r8, r2
 8009734:	4699      	mov	r9, r3
 8009736:	6838      	ldr	r0, [r7, #0]
 8009738:	f7f6 ff0e 	bl	8000558 <__aeabi_f2d>
 800973c:	a3c0      	add	r3, pc, #768	; (adr r3, 8009a40 <calculate_heat_index_fahrenheit+0x368>)
 800973e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009742:	f7f6 ff61 	bl	8000608 <__aeabi_dmul>
 8009746:	4602      	mov	r2, r0
 8009748:	460b      	mov	r3, r1
 800974a:	4640      	mov	r0, r8
 800974c:	4649      	mov	r1, r9
 800974e:	f7f6 fda5 	bl	800029c <__adddf3>
 8009752:	4602      	mov	r2, r0
 8009754:	460b      	mov	r3, r1
 8009756:	4610      	mov	r0, r2
 8009758:	4619      	mov	r1, r3
 800975a:	f04f 0200 	mov.w	r2, #0
 800975e:	4bd1      	ldr	r3, [pc, #836]	; (8009aa4 <calculate_heat_index_fahrenheit+0x3cc>)
 8009760:	f7f6 ff52 	bl	8000608 <__aeabi_dmul>
 8009764:	4602      	mov	r2, r0
 8009766:	460b      	mov	r3, r1
 8009768:	4610      	mov	r0, r2
 800976a:	4619      	mov	r1, r3
 800976c:	f7f7 fa44 	bl	8000bf8 <__aeabi_d2f>
 8009770:	4603      	mov	r3, r0
 8009772:	617b      	str	r3, [r7, #20]

	if (heat_index >= 80) {
 8009774:	edd7 7a05 	vldr	s15, [r7, #20]
 8009778:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8009aa8 <calculate_heat_index_fahrenheit+0x3d0>
 800977c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009784:	f2c0 81fe 	blt.w	8009b84 <calculate_heat_index_fahrenheit+0x4ac>
		heat_index = -42.379 + 2.04901523*T + 10.14333127*RH - .22475541*T*RH - .00683783*T*T - \
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	f7f6 fee5 	bl	8000558 <__aeabi_f2d>
 800978e:	a3ae      	add	r3, pc, #696	; (adr r3, 8009a48 <calculate_heat_index_fahrenheit+0x370>)
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	f7f6 ff38 	bl	8000608 <__aeabi_dmul>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4610      	mov	r0, r2
 800979e:	4619      	mov	r1, r3
 80097a0:	a3ab      	add	r3, pc, #684	; (adr r3, 8009a50 <calculate_heat_index_fahrenheit+0x378>)
 80097a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a6:	f7f6 fd77 	bl	8000298 <__aeabi_dsub>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	4690      	mov	r8, r2
 80097b0:	4699      	mov	r9, r3
 80097b2:	6838      	ldr	r0, [r7, #0]
 80097b4:	f7f6 fed0 	bl	8000558 <__aeabi_f2d>
 80097b8:	a3a7      	add	r3, pc, #668	; (adr r3, 8009a58 <calculate_heat_index_fahrenheit+0x380>)
 80097ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097be:	f7f6 ff23 	bl	8000608 <__aeabi_dmul>
 80097c2:	4602      	mov	r2, r0
 80097c4:	460b      	mov	r3, r1
 80097c6:	4640      	mov	r0, r8
 80097c8:	4649      	mov	r1, r9
 80097ca:	f7f6 fd67 	bl	800029c <__adddf3>
 80097ce:	4602      	mov	r2, r0
 80097d0:	460b      	mov	r3, r1
 80097d2:	4690      	mov	r8, r2
 80097d4:	4699      	mov	r9, r3
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f7f6 febe 	bl	8000558 <__aeabi_f2d>
 80097dc:	a3a0      	add	r3, pc, #640	; (adr r3, 8009a60 <calculate_heat_index_fahrenheit+0x388>)
 80097de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097e2:	f7f6 ff11 	bl	8000608 <__aeabi_dmul>
 80097e6:	4602      	mov	r2, r0
 80097e8:	460b      	mov	r3, r1
 80097ea:	4692      	mov	sl, r2
 80097ec:	469b      	mov	fp, r3
 80097ee:	6838      	ldr	r0, [r7, #0]
 80097f0:	f7f6 feb2 	bl	8000558 <__aeabi_f2d>
 80097f4:	4602      	mov	r2, r0
 80097f6:	460b      	mov	r3, r1
 80097f8:	4650      	mov	r0, sl
 80097fa:	4659      	mov	r1, fp
 80097fc:	f7f6 ff04 	bl	8000608 <__aeabi_dmul>
 8009800:	4602      	mov	r2, r0
 8009802:	460b      	mov	r3, r1
 8009804:	4640      	mov	r0, r8
 8009806:	4649      	mov	r1, r9
 8009808:	f7f6 fd46 	bl	8000298 <__aeabi_dsub>
 800980c:	4602      	mov	r2, r0
 800980e:	460b      	mov	r3, r1
 8009810:	4690      	mov	r8, r2
 8009812:	4699      	mov	r9, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7f6 fe9f 	bl	8000558 <__aeabi_f2d>
 800981a:	a393      	add	r3, pc, #588	; (adr r3, 8009a68 <calculate_heat_index_fahrenheit+0x390>)
 800981c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009820:	f7f6 fef2 	bl	8000608 <__aeabi_dmul>
 8009824:	4602      	mov	r2, r0
 8009826:	460b      	mov	r3, r1
 8009828:	4692      	mov	sl, r2
 800982a:	469b      	mov	fp, r3
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f7f6 fe93 	bl	8000558 <__aeabi_f2d>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4650      	mov	r0, sl
 8009838:	4659      	mov	r1, fp
 800983a:	f7f6 fee5 	bl	8000608 <__aeabi_dmul>
 800983e:	4602      	mov	r2, r0
 8009840:	460b      	mov	r3, r1
 8009842:	4640      	mov	r0, r8
 8009844:	4649      	mov	r1, r9
 8009846:	f7f6 fd27 	bl	8000298 <__aeabi_dsub>
 800984a:	4602      	mov	r2, r0
 800984c:	460b      	mov	r3, r1
 800984e:	4690      	mov	r8, r2
 8009850:	4699      	mov	r9, r3
					 .05481717*RH*RH + .00122874*T*T*RH + .00085282*T*RH*RH - .00000199*T*T*RH*RH;
 8009852:	6838      	ldr	r0, [r7, #0]
 8009854:	f7f6 fe80 	bl	8000558 <__aeabi_f2d>
 8009858:	a385      	add	r3, pc, #532	; (adr r3, 8009a70 <calculate_heat_index_fahrenheit+0x398>)
 800985a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985e:	f7f6 fed3 	bl	8000608 <__aeabi_dmul>
 8009862:	4602      	mov	r2, r0
 8009864:	460b      	mov	r3, r1
 8009866:	4692      	mov	sl, r2
 8009868:	469b      	mov	fp, r3
 800986a:	6838      	ldr	r0, [r7, #0]
 800986c:	f7f6 fe74 	bl	8000558 <__aeabi_f2d>
 8009870:	4602      	mov	r2, r0
 8009872:	460b      	mov	r3, r1
 8009874:	4650      	mov	r0, sl
 8009876:	4659      	mov	r1, fp
 8009878:	f7f6 fec6 	bl	8000608 <__aeabi_dmul>
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
		heat_index = -42.379 + 2.04901523*T + 10.14333127*RH - .22475541*T*RH - .00683783*T*T - \
 8009880:	4640      	mov	r0, r8
 8009882:	4649      	mov	r1, r9
 8009884:	f7f6 fd08 	bl	8000298 <__aeabi_dsub>
 8009888:	4602      	mov	r2, r0
 800988a:	460b      	mov	r3, r1
 800988c:	4690      	mov	r8, r2
 800988e:	4699      	mov	r9, r3
					 .05481717*RH*RH + .00122874*T*T*RH + .00085282*T*RH*RH - .00000199*T*T*RH*RH;
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7f6 fe61 	bl	8000558 <__aeabi_f2d>
 8009896:	a378      	add	r3, pc, #480	; (adr r3, 8009a78 <calculate_heat_index_fahrenheit+0x3a0>)
 8009898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800989c:	f7f6 feb4 	bl	8000608 <__aeabi_dmul>
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	4692      	mov	sl, r2
 80098a6:	469b      	mov	fp, r3
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7f6 fe55 	bl	8000558 <__aeabi_f2d>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4650      	mov	r0, sl
 80098b4:	4659      	mov	r1, fp
 80098b6:	f7f6 fea7 	bl	8000608 <__aeabi_dmul>
 80098ba:	4602      	mov	r2, r0
 80098bc:	460b      	mov	r3, r1
 80098be:	4692      	mov	sl, r2
 80098c0:	469b      	mov	fp, r3
 80098c2:	6838      	ldr	r0, [r7, #0]
 80098c4:	f7f6 fe48 	bl	8000558 <__aeabi_f2d>
 80098c8:	4602      	mov	r2, r0
 80098ca:	460b      	mov	r3, r1
 80098cc:	4650      	mov	r0, sl
 80098ce:	4659      	mov	r1, fp
 80098d0:	f7f6 fe9a 	bl	8000608 <__aeabi_dmul>
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	4640      	mov	r0, r8
 80098da:	4649      	mov	r1, r9
 80098dc:	f7f6 fcde 	bl	800029c <__adddf3>
 80098e0:	4602      	mov	r2, r0
 80098e2:	460b      	mov	r3, r1
 80098e4:	4690      	mov	r8, r2
 80098e6:	4699      	mov	r9, r3
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7f6 fe35 	bl	8000558 <__aeabi_f2d>
 80098ee:	a364      	add	r3, pc, #400	; (adr r3, 8009a80 <calculate_heat_index_fahrenheit+0x3a8>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f7f6 fe88 	bl	8000608 <__aeabi_dmul>
 80098f8:	4602      	mov	r2, r0
 80098fa:	460b      	mov	r3, r1
 80098fc:	4692      	mov	sl, r2
 80098fe:	469b      	mov	fp, r3
 8009900:	6838      	ldr	r0, [r7, #0]
 8009902:	f7f6 fe29 	bl	8000558 <__aeabi_f2d>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4650      	mov	r0, sl
 800990c:	4659      	mov	r1, fp
 800990e:	f7f6 fe7b 	bl	8000608 <__aeabi_dmul>
 8009912:	4602      	mov	r2, r0
 8009914:	460b      	mov	r3, r1
 8009916:	4692      	mov	sl, r2
 8009918:	469b      	mov	fp, r3
 800991a:	6838      	ldr	r0, [r7, #0]
 800991c:	f7f6 fe1c 	bl	8000558 <__aeabi_f2d>
 8009920:	4602      	mov	r2, r0
 8009922:	460b      	mov	r3, r1
 8009924:	4650      	mov	r0, sl
 8009926:	4659      	mov	r1, fp
 8009928:	f7f6 fe6e 	bl	8000608 <__aeabi_dmul>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4640      	mov	r0, r8
 8009932:	4649      	mov	r1, r9
 8009934:	f7f6 fcb2 	bl	800029c <__adddf3>
 8009938:	4602      	mov	r2, r0
 800993a:	460b      	mov	r3, r1
 800993c:	4690      	mov	r8, r2
 800993e:	4699      	mov	r9, r3
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7f6 fe09 	bl	8000558 <__aeabi_f2d>
 8009946:	a350      	add	r3, pc, #320	; (adr r3, 8009a88 <calculate_heat_index_fahrenheit+0x3b0>)
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	f7f6 fe5c 	bl	8000608 <__aeabi_dmul>
 8009950:	4602      	mov	r2, r0
 8009952:	460b      	mov	r3, r1
 8009954:	4692      	mov	sl, r2
 8009956:	469b      	mov	fp, r3
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f7f6 fdfd 	bl	8000558 <__aeabi_f2d>
 800995e:	4602      	mov	r2, r0
 8009960:	460b      	mov	r3, r1
 8009962:	4650      	mov	r0, sl
 8009964:	4659      	mov	r1, fp
 8009966:	f7f6 fe4f 	bl	8000608 <__aeabi_dmul>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4692      	mov	sl, r2
 8009970:	469b      	mov	fp, r3
 8009972:	6838      	ldr	r0, [r7, #0]
 8009974:	f7f6 fdf0 	bl	8000558 <__aeabi_f2d>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4650      	mov	r0, sl
 800997e:	4659      	mov	r1, fp
 8009980:	f7f6 fe42 	bl	8000608 <__aeabi_dmul>
 8009984:	4602      	mov	r2, r0
 8009986:	460b      	mov	r3, r1
 8009988:	4692      	mov	sl, r2
 800998a:	469b      	mov	fp, r3
 800998c:	6838      	ldr	r0, [r7, #0]
 800998e:	f7f6 fde3 	bl	8000558 <__aeabi_f2d>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	4650      	mov	r0, sl
 8009998:	4659      	mov	r1, fp
 800999a:	f7f6 fe35 	bl	8000608 <__aeabi_dmul>
 800999e:	4602      	mov	r2, r0
 80099a0:	460b      	mov	r3, r1
 80099a2:	4640      	mov	r0, r8
 80099a4:	4649      	mov	r1, r9
 80099a6:	f7f6 fc77 	bl	8000298 <__aeabi_dsub>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
		heat_index = -42.379 + 2.04901523*T + 10.14333127*RH - .22475541*T*RH - .00683783*T*T - \
 80099ae:	4610      	mov	r0, r2
 80099b0:	4619      	mov	r1, r3
 80099b2:	f7f7 f921 	bl	8000bf8 <__aeabi_d2f>
 80099b6:	4603      	mov	r3, r0
 80099b8:	617b      	str	r3, [r7, #20]

		if (RH < 13 && T >= 80 && T <= 112) {
 80099ba:	edd7 7a00 	vldr	s15, [r7]
 80099be:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80099c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ca:	f140 80a0 	bpl.w	8009b0e <calculate_heat_index_fahrenheit+0x436>
 80099ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80099d2:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8009aa8 <calculate_heat_index_fahrenheit+0x3d0>
 80099d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099de:	f2c0 8096 	blt.w	8009b0e <calculate_heat_index_fahrenheit+0x436>
 80099e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80099e6:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8009aac <calculate_heat_index_fahrenheit+0x3d4>
 80099ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80099ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099f2:	f200 808c 	bhi.w	8009b0e <calculate_heat_index_fahrenheit+0x436>
			float adjustment = ((13 - RH)/4)*sqrt((17 - fabs(T - 95.))/17);
 80099f6:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80099fa:	edd7 7a00 	vldr	s15, [r7]
 80099fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009a02:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 8009a06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009a0a:	ee16 0a90 	vmov	r0, s13
 8009a0e:	f7f6 fda3 	bl	8000558 <__aeabi_f2d>
 8009a12:	4680      	mov	r8, r0
 8009a14:	4689      	mov	r9, r1
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f7f6 fd9e 	bl	8000558 <__aeabi_f2d>
 8009a1c:	a31c      	add	r3, pc, #112	; (adr r3, 8009a90 <calculate_heat_index_fahrenheit+0x3b8>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f7f6 fc39 	bl	8000298 <__aeabi_dsub>
 8009a26:	4602      	mov	r2, r0
 8009a28:	460b      	mov	r3, r1
 8009a2a:	4614      	mov	r4, r2
 8009a2c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8009a30:	4622      	mov	r2, r4
 8009a32:	462b      	mov	r3, r5
 8009a34:	f04f 0000 	mov.w	r0, #0
 8009a38:	e03a      	b.n	8009ab0 <calculate_heat_index_fahrenheit+0x3d8>
 8009a3a:	bf00      	nop
 8009a3c:	f3af 8000 	nop.w
 8009a40:	4dd2f1aa 	.word	0x4dd2f1aa
 8009a44:	3fb81062 	.word	0x3fb81062
 8009a48:	18ced8ec 	.word	0x18ced8ec
 8009a4c:	40006462 	.word	0x40006462
 8009a50:	126e978d 	.word	0x126e978d
 8009a54:	40453083 	.word	0x40453083
 8009a58:	b75a49cd 	.word	0xb75a49cd
 8009a5c:	40244962 	.word	0x40244962
 8009a60:	07c647f8 	.word	0x07c647f8
 8009a64:	3fccc4c9 	.word	0x3fccc4c9
 8009a68:	039c16cc 	.word	0x039c16cc
 8009a6c:	3f7c01fc 	.word	0x3f7c01fc
 8009a70:	00d18c24 	.word	0x00d18c24
 8009a74:	3fac10ff 	.word	0x3fac10ff
 8009a78:	8760dce5 	.word	0x8760dce5
 8009a7c:	3f5421b5 	.word	0x3f5421b5
 8009a80:	013330da 	.word	0x013330da
 8009a84:	3f4bf1f9 	.word	0x3f4bf1f9
 8009a88:	11d3bd01 	.word	0x11d3bd01
 8009a8c:	3ec0b17e 	.word	0x3ec0b17e
 8009a90:	00000000 	.word	0x00000000
 8009a94:	4057c000 	.word	0x4057c000
 8009a98:	404e8000 	.word	0x404e8000
 8009a9c:	40510000 	.word	0x40510000
 8009aa0:	3ff33333 	.word	0x3ff33333
 8009aa4:	3fe00000 	.word	0x3fe00000
 8009aa8:	42a00000 	.word	0x42a00000
 8009aac:	42e00000 	.word	0x42e00000
 8009ab0:	4939      	ldr	r1, [pc, #228]	; (8009b98 <calculate_heat_index_fahrenheit+0x4c0>)
 8009ab2:	f7f6 fbf1 	bl	8000298 <__aeabi_dsub>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	460c      	mov	r4, r1
 8009aba:	4618      	mov	r0, r3
 8009abc:	4621      	mov	r1, r4
 8009abe:	f04f 0200 	mov.w	r2, #0
 8009ac2:	4b35      	ldr	r3, [pc, #212]	; (8009b98 <calculate_heat_index_fahrenheit+0x4c0>)
 8009ac4:	f7f6 feca 	bl	800085c <__aeabi_ddiv>
 8009ac8:	4603      	mov	r3, r0
 8009aca:	460c      	mov	r4, r1
 8009acc:	ec44 3b17 	vmov	d7, r3, r4
 8009ad0:	eeb0 0a47 	vmov.f32	s0, s14
 8009ad4:	eef0 0a67 	vmov.f32	s1, s15
 8009ad8:	f003 fa4a 	bl	800cf70 <sqrt>
 8009adc:	ec54 3b10 	vmov	r3, r4, d0
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	4623      	mov	r3, r4
 8009ae4:	4640      	mov	r0, r8
 8009ae6:	4649      	mov	r1, r9
 8009ae8:	f7f6 fd8e 	bl	8000608 <__aeabi_dmul>
 8009aec:	4603      	mov	r3, r0
 8009aee:	460c      	mov	r4, r1
 8009af0:	4618      	mov	r0, r3
 8009af2:	4621      	mov	r1, r4
 8009af4:	f7f7 f880 	bl	8000bf8 <__aeabi_d2f>
 8009af8:	4603      	mov	r3, r0
 8009afa:	613b      	str	r3, [r7, #16]
			heat_index -= adjustment;
 8009afc:	ed97 7a05 	vldr	s14, [r7, #20]
 8009b00:	edd7 7a04 	vldr	s15, [r7, #16]
 8009b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009b08:	edc7 7a05 	vstr	s15, [r7, #20]
		if (RH < 13 && T >= 80 && T <= 112) {
 8009b0c:	e03a      	b.n	8009b84 <calculate_heat_index_fahrenheit+0x4ac>
		} else if (RH < 85 && T >= 80 && T <= 87) {
 8009b0e:	edd7 7a00 	vldr	s15, [r7]
 8009b12:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8009b9c <calculate_heat_index_fahrenheit+0x4c4>
 8009b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1e:	d531      	bpl.n	8009b84 <calculate_heat_index_fahrenheit+0x4ac>
 8009b20:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b24:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8009ba0 <calculate_heat_index_fahrenheit+0x4c8>
 8009b28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b30:	db28      	blt.n	8009b84 <calculate_heat_index_fahrenheit+0x4ac>
 8009b32:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b36:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8009ba4 <calculate_heat_index_fahrenheit+0x4cc>
 8009b3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b42:	d81f      	bhi.n	8009b84 <calculate_heat_index_fahrenheit+0x4ac>
			float adjustment = ((RH - 85)/10)*((87 - T)/5);
 8009b44:	edd7 7a00 	vldr	s15, [r7]
 8009b48:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8009b9c <calculate_heat_index_fahrenheit+0x4c4>
 8009b4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009b50:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8009b54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009b58:	eddf 6a12 	vldr	s13, [pc, #72]	; 8009ba4 <calculate_heat_index_fahrenheit+0x4cc>
 8009b5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8009b60:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8009b64:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8009b68:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8009b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b70:	edc7 7a03 	vstr	s15, [r7, #12]
			heat_index += adjustment;
 8009b74:	ed97 7a05 	vldr	s14, [r7, #20]
 8009b78:	edd7 7a03 	vldr	s15, [r7, #12]
 8009b7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009b80:	edc7 7a05 	vstr	s15, [r7, #20]
		}
	}

	return heat_index;
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	ee07 3a90 	vmov	s15, r3
}
 8009b8a:	eeb0 0a67 	vmov.f32	s0, s15
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b96:	bf00      	nop
 8009b98:	40310000 	.word	0x40310000
 8009b9c:	42aa0000 	.word	0x42aa0000
 8009ba0:	42a00000 	.word	0x42a00000
 8009ba4:	42ae0000 	.word	0x42ae0000

08009ba8 <to_fahrenheit>:


float to_fahrenheit(float T)
{
 8009ba8:	b590      	push	{r4, r7, lr}
 8009baa:	b083      	sub	sp, #12
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	ed87 0a01 	vstr	s0, [r7, #4]
	return T*1.8 + 32;
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f7f6 fcd0 	bl	8000558 <__aeabi_f2d>
 8009bb8:	a30e      	add	r3, pc, #56	; (adr r3, 8009bf4 <to_fahrenheit+0x4c>)
 8009bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbe:	f7f6 fd23 	bl	8000608 <__aeabi_dmul>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	460c      	mov	r4, r1
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	4621      	mov	r1, r4
 8009bca:	f04f 0200 	mov.w	r2, #0
 8009bce:	4b08      	ldr	r3, [pc, #32]	; (8009bf0 <to_fahrenheit+0x48>)
 8009bd0:	f7f6 fb64 	bl	800029c <__adddf3>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	460c      	mov	r4, r1
 8009bd8:	4618      	mov	r0, r3
 8009bda:	4621      	mov	r1, r4
 8009bdc:	f7f7 f80c 	bl	8000bf8 <__aeabi_d2f>
 8009be0:	4603      	mov	r3, r0
 8009be2:	ee07 3a90 	vmov	s15, r3
}
 8009be6:	eeb0 0a67 	vmov.f32	s0, s15
 8009bea:	370c      	adds	r7, #12
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd90      	pop	{r4, r7, pc}
 8009bf0:	40400000 	.word	0x40400000
 8009bf4:	cccccccd 	.word	0xcccccccd
 8009bf8:	3ffccccc 	.word	0x3ffccccc
 8009bfc:	00000000 	.word	0x00000000

08009c00 <to_celsius>:


float to_celsius(float T)
{
 8009c00:	b590      	push	{r4, r7, lr}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	ed87 0a01 	vstr	s0, [r7, #4]
	return (T - 32)/1.8;
 8009c0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8009c0e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8009c50 <to_celsius+0x50>
 8009c12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c16:	ee17 0a90 	vmov	r0, s15
 8009c1a:	f7f6 fc9d 	bl	8000558 <__aeabi_f2d>
 8009c1e:	a30a      	add	r3, pc, #40	; (adr r3, 8009c48 <to_celsius+0x48>)
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	f7f6 fe1a 	bl	800085c <__aeabi_ddiv>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	460c      	mov	r4, r1
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	4621      	mov	r1, r4
 8009c30:	f7f6 ffe2 	bl	8000bf8 <__aeabi_d2f>
 8009c34:	4603      	mov	r3, r0
 8009c36:	ee07 3a90 	vmov	s15, r3
}
 8009c3a:	eeb0 0a67 	vmov.f32	s0, s15
 8009c3e:	370c      	adds	r7, #12
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd90      	pop	{r4, r7, pc}
 8009c44:	f3af 8000 	nop.w
 8009c48:	cccccccd 	.word	0xcccccccd
 8009c4c:	3ffccccc 	.word	0x3ffccccc
 8009c50:	42000000 	.word	0x42000000

08009c54 <start_sensors>:
char json[JSON_LENGTH] = {'\0'};


void start_sensors(UART_HandleTypeDef *huart_esp8266, UART_HandleTypeDef *huart_stm32,
		           ADC_HandleTypeDef *hadc, TIM_HandleTypeDef *htim_temt, I2C_HandleTypeDef *hi2c)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b086      	sub	sp, #24
 8009c58:	af02      	add	r7, sp, #8
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]
 8009c60:	603b      	str	r3, [r7, #0]
	NetworkInfo_Update(SSID, PASSWORD, ADDRESS, PORT, TYPE);
 8009c62:	2301      	movs	r3, #1
 8009c64:	9300      	str	r3, [sp, #0]
 8009c66:	f641 739a 	movw	r3, #8090	; 0x1f9a
 8009c6a:	4a18      	ldr	r2, [pc, #96]	; (8009ccc <start_sensors+0x78>)
 8009c6c:	4918      	ldr	r1, [pc, #96]	; (8009cd0 <start_sensors+0x7c>)
 8009c6e:	4819      	ldr	r0, [pc, #100]	; (8009cd4 <start_sensors+0x80>)
 8009c70:	f7f9 fbf8 	bl	8003464 <NetworkInfo_Update>
	ESP8266_Init(huart_esp8266, huart_stm32);
 8009c74:	68b9      	ldr	r1, [r7, #8]
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f7f9 f970 	bl	8002f5c <ESP8266_Init>
	while (ESP8266_Start() != ESP_START_SUCCESS);
 8009c7c:	bf00      	nop
 8009c7e:	f7f9 fa09 	bl	8003094 <ESP8266_Start>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d1fa      	bne.n	8009c7e <start_sensors+0x2a>

	DWT_Init();
 8009c88:	f7fa f84e 	bl	8003d28 <DWT_Init>
	DHT_Init(1);
 8009c8c:	2001      	movs	r0, #1
 8009c8e:	f7f8 fc1d 	bl	80024cc <DHT_Init>
	DS18B20_Init(DS18B20_Resolution_12bits);
 8009c92:	200c      	movs	r0, #12
 8009c94:	f7f9 f840 	bl	8002d18 <DS18B20_Init>
	FC37_Init();
 8009c98:	f7f9 fc46 	bl	8003528 <FC37_Init>
	TEMT600_Init();
 8009c9c:	f7f9 fcce 	bl	800363c <TEMT600_Init>
	BME280_Init(hi2c, BME280_FORCED_MODE, BME280_MONITORING_WEATHER);
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2101      	movs	r1, #1
 8009ca4:	69b8      	ldr	r0, [r7, #24]
 8009ca6:	f7f8 fa47 	bl	8002138 <BME280_Init>

	DHT_Sample();
 8009caa:	f7f8 fc81 	bl	80025b0 <DHT_Sample>
	BME280_Sample(true);
 8009cae:	2001      	movs	r0, #1
 8009cb0:	f7f8 fb50 	bl	8002354 <BME280_Sample>

	HAL_TIM_Base_Start(htim_temt);
 8009cb4:	6838      	ldr	r0, [r7, #0]
 8009cb6:	f7fe fa41 	bl	800813c <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(hadc, (uint32_t*)adc1_buffer, ADC1_BUFFER_LENGTH);
 8009cba:	220c      	movs	r2, #12
 8009cbc:	4906      	ldr	r1, [pc, #24]	; (8009cd8 <start_sensors+0x84>)
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f7fa faf4 	bl	80042ac <HAL_ADC_Start_DMA>
}
 8009cc4:	bf00      	nop
 8009cc6:	3710      	adds	r7, #16
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	0800d62c 	.word	0x0800d62c
 8009cd0:	0800d63c 	.word	0x0800d63c
 8009cd4:	0800d64c 	.word	0x0800d64c
 8009cd8:	20000208 	.word	0x20000208

08009cdc <sample_and_post>:


void sample_and_post(char *endpoint, bool *is_conversion_completed)
{
 8009cdc:	b5b0      	push	{r4, r5, r7, lr}
 8009cde:	b08c      	sub	sp, #48	; 0x30
 8009ce0:	af08      	add	r7, sp, #32
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
    while (!(*is_conversion_completed)) {};
 8009ce6:	bf00      	nop
 8009ce8:	683b      	ldr	r3, [r7, #0]
 8009cea:	781b      	ldrb	r3, [r3, #0]
 8009cec:	f083 0301 	eor.w	r3, r3, #1
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1f8      	bne.n	8009ce8 <sample_and_post+0xc>
	*is_conversion_completed = false;
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	701a      	strb	r2, [r3, #0]
	_average_raw_values();
 8009cfc:	f000 f8dc 	bl	8009eb8 <_average_raw_values>

	DHT_Sample();
 8009d00:	f7f8 fc56 	bl	80025b0 <DHT_Sample>
	DHT_ToJson_Partial(json_dht);
 8009d04:	4861      	ldr	r0, [pc, #388]	; (8009e8c <sample_and_post+0x1b0>)
 8009d06:	f7f8 fc05 	bl	8002514 <DHT_ToJson_Partial>

	TEMT600_Sample();
 8009d0a:	f7f9 fcad 	bl	8003668 <TEMT600_Sample>
	TEMT600_ToJson_Partial(json_temt600);
 8009d0e:	4860      	ldr	r0, [pc, #384]	; (8009e90 <sample_and_post+0x1b4>)
 8009d10:	f7f9 fd0a 	bl	8003728 <TEMT600_ToJson_Partial>

	FC37_Sample();
 8009d14:	f7f9 fc18 	bl	8003548 <FC37_Sample>
	FC37_ToJson_Partial(json_fc37);
 8009d18:	485e      	ldr	r0, [pc, #376]	; (8009e94 <sample_and_post+0x1b8>)
 8009d1a:	f7f9 fc3f 	bl	800359c <FC37_ToJson_Partial>

	DS18B20_Sample(ds18b20_temperatures);
 8009d1e:	485e      	ldr	r0, [pc, #376]	; (8009e98 <sample_and_post+0x1bc>)
 8009d20:	f7f9 f854 	bl	8002dcc <DS18B20_Sample>
	DS18B20_ToJson_Partial(json_ds18b20, ds18b20_temperatures);
 8009d24:	495c      	ldr	r1, [pc, #368]	; (8009e98 <sample_and_post+0x1bc>)
 8009d26:	485d      	ldr	r0, [pc, #372]	; (8009e9c <sample_and_post+0x1c0>)
 8009d28:	f7f9 f888 	bl	8002e3c <DS18B20_ToJson_Partial>

	BME280_Sample(true);
 8009d2c:	2001      	movs	r0, #1
 8009d2e:	f7f8 fb11 	bl	8002354 <BME280_Sample>
	BME280_ToJson_Partial(json_bme280);
 8009d32:	485b      	ldr	r0, [pc, #364]	; (8009ea0 <sample_and_post+0x1c4>)
 8009d34:	f7f8 fb2c 	bl	8002390 <BME280_ToJson_Partial>

	Temperature_t average_temperature;
	average_temperature.celsius = (DHT_GetTemperature(true) + BME280_GetTemperature(true) + ds18b20_temperatures[0].celsius)/3;
 8009d38:	2001      	movs	r0, #1
 8009d3a:	f7f8 fde5 	bl	8002908 <DHT_GetTemperature>
 8009d3e:	ee10 3a10 	vmov	r3, s0
 8009d42:	4618      	mov	r0, r3
 8009d44:	f7f6 fc08 	bl	8000558 <__aeabi_f2d>
 8009d48:	4604      	mov	r4, r0
 8009d4a:	460d      	mov	r5, r1
 8009d4c:	2001      	movs	r0, #1
 8009d4e:	f7f8 fb93 	bl	8002478 <BME280_GetTemperature>
 8009d52:	ec53 2b10 	vmov	r2, r3, d0
 8009d56:	4620      	mov	r0, r4
 8009d58:	4629      	mov	r1, r5
 8009d5a:	f7f6 fa9f 	bl	800029c <__adddf3>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	460c      	mov	r4, r1
 8009d62:	4625      	mov	r5, r4
 8009d64:	461c      	mov	r4, r3
 8009d66:	4b4c      	ldr	r3, [pc, #304]	; (8009e98 <sample_and_post+0x1bc>)
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7f6 fbf4 	bl	8000558 <__aeabi_f2d>
 8009d70:	4602      	mov	r2, r0
 8009d72:	460b      	mov	r3, r1
 8009d74:	4620      	mov	r0, r4
 8009d76:	4629      	mov	r1, r5
 8009d78:	f7f6 fa90 	bl	800029c <__adddf3>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	460c      	mov	r4, r1
 8009d80:	4618      	mov	r0, r3
 8009d82:	4621      	mov	r1, r4
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	4b46      	ldr	r3, [pc, #280]	; (8009ea4 <sample_and_post+0x1c8>)
 8009d8a:	f7f6 fd67 	bl	800085c <__aeabi_ddiv>
 8009d8e:	4603      	mov	r3, r0
 8009d90:	460c      	mov	r4, r1
 8009d92:	4618      	mov	r0, r3
 8009d94:	4621      	mov	r1, r4
 8009d96:	f7f6 ff2f 	bl	8000bf8 <__aeabi_d2f>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	60fb      	str	r3, [r7, #12]
	average_temperature.fahrenheit = (DHT_GetTemperature(false) + BME280_GetTemperature(false) + ds18b20_temperatures[0].fahrenheit)/3;
 8009d9e:	2000      	movs	r0, #0
 8009da0:	f7f8 fdb2 	bl	8002908 <DHT_GetTemperature>
 8009da4:	ee10 3a10 	vmov	r3, s0
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7f6 fbd5 	bl	8000558 <__aeabi_f2d>
 8009dae:	4604      	mov	r4, r0
 8009db0:	460d      	mov	r5, r1
 8009db2:	2000      	movs	r0, #0
 8009db4:	f7f8 fb60 	bl	8002478 <BME280_GetTemperature>
 8009db8:	ec53 2b10 	vmov	r2, r3, d0
 8009dbc:	4620      	mov	r0, r4
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	f7f6 fa6c 	bl	800029c <__adddf3>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	460c      	mov	r4, r1
 8009dc8:	4625      	mov	r5, r4
 8009dca:	461c      	mov	r4, r3
 8009dcc:	4b32      	ldr	r3, [pc, #200]	; (8009e98 <sample_and_post+0x1bc>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	f7f6 fbc1 	bl	8000558 <__aeabi_f2d>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	4620      	mov	r0, r4
 8009ddc:	4629      	mov	r1, r5
 8009dde:	f7f6 fa5d 	bl	800029c <__adddf3>
 8009de2:	4603      	mov	r3, r0
 8009de4:	460c      	mov	r4, r1
 8009de6:	4618      	mov	r0, r3
 8009de8:	4621      	mov	r1, r4
 8009dea:	f04f 0200 	mov.w	r2, #0
 8009dee:	4b2d      	ldr	r3, [pc, #180]	; (8009ea4 <sample_and_post+0x1c8>)
 8009df0:	f7f6 fd34 	bl	800085c <__aeabi_ddiv>
 8009df4:	4603      	mov	r3, r0
 8009df6:	460c      	mov	r4, r1
 8009df8:	4618      	mov	r0, r3
 8009dfa:	4621      	mov	r1, r4
 8009dfc:	f7f6 fefc 	bl	8000bf8 <__aeabi_d2f>
 8009e00:	4603      	mov	r3, r0
 8009e02:	60bb      	str	r3, [r7, #8]

	// Send HTTP Header
	memset(json, 0, sizeof json);
 8009e04:	f240 1279 	movw	r2, #377	; 0x179
 8009e08:	2100      	movs	r1, #0
 8009e0a:	4827      	ldr	r0, [pc, #156]	; (8009ea8 <sample_and_post+0x1cc>)
 8009e0c:	f000 ffd3 	bl	800adb6 <memset>
	snprintf(json, sizeof json,
			 "{%s,%s,%s,%s,%s,\"T\":{\"C\":%.2f,\"F\":%.2f}}",
			 json_dht, json_ds18b20, json_fc37, json_temt600, json_bme280,
			 average_temperature.celsius, average_temperature.fahrenheit);
 8009e10:	68fb      	ldr	r3, [r7, #12]
	snprintf(json, sizeof json,
 8009e12:	4618      	mov	r0, r3
 8009e14:	f7f6 fba0 	bl	8000558 <__aeabi_f2d>
 8009e18:	4604      	mov	r4, r0
 8009e1a:	460d      	mov	r5, r1
			 average_temperature.celsius, average_temperature.fahrenheit);
 8009e1c:	68bb      	ldr	r3, [r7, #8]
	snprintf(json, sizeof json,
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f7f6 fb9a 	bl	8000558 <__aeabi_f2d>
 8009e24:	4602      	mov	r2, r0
 8009e26:	460b      	mov	r3, r1
 8009e28:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009e2c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009e30:	4b1b      	ldr	r3, [pc, #108]	; (8009ea0 <sample_and_post+0x1c4>)
 8009e32:	9303      	str	r3, [sp, #12]
 8009e34:	4b16      	ldr	r3, [pc, #88]	; (8009e90 <sample_and_post+0x1b4>)
 8009e36:	9302      	str	r3, [sp, #8]
 8009e38:	4b16      	ldr	r3, [pc, #88]	; (8009e94 <sample_and_post+0x1b8>)
 8009e3a:	9301      	str	r3, [sp, #4]
 8009e3c:	4b17      	ldr	r3, [pc, #92]	; (8009e9c <sample_and_post+0x1c0>)
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	4b12      	ldr	r3, [pc, #72]	; (8009e8c <sample_and_post+0x1b0>)
 8009e42:	4a1a      	ldr	r2, [pc, #104]	; (8009eac <sample_and_post+0x1d0>)
 8009e44:	f240 1179 	movw	r1, #377	; 0x179
 8009e48:	4817      	ldr	r0, [pc, #92]	; (8009ea8 <sample_and_post+0x1cc>)
 8009e4a:	f001 fcd1 	bl	800b7f0 <sniprintf>

	memset(http_header, 0, sizeof http_header);
 8009e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009e52:	2100      	movs	r1, #0
 8009e54:	4816      	ldr	r0, [pc, #88]	; (8009eb0 <sample_and_post+0x1d4>)
 8009e56:	f000 ffae 	bl	800adb6 <memset>
	snprintf(http_header, sizeof http_header,
 8009e5a:	f7f9 fb5b 	bl	8003514 <ESP8266_GetHost>
 8009e5e:	4604      	mov	r4, r0
 8009e60:	4811      	ldr	r0, [pc, #68]	; (8009ea8 <sample_and_post+0x1cc>)
 8009e62:	f7f6 f9bd 	bl	80001e0 <strlen>
 8009e66:	4602      	mov	r2, r0
 8009e68:	4b0f      	ldr	r3, [pc, #60]	; (8009ea8 <sample_and_post+0x1cc>)
 8009e6a:	9302      	str	r3, [sp, #8]
 8009e6c:	9201      	str	r2, [sp, #4]
 8009e6e:	9400      	str	r4, [sp, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a10      	ldr	r2, [pc, #64]	; (8009eb4 <sample_and_post+0x1d8>)
 8009e74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009e78:	480d      	ldr	r0, [pc, #52]	; (8009eb0 <sample_and_post+0x1d4>)
 8009e7a:	f001 fcb9 	bl	800b7f0 <sniprintf>
			 "Content-Length: %d\r\n"
			 "\r\n"
			 "%s\r\n"
			 "\r\n", endpoint, ESP8266_GetHost(), strlen(json), json);

	ESP8266_SendData(http_header);
 8009e7e:	480c      	ldr	r0, [pc, #48]	; (8009eb0 <sample_and_post+0x1d4>)
 8009e80:	f7f9 f9f2 	bl	8003268 <ESP8266_SendData>
}
 8009e84:	bf00      	nop
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bdb0      	pop	{r4, r5, r7, pc}
 8009e8c:	20000620 	.word	0x20000620
 8009e90:	200006a4 	.word	0x200006a4
 8009e94:	20000684 	.word	0x20000684
 8009e98:	20000c9c 	.word	0x20000c9c
 8009e9c:	200006c0 	.word	0x200006c0
 8009ea0:	20000718 	.word	0x20000718
 8009ea4:	40080000 	.word	0x40080000
 8009ea8:	20000798 	.word	0x20000798
 8009eac:	0800d65c 	.word	0x0800d65c
 8009eb0:	20000220 	.word	0x20000220
 8009eb4:	0800d688 	.word	0x0800d688

08009eb8 <_average_raw_values>:


void _average_raw_values()
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	af00      	add	r7, sp, #0
	TEMT600_SetRawValue(_calculate_average(1, adc1_buffer));
 8009ebc:	4908      	ldr	r1, [pc, #32]	; (8009ee0 <_average_raw_values+0x28>)
 8009ebe:	2001      	movs	r0, #1
 8009ec0:	f000 f810 	bl	8009ee4 <_calculate_average>
 8009ec4:	4603      	mov	r3, r0
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f7f9 fc46 	bl	8003758 <TEMT600_SetRawValue>
	FC37_SetRawValue(_calculate_average(2, adc1_buffer));
 8009ecc:	4904      	ldr	r1, [pc, #16]	; (8009ee0 <_average_raw_values+0x28>)
 8009ece:	2002      	movs	r0, #2
 8009ed0:	f000 f808 	bl	8009ee4 <_calculate_average>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	f7f9 fba0 	bl	800361c <FC37_SetRawValue>
}
 8009edc:	bf00      	nop
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	20000208 	.word	0x20000208

08009ee4 <_calculate_average>:


uint16_t _calculate_average(uint8_t channel, uint16_t buffer[ADC1_BUFFER_LENGTH])
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	4603      	mov	r3, r0
 8009eec:	6039      	str	r1, [r7, #0]
 8009eee:	71fb      	strb	r3, [r7, #7]
	uint16_t average = 0;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = channel - 1; i < ADC1_BUFFER_LENGTH; i += NUM_ADC1_SENSORS)
 8009ef4:	79fb      	ldrb	r3, [r7, #7]
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	737b      	strb	r3, [r7, #13]
 8009efa:	e00a      	b.n	8009f12 <_calculate_average+0x2e>
		average += buffer[i];
 8009efc:	7b7b      	ldrb	r3, [r7, #13]
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	683a      	ldr	r2, [r7, #0]
 8009f02:	4413      	add	r3, r2
 8009f04:	881a      	ldrh	r2, [r3, #0]
 8009f06:	89fb      	ldrh	r3, [r7, #14]
 8009f08:	4413      	add	r3, r2
 8009f0a:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = channel - 1; i < ADC1_BUFFER_LENGTH; i += NUM_ADC1_SENSORS)
 8009f0c:	7b7b      	ldrb	r3, [r7, #13]
 8009f0e:	3303      	adds	r3, #3
 8009f10:	737b      	strb	r3, [r7, #13]
 8009f12:	7b7b      	ldrb	r3, [r7, #13]
 8009f14:	2b0b      	cmp	r3, #11
 8009f16:	d9f1      	bls.n	8009efc <_calculate_average+0x18>
	return average/(ADC1_BUFFER_LENGTH/NUM_ADC1_SENSORS);
 8009f18:	89fb      	ldrh	r3, [r7, #14]
 8009f1a:	089b      	lsrs	r3, r3, #2
 8009f1c:	b29b      	uxth	r3, r3
}
 8009f1e:	4618      	mov	r0, r3
 8009f20:	3714      	adds	r7, #20
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr
	...

08009f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009f32:	f7f9 ff2f 	bl	8003d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009f36:	f000 f869 	bl	800a00c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009f3a:	f000 fb39 	bl	800a5b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8009f3e:	f000 fab9 	bl	800a4b4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8009f42:	f000 fae7 	bl	800a514 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8009f46:	f000 fb15 	bl	800a574 <MX_DMA_Init>
  MX_ADC1_Init();
 8009f4a:	f000 f8cb 	bl	800a0e4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8009f4e:	f000 f949 	bl	800a1e4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8009f52:	f000 fa49 	bl	800a3e8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (uint8_t*)PROGRAM_STARTED, (uint16_t)strlen(PROGRAM_STARTED), HAL_MAX_DELAY);
 8009f56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f5a:	2213      	movs	r2, #19
 8009f5c:	491d      	ldr	r1, [pc, #116]	; (8009fd4 <main+0xa8>)
 8009f5e:	481e      	ldr	r0, [pc, #120]	; (8009fd8 <main+0xac>)
 8009f60:	f7fe fcac 	bl	80088bc <HAL_UART_Transmit>
  start_sensors(&huart3, &huart2, &hadc1, &htim2, &hi2c1);
 8009f64:	4b1d      	ldr	r3, [pc, #116]	; (8009fdc <main+0xb0>)
 8009f66:	9300      	str	r3, [sp, #0]
 8009f68:	4b1d      	ldr	r3, [pc, #116]	; (8009fe0 <main+0xb4>)
 8009f6a:	4a1e      	ldr	r2, [pc, #120]	; (8009fe4 <main+0xb8>)
 8009f6c:	491a      	ldr	r1, [pc, #104]	; (8009fd8 <main+0xac>)
 8009f6e:	481e      	ldr	r0, [pc, #120]	; (8009fe8 <main+0xbc>)
 8009f70:	f7ff fe70 	bl	8009c54 <start_sensors>
  MX_RTC_Init();
 8009f74:	f000 f976 	bl	800a264 <MX_RTC_Init>
  HAL_UART_Transmit(&huart2, (uint8_t*)PROGRAM_READY, (uint16_t)strlen(PROGRAM_READY), HAL_MAX_DELAY);
 8009f78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f7c:	2217      	movs	r2, #23
 8009f7e:	491b      	ldr	r1, [pc, #108]	; (8009fec <main+0xc0>)
 8009f80:	4815      	ldr	r0, [pc, #84]	; (8009fd8 <main+0xac>)
 8009f82:	f7fe fc9b 	bl	80088bc <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1) {
	  if (is_alarmA_fired) {
 8009f86:	4b1a      	ldr	r3, [pc, #104]	; (8009ff0 <main+0xc4>)
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00e      	beq.n	8009fac <main+0x80>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"A\r\n", (uint16_t)strlen("A\r\n"), HAL_MAX_DELAY);
 8009f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f92:	2203      	movs	r2, #3
 8009f94:	4917      	ldr	r1, [pc, #92]	; (8009ff4 <main+0xc8>)
 8009f96:	4810      	ldr	r0, [pc, #64]	; (8009fd8 <main+0xac>)
 8009f98:	f7fe fc90 	bl	80088bc <HAL_UART_Transmit>
		  is_alarmA_fired = false;
 8009f9c:	4b14      	ldr	r3, [pc, #80]	; (8009ff0 <main+0xc4>)
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	701a      	strb	r2, [r3, #0]
		  sample_and_post(ENDPOINT_LIVE_SAMPLE, &is_conversion_completed);
 8009fa2:	4915      	ldr	r1, [pc, #84]	; (8009ff8 <main+0xcc>)
 8009fa4:	4815      	ldr	r0, [pc, #84]	; (8009ffc <main+0xd0>)
 8009fa6:	f7ff fe99 	bl	8009cdc <sample_and_post>
 8009faa:	e7ec      	b.n	8009f86 <main+0x5a>
	  } else if (is_alarmB_fired) {
 8009fac:	4b14      	ldr	r3, [pc, #80]	; (800a000 <main+0xd4>)
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d0e8      	beq.n	8009f86 <main+0x5a>
		  HAL_UART_Transmit(&huart2, (uint8_t*)"B\r\n", (uint16_t)strlen("B\r\n"), HAL_MAX_DELAY);
 8009fb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fb8:	2203      	movs	r2, #3
 8009fba:	4912      	ldr	r1, [pc, #72]	; (800a004 <main+0xd8>)
 8009fbc:	4806      	ldr	r0, [pc, #24]	; (8009fd8 <main+0xac>)
 8009fbe:	f7fe fc7d 	bl	80088bc <HAL_UART_Transmit>
		  is_alarmB_fired = false;
 8009fc2:	4b0f      	ldr	r3, [pc, #60]	; (800a000 <main+0xd4>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	701a      	strb	r2, [r3, #0]
		  sample_and_post(ENDPOINT_NEW_SAMPLE, &is_conversion_completed);
 8009fc8:	490b      	ldr	r1, [pc, #44]	; (8009ff8 <main+0xcc>)
 8009fca:	480f      	ldr	r0, [pc, #60]	; (800a008 <main+0xdc>)
 8009fcc:	f7ff fe86 	bl	8009cdc <sample_and_post>
	  if (is_alarmA_fired) {
 8009fd0:	e7d9      	b.n	8009f86 <main+0x5a>
 8009fd2:	bf00      	nop
 8009fd4:	0800d6e4 	.word	0x0800d6e4
 8009fd8:	20000e64 	.word	0x20000e64
 8009fdc:	20000d24 	.word	0x20000d24
 8009fe0:	20000e24 	.word	0x20000e24
 8009fe4:	20000d70 	.word	0x20000d70
 8009fe8:	20000ca4 	.word	0x20000ca4
 8009fec:	0800d6f8 	.word	0x0800d6f8
 8009ff0:	2000093d 	.word	0x2000093d
 8009ff4:	0800d710 	.word	0x0800d710
 8009ff8:	20000911 	.word	0x20000911
 8009ffc:	0800d714 	.word	0x0800d714
 800a000:	20000969 	.word	0x20000969
 800a004:	0800d720 	.word	0x0800d720
 800a008:	0800d724 	.word	0x0800d724

0800a00c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b0a6      	sub	sp, #152	; 0x98
 800a010:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a012:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a016:	2228      	movs	r2, #40	; 0x28
 800a018:	2100      	movs	r1, #0
 800a01a:	4618      	mov	r0, r3
 800a01c:	f000 fecb 	bl	800adb6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a020:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a024:	2200      	movs	r2, #0
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	605a      	str	r2, [r3, #4]
 800a02a:	609a      	str	r2, [r3, #8]
 800a02c:	60da      	str	r2, [r3, #12]
 800a02e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a030:	1d3b      	adds	r3, r7, #4
 800a032:	2258      	movs	r2, #88	; 0x58
 800a034:	2100      	movs	r1, #0
 800a036:	4618      	mov	r0, r3
 800a038:	f000 febd 	bl	800adb6 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800a03c:	230a      	movs	r3, #10
 800a03e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800a040:	2301      	movs	r3, #1
 800a042:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800a044:	2310      	movs	r3, #16
 800a046:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a04a:	2301      	movs	r3, #1
 800a04c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a050:	2302      	movs	r3, #2
 800a052:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800a056:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a05a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800a05e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800a062:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800a066:	2300      	movs	r3, #0
 800a068:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a06c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800a070:	4618      	mov	r0, r3
 800a072:	f7fc f8e7 	bl	8006244 <HAL_RCC_OscConfig>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <SystemClock_Config+0x74>
  {
    Error_Handler();
 800a07c:	f000 fbac 	bl	800a7d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a080:	230f      	movs	r3, #15
 800a082:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a084:	2302      	movs	r3, #2
 800a086:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a088:	2300      	movs	r3, #0
 800a08a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800a08c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a090:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800a092:	2300      	movs	r3, #0
 800a094:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800a096:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800a09a:	2102      	movs	r1, #2
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fc ffe7 	bl	8007070 <HAL_RCC_ClockConfig>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d001      	beq.n	800a0ac <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800a0a8:	f000 fb96 	bl	800a7d8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3
 800a0ac:	4b0c      	ldr	r3, [pc, #48]	; (800a0e0 <SystemClock_Config+0xd4>)
 800a0ae:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	623b      	str	r3, [r7, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a0bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0c0:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a0c6:	1d3b      	adds	r3, r7, #4
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	f7fd fa07 	bl	80074dc <HAL_RCCEx_PeriphCLKConfig>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800a0d4:	f000 fb80 	bl	800a7d8 <Error_Handler>
  }
}
 800a0d8:	bf00      	nop
 800a0da:	3798      	adds	r7, #152	; 0x98
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	00110026 	.word	0x00110026

0800a0e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b08a      	sub	sp, #40	; 0x28
 800a0e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800a0ea:	f107 031c 	add.w	r3, r7, #28
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	601a      	str	r2, [r3, #0]
 800a0f2:	605a      	str	r2, [r3, #4]
 800a0f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800a0f6:	1d3b      	adds	r3, r7, #4
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	601a      	str	r2, [r3, #0]
 800a0fc:	605a      	str	r2, [r3, #4]
 800a0fe:	609a      	str	r2, [r3, #8]
 800a100:	60da      	str	r2, [r3, #12]
 800a102:	611a      	str	r2, [r3, #16]
 800a104:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800a106:	4b36      	ldr	r3, [pc, #216]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a108:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a10c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800a10e:	4b34      	ldr	r3, [pc, #208]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a110:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a114:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a116:	4b32      	ldr	r3, [pc, #200]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a118:	2200      	movs	r2, #0
 800a11a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800a11c:	4b30      	ldr	r3, [pc, #192]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a11e:	2201      	movs	r2, #1
 800a120:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a122:	4b2f      	ldr	r3, [pc, #188]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a124:	2200      	movs	r2, #0
 800a126:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a128:	4b2d      	ldr	r3, [pc, #180]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800a130:	4b2b      	ldr	r3, [pc, #172]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a132:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a136:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800a138:	4b29      	ldr	r3, [pc, #164]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a13a:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 800a13e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a140:	4b27      	ldr	r3, [pc, #156]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a142:	2200      	movs	r2, #0
 800a144:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800a146:	4b26      	ldr	r3, [pc, #152]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a148:	2202      	movs	r2, #2
 800a14a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800a14c:	4b24      	ldr	r3, [pc, #144]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a14e:	2201      	movs	r2, #1
 800a150:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a154:	4b22      	ldr	r3, [pc, #136]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a156:	2204      	movs	r2, #4
 800a158:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800a15a:	4b21      	ldr	r3, [pc, #132]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a15c:	2200      	movs	r2, #0
 800a15e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800a160:	4b1f      	ldr	r3, [pc, #124]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a162:	2200      	movs	r2, #0
 800a164:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a166:	481e      	ldr	r0, [pc, #120]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a168:	f7f9 fea6 	bl	8003eb8 <HAL_ADC_Init>
 800a16c:	4603      	mov	r3, r0
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d001      	beq.n	800a176 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800a172:	f000 fb31 	bl	800a7d8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800a176:	2300      	movs	r3, #0
 800a178:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800a17a:	f107 031c 	add.w	r3, r7, #28
 800a17e:	4619      	mov	r1, r3
 800a180:	4817      	ldr	r0, [pc, #92]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a182:	f7fa fc9b 	bl	8004abc <HAL_ADCEx_MultiModeConfigChannel>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d001      	beq.n	800a190 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800a18c:	f000 fb24 	bl	800a7d8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800a190:	2301      	movs	r3, #1
 800a192:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800a194:	2301      	movs	r3, #1
 800a196:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800a198:	2300      	movs	r3, #0
 800a19a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800a19c:	2307      	movs	r3, #7
 800a19e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a1a8:	1d3b      	adds	r3, r7, #4
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	480c      	ldr	r0, [pc, #48]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a1ae:	f7fa f999 	bl	80044e4 <HAL_ADC_ConfigChannel>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 800a1b8:	f000 fb0e 	bl	800a7d8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800a1bc:	2302      	movs	r3, #2
 800a1be:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800a1c0:	2302      	movs	r3, #2
 800a1c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a1c4:	1d3b      	adds	r3, r7, #4
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	4805      	ldr	r0, [pc, #20]	; (800a1e0 <MX_ADC1_Init+0xfc>)
 800a1ca:	f7fa f98b 	bl	80044e4 <HAL_ADC_ConfigChannel>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d001      	beq.n	800a1d8 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800a1d4:	f000 fb00 	bl	800a7d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a1d8:	bf00      	nop
 800a1da:	3728      	adds	r7, #40	; 0x28
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	bd80      	pop	{r7, pc}
 800a1e0:	20000d70 	.word	0x20000d70

0800a1e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a1e8:	4b1b      	ldr	r3, [pc, #108]	; (800a258 <MX_I2C1_Init+0x74>)
 800a1ea:	4a1c      	ldr	r2, [pc, #112]	; (800a25c <MX_I2C1_Init+0x78>)
 800a1ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800a1ee:	4b1a      	ldr	r3, [pc, #104]	; (800a258 <MX_I2C1_Init+0x74>)
 800a1f0:	4a1b      	ldr	r2, [pc, #108]	; (800a260 <MX_I2C1_Init+0x7c>)
 800a1f2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800a1f4:	4b18      	ldr	r3, [pc, #96]	; (800a258 <MX_I2C1_Init+0x74>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a1fa:	4b17      	ldr	r3, [pc, #92]	; (800a258 <MX_I2C1_Init+0x74>)
 800a1fc:	2201      	movs	r2, #1
 800a1fe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a200:	4b15      	ldr	r3, [pc, #84]	; (800a258 <MX_I2C1_Init+0x74>)
 800a202:	2200      	movs	r2, #0
 800a204:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800a206:	4b14      	ldr	r3, [pc, #80]	; (800a258 <MX_I2C1_Init+0x74>)
 800a208:	2200      	movs	r2, #0
 800a20a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800a20c:	4b12      	ldr	r3, [pc, #72]	; (800a258 <MX_I2C1_Init+0x74>)
 800a20e:	2200      	movs	r2, #0
 800a210:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a212:	4b11      	ldr	r3, [pc, #68]	; (800a258 <MX_I2C1_Init+0x74>)
 800a214:	2200      	movs	r2, #0
 800a216:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a218:	4b0f      	ldr	r3, [pc, #60]	; (800a258 <MX_I2C1_Init+0x74>)
 800a21a:	2200      	movs	r2, #0
 800a21c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a21e:	480e      	ldr	r0, [pc, #56]	; (800a258 <MX_I2C1_Init+0x74>)
 800a220:	f7fb fb1e 	bl	8005860 <HAL_I2C_Init>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800a22a:	f000 fad5 	bl	800a7d8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a22e:	2100      	movs	r1, #0
 800a230:	4809      	ldr	r0, [pc, #36]	; (800a258 <MX_I2C1_Init+0x74>)
 800a232:	f7fb ff6f 	bl	8006114 <HAL_I2CEx_ConfigAnalogFilter>
 800a236:	4603      	mov	r3, r0
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d001      	beq.n	800a240 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800a23c:	f000 facc 	bl	800a7d8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800a240:	2100      	movs	r1, #0
 800a242:	4805      	ldr	r0, [pc, #20]	; (800a258 <MX_I2C1_Init+0x74>)
 800a244:	f7fb ffb1 	bl	80061aa <HAL_I2CEx_ConfigDigitalFilter>
 800a248:	4603      	mov	r3, r0
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d001      	beq.n	800a252 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800a24e:	f000 fac3 	bl	800a7d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a252:	bf00      	nop
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	20000d24 	.word	0x20000d24
 800a25c:	40005400 	.word	0x40005400
 800a260:	2000090e 	.word	0x2000090e

0800a264 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a264:	b5b0      	push	{r4, r5, r7, lr}
 800a266:	b090      	sub	sp, #64	; 0x40
 800a268:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800a26a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a26e:	2200      	movs	r2, #0
 800a270:	601a      	str	r2, [r3, #0]
 800a272:	605a      	str	r2, [r3, #4]
 800a274:	609a      	str	r2, [r3, #8]
 800a276:	60da      	str	r2, [r3, #12]
 800a278:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800a27a:	2300      	movs	r3, #0
 800a27c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800a27e:	463b      	mov	r3, r7
 800a280:	2228      	movs	r2, #40	; 0x28
 800a282:	2100      	movs	r1, #0
 800a284:	4618      	mov	r0, r3
 800a286:	f000 fd96 	bl	800adb6 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a28a:	4b51      	ldr	r3, [pc, #324]	; (800a3d0 <MX_RTC_Init+0x16c>)
 800a28c:	4a51      	ldr	r2, [pc, #324]	; (800a3d4 <MX_RTC_Init+0x170>)
 800a28e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a290:	4b4f      	ldr	r3, [pc, #316]	; (800a3d0 <MX_RTC_Init+0x16c>)
 800a292:	2200      	movs	r2, #0
 800a294:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 0x7f;
 800a296:	4b4e      	ldr	r3, [pc, #312]	; (800a3d0 <MX_RTC_Init+0x16c>)
 800a298:	227f      	movs	r2, #127	; 0x7f
 800a29a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 0x0130;
 800a29c:	4b4c      	ldr	r3, [pc, #304]	; (800a3d0 <MX_RTC_Init+0x16c>)
 800a29e:	f44f 7298 	mov.w	r2, #304	; 0x130
 800a2a2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a2a4:	4b4a      	ldr	r3, [pc, #296]	; (800a3d0 <MX_RTC_Init+0x16c>)
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a2aa:	4b49      	ldr	r3, [pc, #292]	; (800a3d0 <MX_RTC_Init+0x16c>)
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a2b0:	4b47      	ldr	r3, [pc, #284]	; (800a3d0 <MX_RTC_Init+0x16c>)
 800a2b2:	2200      	movs	r2, #0
 800a2b4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a2b6:	4846      	ldr	r0, [pc, #280]	; (800a3d0 <MX_RTC_Init+0x16c>)
 800a2b8:	f7fd fb2e 	bl	8007918 <HAL_RTC_Init>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800a2c2:	f000 fa89 	bl	800a7d8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800a2e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	4839      	ldr	r0, [pc, #228]	; (800a3d0 <MX_RTC_Init+0x16c>)
 800a2ea:	f7fd fba6 	bl	8007a3a <HAL_RTC_SetTime>
 800a2ee:	4603      	mov	r3, r0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d001      	beq.n	800a2f8 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 800a2f4:	f000 fa70 	bl	800a7d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 800a2fe:	2301      	movs	r3, #1
 800a300:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800a304:	2301      	movs	r3, #1
 800a306:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800a310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a314:	2201      	movs	r2, #1
 800a316:	4619      	mov	r1, r3
 800a318:	482d      	ldr	r0, [pc, #180]	; (800a3d0 <MX_RTC_Init+0x16c>)
 800a31a:	f7fd fc4b 	bl	8007bb4 <HAL_RTC_SetDate>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800a324:	f000 fa58 	bl	800a7d8 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800a328:	2300      	movs	r3, #0
 800a32a:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800a32c:	2300      	movs	r3, #0
 800a32e:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 800a330:	2301      	movs	r3, #1
 800a332:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800a334:	2300      	movs	r3, #0
 800a336:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800a338:	2300      	movs	r3, #0
 800a33a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800a33c:	2300      	movs	r3, #0
 800a33e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800a340:	4b25      	ldr	r3, [pc, #148]	; (800a3d8 <MX_RTC_Init+0x174>)
 800a342:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_MINUTES;
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800a344:	2300      	movs	r3, #0
 800a346:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800a348:	2300      	movs	r3, #0
 800a34a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800a34c:	2301      	movs	r3, #1
 800a34e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800a352:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a356:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarmA = sAlarm;
 800a358:	4b20      	ldr	r3, [pc, #128]	; (800a3dc <MX_RTC_Init+0x178>)
 800a35a:	461d      	mov	r5, r3
 800a35c:	463c      	mov	r4, r7
 800a35e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a360:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a366:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a36a:	e885 0003 	stmia.w	r5, {r0, r1}
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800a36e:	463b      	mov	r3, r7
 800a370:	2201      	movs	r2, #1
 800a372:	4619      	mov	r1, r3
 800a374:	4816      	ldr	r0, [pc, #88]	; (800a3d0 <MX_RTC_Init+0x16c>)
 800a376:	f7fd fcc5 	bl	8007d04 <HAL_RTC_SetAlarm_IT>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <MX_RTC_Init+0x120>
  {
    Error_Handler();
 800a380:	f000 fa2a 	bl	800a7d8 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmTime.Minutes = 0x1;
 800a384:	2301      	movs	r3, #1
 800a386:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800a388:	2300      	movs	r3, #0
 800a38a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY|RTC_ALARMMASK_HOURS
 800a38c:	4b14      	ldr	r3, [pc, #80]	; (800a3e0 <MX_RTC_Init+0x17c>)
 800a38e:	617b      	str	r3, [r7, #20]
                              |RTC_ALARMMASK_SECONDS;
  sAlarm.AlarmDateWeekDay = 0x1;
 800a390:	2301      	movs	r3, #1
 800a392:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_B;
 800a396:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a39a:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarmB = sAlarm;
 800a39c:	4b11      	ldr	r3, [pc, #68]	; (800a3e4 <MX_RTC_Init+0x180>)
 800a39e:	461d      	mov	r5, r3
 800a3a0:	463c      	mov	r4, r7
 800a3a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a3a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a3aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800a3ae:	e885 0003 	stmia.w	r5, {r0, r1}
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800a3b2:	463b      	mov	r3, r7
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	4805      	ldr	r0, [pc, #20]	; (800a3d0 <MX_RTC_Init+0x16c>)
 800a3ba:	f7fd fca3 	bl	8007d04 <HAL_RTC_SetAlarm_IT>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d001      	beq.n	800a3c8 <MX_RTC_Init+0x164>
  {
    Error_Handler();
 800a3c4:	f000 fa08 	bl	800a7d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a3c8:	bf00      	nop
 800a3ca:	3740      	adds	r7, #64	; 0x40
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bdb0      	pop	{r4, r5, r7, pc}
 800a3d0:	20000e04 	.word	0x20000e04
 800a3d4:	40002800 	.word	0x40002800
 800a3d8:	80808000 	.word	0x80808000
 800a3dc:	20000914 	.word	0x20000914
 800a3e0:	80800080 	.word	0x80800080
 800a3e4:	20000940 	.word	0x20000940

0800a3e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b08c      	sub	sp, #48	; 0x30
 800a3ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a3ee:	f107 0320 	add.w	r3, r7, #32
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	601a      	str	r2, [r3, #0]
 800a3f6:	605a      	str	r2, [r3, #4]
 800a3f8:	609a      	str	r2, [r3, #8]
 800a3fa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800a3fc:	f107 030c 	add.w	r3, r7, #12
 800a400:	2200      	movs	r2, #0
 800a402:	601a      	str	r2, [r3, #0]
 800a404:	605a      	str	r2, [r3, #4]
 800a406:	609a      	str	r2, [r3, #8]
 800a408:	60da      	str	r2, [r3, #12]
 800a40a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a40c:	463b      	mov	r3, r7
 800a40e:	2200      	movs	r2, #0
 800a410:	601a      	str	r2, [r3, #0]
 800a412:	605a      	str	r2, [r3, #4]
 800a414:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a416:	4b26      	ldr	r3, [pc, #152]	; (800a4b0 <MX_TIM2_Init+0xc8>)
 800a418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a41c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 35999;
 800a41e:	4b24      	ldr	r3, [pc, #144]	; (800a4b0 <MX_TIM2_Init+0xc8>)
 800a420:	f648 429f 	movw	r2, #35999	; 0x8c9f
 800a424:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a426:	4b22      	ldr	r3, [pc, #136]	; (800a4b0 <MX_TIM2_Init+0xc8>)
 800a428:	2200      	movs	r2, #0
 800a42a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 800a42c:	4b20      	ldr	r3, [pc, #128]	; (800a4b0 <MX_TIM2_Init+0xc8>)
 800a42e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800a432:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a434:	4b1e      	ldr	r3, [pc, #120]	; (800a4b0 <MX_TIM2_Init+0xc8>)
 800a436:	2200      	movs	r2, #0
 800a438:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a43a:	4b1d      	ldr	r3, [pc, #116]	; (800a4b0 <MX_TIM2_Init+0xc8>)
 800a43c:	2200      	movs	r2, #0
 800a43e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a440:	481b      	ldr	r0, [pc, #108]	; (800a4b0 <MX_TIM2_Init+0xc8>)
 800a442:	f7fd fe4f 	bl	80080e4 <HAL_TIM_Base_Init>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800a44c:	f000 f9c4 	bl	800a7d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a450:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a454:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a456:	f107 0320 	add.w	r3, r7, #32
 800a45a:	4619      	mov	r1, r3
 800a45c:	4814      	ldr	r0, [pc, #80]	; (800a4b0 <MX_TIM2_Init+0xc8>)
 800a45e:	f7fd fe97 	bl	8008190 <HAL_TIM_ConfigClockSource>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800a468:	f000 f9b6 	bl	800a7d8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800a46c:	2300      	movs	r3, #0
 800a46e:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800a470:	2300      	movs	r3, #0
 800a472:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800a474:	f107 030c 	add.w	r3, r7, #12
 800a478:	4619      	mov	r1, r3
 800a47a:	480d      	ldr	r0, [pc, #52]	; (800a4b0 <MX_TIM2_Init+0xc8>)
 800a47c:	f7fd ff41 	bl	8008302 <HAL_TIM_SlaveConfigSynchro>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800a486:	f000 f9a7 	bl	800a7d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a48a:	2320      	movs	r3, #32
 800a48c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a48e:	2300      	movs	r3, #0
 800a490:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a492:	463b      	mov	r3, r7
 800a494:	4619      	mov	r1, r3
 800a496:	4806      	ldr	r0, [pc, #24]	; (800a4b0 <MX_TIM2_Init+0xc8>)
 800a498:	f7fe f936 	bl	8008708 <HAL_TIMEx_MasterConfigSynchronization>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d001      	beq.n	800a4a6 <MX_TIM2_Init+0xbe>
  {
    Error_Handler();
 800a4a2:	f000 f999 	bl	800a7d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a4a6:	bf00      	nop
 800a4a8:	3730      	adds	r7, #48	; 0x30
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	20000e24 	.word	0x20000e24

0800a4b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800a4b8:	4b14      	ldr	r3, [pc, #80]	; (800a50c <MX_USART2_UART_Init+0x58>)
 800a4ba:	4a15      	ldr	r2, [pc, #84]	; (800a510 <MX_USART2_UART_Init+0x5c>)
 800a4bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800a4be:	4b13      	ldr	r3, [pc, #76]	; (800a50c <MX_USART2_UART_Init+0x58>)
 800a4c0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800a4c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800a4c6:	4b11      	ldr	r3, [pc, #68]	; (800a50c <MX_USART2_UART_Init+0x58>)
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800a4cc:	4b0f      	ldr	r3, [pc, #60]	; (800a50c <MX_USART2_UART_Init+0x58>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800a4d2:	4b0e      	ldr	r3, [pc, #56]	; (800a50c <MX_USART2_UART_Init+0x58>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800a4d8:	4b0c      	ldr	r3, [pc, #48]	; (800a50c <MX_USART2_UART_Init+0x58>)
 800a4da:	220c      	movs	r2, #12
 800a4dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a4de:	4b0b      	ldr	r3, [pc, #44]	; (800a50c <MX_USART2_UART_Init+0x58>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800a4e4:	4b09      	ldr	r3, [pc, #36]	; (800a50c <MX_USART2_UART_Init+0x58>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a4ea:	4b08      	ldr	r3, [pc, #32]	; (800a50c <MX_USART2_UART_Init+0x58>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a4f0:	4b06      	ldr	r3, [pc, #24]	; (800a50c <MX_USART2_UART_Init+0x58>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800a4f6:	4805      	ldr	r0, [pc, #20]	; (800a50c <MX_USART2_UART_Init+0x58>)
 800a4f8:	f7fe f992 	bl	8008820 <HAL_UART_Init>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800a502:	f000 f969 	bl	800a7d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800a506:	bf00      	nop
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	20000e64 	.word	0x20000e64
 800a510:	40004400 	.word	0x40004400

0800a514 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a518:	4b14      	ldr	r3, [pc, #80]	; (800a56c <MX_USART3_UART_Init+0x58>)
 800a51a:	4a15      	ldr	r2, [pc, #84]	; (800a570 <MX_USART3_UART_Init+0x5c>)
 800a51c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800a51e:	4b13      	ldr	r3, [pc, #76]	; (800a56c <MX_USART3_UART_Init+0x58>)
 800a520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a524:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a526:	4b11      	ldr	r3, [pc, #68]	; (800a56c <MX_USART3_UART_Init+0x58>)
 800a528:	2200      	movs	r2, #0
 800a52a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a52c:	4b0f      	ldr	r3, [pc, #60]	; (800a56c <MX_USART3_UART_Init+0x58>)
 800a52e:	2200      	movs	r2, #0
 800a530:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a532:	4b0e      	ldr	r3, [pc, #56]	; (800a56c <MX_USART3_UART_Init+0x58>)
 800a534:	2200      	movs	r2, #0
 800a536:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a538:	4b0c      	ldr	r3, [pc, #48]	; (800a56c <MX_USART3_UART_Init+0x58>)
 800a53a:	220c      	movs	r2, #12
 800a53c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a53e:	4b0b      	ldr	r3, [pc, #44]	; (800a56c <MX_USART3_UART_Init+0x58>)
 800a540:	2200      	movs	r2, #0
 800a542:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a544:	4b09      	ldr	r3, [pc, #36]	; (800a56c <MX_USART3_UART_Init+0x58>)
 800a546:	2200      	movs	r2, #0
 800a548:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a54a:	4b08      	ldr	r3, [pc, #32]	; (800a56c <MX_USART3_UART_Init+0x58>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a550:	4b06      	ldr	r3, [pc, #24]	; (800a56c <MX_USART3_UART_Init+0x58>)
 800a552:	2200      	movs	r2, #0
 800a554:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a556:	4805      	ldr	r0, [pc, #20]	; (800a56c <MX_USART3_UART_Init+0x58>)
 800a558:	f7fe f962 	bl	8008820 <HAL_UART_Init>
 800a55c:	4603      	mov	r3, r0
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800a562:	f000 f939 	bl	800a7d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a566:	bf00      	nop
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	20000ca4 	.word	0x20000ca4
 800a570:	40004800 	.word	0x40004800

0800a574 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a57a:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <MX_DMA_Init+0x38>)
 800a57c:	695b      	ldr	r3, [r3, #20]
 800a57e:	4a0b      	ldr	r2, [pc, #44]	; (800a5ac <MX_DMA_Init+0x38>)
 800a580:	f043 0301 	orr.w	r3, r3, #1
 800a584:	6153      	str	r3, [r2, #20]
 800a586:	4b09      	ldr	r3, [pc, #36]	; (800a5ac <MX_DMA_Init+0x38>)
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	f003 0301 	and.w	r3, r3, #1
 800a58e:	607b      	str	r3, [r7, #4]
 800a590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800a592:	2200      	movs	r2, #0
 800a594:	2100      	movs	r1, #0
 800a596:	200b      	movs	r0, #11
 800a598:	f7fa fd81 	bl	800509e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a59c:	200b      	movs	r0, #11
 800a59e:	f7fa fd9a 	bl	80050d6 <HAL_NVIC_EnableIRQ>

}
 800a5a2:	bf00      	nop
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
 800a5aa:	bf00      	nop
 800a5ac:	40021000 	.word	0x40021000

0800a5b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	b08a      	sub	sp, #40	; 0x28
 800a5b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5b6:	f107 0314 	add.w	r3, r7, #20
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	605a      	str	r2, [r3, #4]
 800a5c0:	609a      	str	r2, [r3, #8]
 800a5c2:	60da      	str	r2, [r3, #12]
 800a5c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5c6:	4b3b      	ldr	r3, [pc, #236]	; (800a6b4 <MX_GPIO_Init+0x104>)
 800a5c8:	695b      	ldr	r3, [r3, #20]
 800a5ca:	4a3a      	ldr	r2, [pc, #232]	; (800a6b4 <MX_GPIO_Init+0x104>)
 800a5cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a5d0:	6153      	str	r3, [r2, #20]
 800a5d2:	4b38      	ldr	r3, [pc, #224]	; (800a6b4 <MX_GPIO_Init+0x104>)
 800a5d4:	695b      	ldr	r3, [r3, #20]
 800a5d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a5da:	613b      	str	r3, [r7, #16]
 800a5dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800a5de:	4b35      	ldr	r3, [pc, #212]	; (800a6b4 <MX_GPIO_Init+0x104>)
 800a5e0:	695b      	ldr	r3, [r3, #20]
 800a5e2:	4a34      	ldr	r2, [pc, #208]	; (800a6b4 <MX_GPIO_Init+0x104>)
 800a5e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a5e8:	6153      	str	r3, [r2, #20]
 800a5ea:	4b32      	ldr	r3, [pc, #200]	; (800a6b4 <MX_GPIO_Init+0x104>)
 800a5ec:	695b      	ldr	r3, [r3, #20]
 800a5ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5f2:	60fb      	str	r3, [r7, #12]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5f6:	4b2f      	ldr	r3, [pc, #188]	; (800a6b4 <MX_GPIO_Init+0x104>)
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	4a2e      	ldr	r2, [pc, #184]	; (800a6b4 <MX_GPIO_Init+0x104>)
 800a5fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a600:	6153      	str	r3, [r2, #20]
 800a602:	4b2c      	ldr	r3, [pc, #176]	; (800a6b4 <MX_GPIO_Init+0x104>)
 800a604:	695b      	ldr	r3, [r3, #20]
 800a606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a60a:	60bb      	str	r3, [r7, #8]
 800a60c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a60e:	4b29      	ldr	r3, [pc, #164]	; (800a6b4 <MX_GPIO_Init+0x104>)
 800a610:	695b      	ldr	r3, [r3, #20]
 800a612:	4a28      	ldr	r2, [pc, #160]	; (800a6b4 <MX_GPIO_Init+0x104>)
 800a614:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a618:	6153      	str	r3, [r2, #20]
 800a61a:	4b26      	ldr	r3, [pc, #152]	; (800a6b4 <MX_GPIO_Init+0x104>)
 800a61c:	695b      	ldr	r3, [r3, #20]
 800a61e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a622:	607b      	str	r3, [r7, #4]
 800a624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DS18B20_Pin|DHT11_Pin, GPIO_PIN_RESET);
 800a626:	2200      	movs	r2, #0
 800a628:	2128      	movs	r1, #40	; 0x28
 800a62a:	4823      	ldr	r0, [pc, #140]	; (800a6b8 <MX_GPIO_Init+0x108>)
 800a62c:	f7fb f900 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800a630:	2200      	movs	r2, #0
 800a632:	2120      	movs	r1, #32
 800a634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a638:	f7fb f8fa 	bl	8005830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800a63c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a642:	4b1e      	ldr	r3, [pc, #120]	; (800a6bc <MX_GPIO_Init+0x10c>)
 800a644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a646:	2300      	movs	r3, #0
 800a648:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800a64a:	f107 0314 	add.w	r3, r7, #20
 800a64e:	4619      	mov	r1, r3
 800a650:	4819      	ldr	r0, [pc, #100]	; (800a6b8 <MX_GPIO_Init+0x108>)
 800a652:	f7fa ff4b 	bl	80054ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DS18B20_Pin */
  GPIO_InitStruct.Pin = DS18B20_Pin;
 800a656:	2308      	movs	r3, #8
 800a658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a65a:	2301      	movs	r3, #1
 800a65c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a65e:	2301      	movs	r3, #1
 800a660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a662:	2300      	movs	r3, #0
 800a664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DS18B20_GPIO_Port, &GPIO_InitStruct);
 800a666:	f107 0314 	add.w	r3, r7, #20
 800a66a:	4619      	mov	r1, r3
 800a66c:	4812      	ldr	r0, [pc, #72]	; (800a6b8 <MX_GPIO_Init+0x108>)
 800a66e:	f7fa ff3d 	bl	80054ec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800a672:	2320      	movs	r3, #32
 800a674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a676:	2301      	movs	r3, #1
 800a678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a67a:	2300      	movs	r3, #0
 800a67c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a67e:	2300      	movs	r3, #0
 800a680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800a682:	f107 0314 	add.w	r3, r7, #20
 800a686:	4619      	mov	r1, r3
 800a688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a68c:	f7fa ff2e 	bl	80054ec <HAL_GPIO_Init>

  /*Configure GPIO pin : DHT11_Pin */
  GPIO_InitStruct.Pin = DHT11_Pin;
 800a690:	2320      	movs	r3, #32
 800a692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a694:	2301      	movs	r3, #1
 800a696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a698:	2300      	movs	r3, #0
 800a69a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a69c:	2300      	movs	r3, #0
 800a69e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DHT11_GPIO_Port, &GPIO_InitStruct);
 800a6a0:	f107 0314 	add.w	r3, r7, #20
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	4804      	ldr	r0, [pc, #16]	; (800a6b8 <MX_GPIO_Init+0x108>)
 800a6a8:	f7fa ff20 	bl	80054ec <HAL_GPIO_Init>

}
 800a6ac:	bf00      	nop
 800a6ae:	3728      	adds	r7, #40	; 0x28
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	40021000 	.word	0x40021000
 800a6b8:	48000800 	.word	0x48000800
 800a6bc:	10210000 	.word	0x10210000

0800a6c0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b082      	sub	sp, #8
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a04      	ldr	r2, [pc, #16]	; (800a6e0 <HAL_UART_RxCpltCallback+0x20>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d101      	bne.n	800a6d6 <HAL_UART_RxCpltCallback+0x16>
		ESP8266_ReceiveAnswer();
 800a6d2:	f7f8 fe93 	bl	80033fc <ESP8266_ReceiveAnswer>
}
 800a6d6:	bf00      	nop
 800a6d8:	3708      	adds	r7, #8
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}
 800a6de:	bf00      	nop
 800a6e0:	40004800 	.word	0x40004800

0800a6e4 <HAL_ADC_ConvCpltCallback>:


void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == ADC1)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a6f4:	d102      	bne.n	800a6fc <HAL_ADC_ConvCpltCallback+0x18>
		is_conversion_completed = true;
 800a6f6:	4b04      	ldr	r3, [pc, #16]	; (800a708 <HAL_ADC_ConvCpltCallback+0x24>)
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	701a      	strb	r2, [r3, #0]
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr
 800a708:	20000911 	.word	0x20000911

0800a70c <HAL_ADC_ErrorCallback>:


void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)"ADC DMA Error\r\n", strlen("ADC DMA Error\r\n"), HAL_MAX_DELAY);
 800a714:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a718:	220f      	movs	r2, #15
 800a71a:	4904      	ldr	r1, [pc, #16]	; (800a72c <HAL_ADC_ErrorCallback+0x20>)
 800a71c:	4804      	ldr	r0, [pc, #16]	; (800a730 <HAL_ADC_ErrorCallback+0x24>)
 800a71e:	f7fe f8cd 	bl	80088bc <HAL_UART_Transmit>
	asm("BKPT #0");
 800a722:	be00      	bkpt	0x0000
}
 800a724:	bf00      	nop
 800a726:	3708      	adds	r7, #8
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}
 800a72c:	0800d730 	.word	0x0800d730
 800a730:	20000e64 	.word	0x20000e64

0800a734 <HAL_RTC_AlarmAEventCallback>:


void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b082      	sub	sp, #8
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
	is_alarmA_fired = true;
 800a73c:	4b0f      	ldr	r3, [pc, #60]	; (800a77c <HAL_RTC_AlarmAEventCallback+0x48>)
 800a73e:	2201      	movs	r2, #1
 800a740:	701a      	strb	r2, [r3, #0]
	sAlarmA.AlarmTime.Seconds = alarmA_seconds[alarmA_idx++%3];
 800a742:	4b0f      	ldr	r3, [pc, #60]	; (800a780 <HAL_RTC_AlarmAEventCallback+0x4c>)
 800a744:	781a      	ldrb	r2, [r3, #0]
 800a746:	1c53      	adds	r3, r2, #1
 800a748:	b2d9      	uxtb	r1, r3
 800a74a:	4b0d      	ldr	r3, [pc, #52]	; (800a780 <HAL_RTC_AlarmAEventCallback+0x4c>)
 800a74c:	7019      	strb	r1, [r3, #0]
 800a74e:	4b0d      	ldr	r3, [pc, #52]	; (800a784 <HAL_RTC_AlarmAEventCallback+0x50>)
 800a750:	fba3 1302 	umull	r1, r3, r3, r2
 800a754:	0859      	lsrs	r1, r3, #1
 800a756:	460b      	mov	r3, r1
 800a758:	005b      	lsls	r3, r3, #1
 800a75a:	440b      	add	r3, r1
 800a75c:	1ad3      	subs	r3, r2, r3
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	461a      	mov	r2, r3
 800a762:	4b09      	ldr	r3, [pc, #36]	; (800a788 <HAL_RTC_AlarmAEventCallback+0x54>)
 800a764:	5c9a      	ldrb	r2, [r3, r2]
 800a766:	4b09      	ldr	r3, [pc, #36]	; (800a78c <HAL_RTC_AlarmAEventCallback+0x58>)
 800a768:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetAlarm_IT(hrtc, &sAlarmA, RTC_FORMAT_BCD);
 800a76a:	2201      	movs	r2, #1
 800a76c:	4907      	ldr	r1, [pc, #28]	; (800a78c <HAL_RTC_AlarmAEventCallback+0x58>)
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f7fd fac8 	bl	8007d04 <HAL_RTC_SetAlarm_IT>
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	2000093d 	.word	0x2000093d
 800a780:	2000093c 	.word	0x2000093c
 800a784:	aaaaaaab 	.word	0xaaaaaaab
 800a788:	20000008 	.word	0x20000008
 800a78c:	20000914 	.word	0x20000914

0800a790 <HAL_RTCEx_AlarmBEventCallback>:


void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
	is_alarmB_fired = true;
 800a798:	4b0b      	ldr	r3, [pc, #44]	; (800a7c8 <HAL_RTCEx_AlarmBEventCallback+0x38>)
 800a79a:	2201      	movs	r2, #1
 800a79c:	701a      	strb	r2, [r3, #0]
	sAlarmB.AlarmTime.Minutes = alarmB_minutes[alarmB_idx++%4];
 800a79e:	4b0b      	ldr	r3, [pc, #44]	; (800a7cc <HAL_RTCEx_AlarmBEventCallback+0x3c>)
 800a7a0:	781b      	ldrb	r3, [r3, #0]
 800a7a2:	1c5a      	adds	r2, r3, #1
 800a7a4:	b2d1      	uxtb	r1, r2
 800a7a6:	4a09      	ldr	r2, [pc, #36]	; (800a7cc <HAL_RTCEx_AlarmBEventCallback+0x3c>)
 800a7a8:	7011      	strb	r1, [r2, #0]
 800a7aa:	f003 0303 	and.w	r3, r3, #3
 800a7ae:	4a08      	ldr	r2, [pc, #32]	; (800a7d0 <HAL_RTCEx_AlarmBEventCallback+0x40>)
 800a7b0:	5cd2      	ldrb	r2, [r2, r3]
 800a7b2:	4b08      	ldr	r3, [pc, #32]	; (800a7d4 <HAL_RTCEx_AlarmBEventCallback+0x44>)
 800a7b4:	705a      	strb	r2, [r3, #1]
	HAL_RTC_SetAlarm_IT(hrtc, &sAlarmB, RTC_FORMAT_BCD);
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	4906      	ldr	r1, [pc, #24]	; (800a7d4 <HAL_RTCEx_AlarmBEventCallback+0x44>)
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f7fd faa2 	bl	8007d04 <HAL_RTC_SetAlarm_IT>
}
 800a7c0:	bf00      	nop
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}
 800a7c8:	20000969 	.word	0x20000969
 800a7cc:	20000968 	.word	0x20000968
 800a7d0:	2000000c 	.word	0x2000000c
 800a7d4:	20000940 	.word	0x20000940

0800a7d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a7dc:	bf00      	nop
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
	...

0800a7e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a7ee:	4b0f      	ldr	r3, [pc, #60]	; (800a82c <HAL_MspInit+0x44>)
 800a7f0:	699b      	ldr	r3, [r3, #24]
 800a7f2:	4a0e      	ldr	r2, [pc, #56]	; (800a82c <HAL_MspInit+0x44>)
 800a7f4:	f043 0301 	orr.w	r3, r3, #1
 800a7f8:	6193      	str	r3, [r2, #24]
 800a7fa:	4b0c      	ldr	r3, [pc, #48]	; (800a82c <HAL_MspInit+0x44>)
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	f003 0301 	and.w	r3, r3, #1
 800a802:	607b      	str	r3, [r7, #4]
 800a804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a806:	4b09      	ldr	r3, [pc, #36]	; (800a82c <HAL_MspInit+0x44>)
 800a808:	69db      	ldr	r3, [r3, #28]
 800a80a:	4a08      	ldr	r2, [pc, #32]	; (800a82c <HAL_MspInit+0x44>)
 800a80c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a810:	61d3      	str	r3, [r2, #28]
 800a812:	4b06      	ldr	r3, [pc, #24]	; (800a82c <HAL_MspInit+0x44>)
 800a814:	69db      	ldr	r3, [r3, #28]
 800a816:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a81a:	603b      	str	r3, [r7, #0]
 800a81c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a81e:	bf00      	nop
 800a820:	370c      	adds	r7, #12
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	40021000 	.word	0x40021000

0800a830 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b08a      	sub	sp, #40	; 0x28
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a838:	f107 0314 	add.w	r3, r7, #20
 800a83c:	2200      	movs	r2, #0
 800a83e:	601a      	str	r2, [r3, #0]
 800a840:	605a      	str	r2, [r3, #4]
 800a842:	609a      	str	r2, [r3, #8]
 800a844:	60da      	str	r2, [r3, #12]
 800a846:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a850:	d14c      	bne.n	800a8ec <HAL_ADC_MspInit+0xbc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800a852:	4b28      	ldr	r3, [pc, #160]	; (800a8f4 <HAL_ADC_MspInit+0xc4>)
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	4a27      	ldr	r2, [pc, #156]	; (800a8f4 <HAL_ADC_MspInit+0xc4>)
 800a858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a85c:	6153      	str	r3, [r2, #20]
 800a85e:	4b25      	ldr	r3, [pc, #148]	; (800a8f4 <HAL_ADC_MspInit+0xc4>)
 800a860:	695b      	ldr	r3, [r3, #20]
 800a862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a866:	613b      	str	r3, [r7, #16]
 800a868:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a86a:	4b22      	ldr	r3, [pc, #136]	; (800a8f4 <HAL_ADC_MspInit+0xc4>)
 800a86c:	695b      	ldr	r3, [r3, #20]
 800a86e:	4a21      	ldr	r2, [pc, #132]	; (800a8f4 <HAL_ADC_MspInit+0xc4>)
 800a870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a874:	6153      	str	r3, [r2, #20]
 800a876:	4b1f      	ldr	r3, [pc, #124]	; (800a8f4 <HAL_ADC_MspInit+0xc4>)
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a87e:	60fb      	str	r3, [r7, #12]
 800a880:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2 
    */
    GPIO_InitStruct.Pin = TEMT600_Pin|FC37_Pin;
 800a882:	2303      	movs	r3, #3
 800a884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a886:	2303      	movs	r3, #3
 800a888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a88a:	2300      	movs	r3, #0
 800a88c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a88e:	f107 0314 	add.w	r3, r7, #20
 800a892:	4619      	mov	r1, r3
 800a894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a898:	f7fa fe28 	bl	80054ec <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800a89c:	4b16      	ldr	r3, [pc, #88]	; (800a8f8 <HAL_ADC_MspInit+0xc8>)
 800a89e:	4a17      	ldr	r2, [pc, #92]	; (800a8fc <HAL_ADC_MspInit+0xcc>)
 800a8a0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a8a2:	4b15      	ldr	r3, [pc, #84]	; (800a8f8 <HAL_ADC_MspInit+0xc8>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a8a8:	4b13      	ldr	r3, [pc, #76]	; (800a8f8 <HAL_ADC_MspInit+0xc8>)
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800a8ae:	4b12      	ldr	r3, [pc, #72]	; (800a8f8 <HAL_ADC_MspInit+0xc8>)
 800a8b0:	2280      	movs	r2, #128	; 0x80
 800a8b2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800a8b4:	4b10      	ldr	r3, [pc, #64]	; (800a8f8 <HAL_ADC_MspInit+0xc8>)
 800a8b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a8ba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800a8bc:	4b0e      	ldr	r3, [pc, #56]	; (800a8f8 <HAL_ADC_MspInit+0xc8>)
 800a8be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a8c2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800a8c4:	4b0c      	ldr	r3, [pc, #48]	; (800a8f8 <HAL_ADC_MspInit+0xc8>)
 800a8c6:	2220      	movs	r2, #32
 800a8c8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800a8ca:	4b0b      	ldr	r3, [pc, #44]	; (800a8f8 <HAL_ADC_MspInit+0xc8>)
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800a8d0:	4809      	ldr	r0, [pc, #36]	; (800a8f8 <HAL_ADC_MspInit+0xc8>)
 800a8d2:	f7fa fc1a 	bl	800510a <HAL_DMA_Init>
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d001      	beq.n	800a8e0 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 800a8dc:	f7ff ff7c 	bl	800a7d8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	4a05      	ldr	r2, [pc, #20]	; (800a8f8 <HAL_ADC_MspInit+0xc8>)
 800a8e4:	639a      	str	r2, [r3, #56]	; 0x38
 800a8e6:	4a04      	ldr	r2, [pc, #16]	; (800a8f8 <HAL_ADC_MspInit+0xc8>)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800a8ec:	bf00      	nop
 800a8ee:	3728      	adds	r7, #40	; 0x28
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}
 800a8f4:	40021000 	.word	0x40021000
 800a8f8:	20000dc0 	.word	0x20000dc0
 800a8fc:	40020008 	.word	0x40020008

0800a900 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b08a      	sub	sp, #40	; 0x28
 800a904:	af00      	add	r7, sp, #0
 800a906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a908:	f107 0314 	add.w	r3, r7, #20
 800a90c:	2200      	movs	r2, #0
 800a90e:	601a      	str	r2, [r3, #0]
 800a910:	605a      	str	r2, [r3, #4]
 800a912:	609a      	str	r2, [r3, #8]
 800a914:	60da      	str	r2, [r3, #12]
 800a916:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	4a26      	ldr	r2, [pc, #152]	; (800a9b8 <HAL_I2C_MspInit+0xb8>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d145      	bne.n	800a9ae <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a922:	4b26      	ldr	r3, [pc, #152]	; (800a9bc <HAL_I2C_MspInit+0xbc>)
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	4a25      	ldr	r2, [pc, #148]	; (800a9bc <HAL_I2C_MspInit+0xbc>)
 800a928:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a92c:	6153      	str	r3, [r2, #20]
 800a92e:	4b23      	ldr	r3, [pc, #140]	; (800a9bc <HAL_I2C_MspInit+0xbc>)
 800a930:	695b      	ldr	r3, [r3, #20]
 800a932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a936:	613b      	str	r3, [r7, #16]
 800a938:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a93a:	4b20      	ldr	r3, [pc, #128]	; (800a9bc <HAL_I2C_MspInit+0xbc>)
 800a93c:	695b      	ldr	r3, [r3, #20]
 800a93e:	4a1f      	ldr	r2, [pc, #124]	; (800a9bc <HAL_I2C_MspInit+0xbc>)
 800a940:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a944:	6153      	str	r3, [r2, #20]
 800a946:	4b1d      	ldr	r3, [pc, #116]	; (800a9bc <HAL_I2C_MspInit+0xbc>)
 800a948:	695b      	ldr	r3, [r3, #20]
 800a94a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a94e:	60fb      	str	r3, [r7, #12]
 800a950:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = BME280_SCL_Pin;
 800a952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a958:	2312      	movs	r3, #18
 800a95a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a95c:	2301      	movs	r3, #1
 800a95e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a960:	2303      	movs	r3, #3
 800a962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a964:	2304      	movs	r3, #4
 800a966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BME280_SCL_GPIO_Port, &GPIO_InitStruct);
 800a968:	f107 0314 	add.w	r3, r7, #20
 800a96c:	4619      	mov	r1, r3
 800a96e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a972:	f7fa fdbb 	bl	80054ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BME280_SDA_Pin;
 800a976:	2380      	movs	r3, #128	; 0x80
 800a978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a97a:	2312      	movs	r3, #18
 800a97c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a97e:	2301      	movs	r3, #1
 800a980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a982:	2303      	movs	r3, #3
 800a984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800a986:	2304      	movs	r3, #4
 800a988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BME280_SDA_GPIO_Port, &GPIO_InitStruct);
 800a98a:	f107 0314 	add.w	r3, r7, #20
 800a98e:	4619      	mov	r1, r3
 800a990:	480b      	ldr	r0, [pc, #44]	; (800a9c0 <HAL_I2C_MspInit+0xc0>)
 800a992:	f7fa fdab 	bl	80054ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800a996:	4b09      	ldr	r3, [pc, #36]	; (800a9bc <HAL_I2C_MspInit+0xbc>)
 800a998:	69db      	ldr	r3, [r3, #28]
 800a99a:	4a08      	ldr	r2, [pc, #32]	; (800a9bc <HAL_I2C_MspInit+0xbc>)
 800a99c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a9a0:	61d3      	str	r3, [r2, #28]
 800a9a2:	4b06      	ldr	r3, [pc, #24]	; (800a9bc <HAL_I2C_MspInit+0xbc>)
 800a9a4:	69db      	ldr	r3, [r3, #28]
 800a9a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9aa:	60bb      	str	r3, [r7, #8]
 800a9ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800a9ae:	bf00      	nop
 800a9b0:	3728      	adds	r7, #40	; 0x28
 800a9b2:	46bd      	mov	sp, r7
 800a9b4:	bd80      	pop	{r7, pc}
 800a9b6:	bf00      	nop
 800a9b8:	40005400 	.word	0x40005400
 800a9bc:	40021000 	.word	0x40021000
 800a9c0:	48000400 	.word	0x48000400

0800a9c4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800a9c4:	b580      	push	{r7, lr}
 800a9c6:	b084      	sub	sp, #16
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	4a10      	ldr	r2, [pc, #64]	; (800aa14 <HAL_RTC_MspInit+0x50>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d119      	bne.n	800aa0a <HAL_RTC_MspInit+0x46>
 800a9d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a9da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	fa93 f3a3 	rbit	r3, r3
 800a9e2:	60bb      	str	r3, [r7, #8]
  return result;
 800a9e4:	68bb      	ldr	r3, [r7, #8]
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800a9e6:	fab3 f383 	clz	r3, r3
 800a9ea:	b2db      	uxtb	r3, r3
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	4b0a      	ldr	r3, [pc, #40]	; (800aa18 <HAL_RTC_MspInit+0x54>)
 800a9f0:	4413      	add	r3, r2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	461a      	mov	r2, r3
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	6013      	str	r3, [r2, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2100      	movs	r1, #0
 800a9fe:	2029      	movs	r0, #41	; 0x29
 800aa00:	f7fa fb4d 	bl	800509e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 800aa04:	2029      	movs	r0, #41	; 0x29
 800aa06:	f7fa fb66 	bl	80050d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800aa0a:	bf00      	nop
 800aa0c:	3710      	adds	r7, #16
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	40002800 	.word	0x40002800
 800aa18:	10908100 	.word	0x10908100

0800aa1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b085      	sub	sp, #20
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa2c:	d10b      	bne.n	800aa46 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800aa2e:	4b09      	ldr	r3, [pc, #36]	; (800aa54 <HAL_TIM_Base_MspInit+0x38>)
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	4a08      	ldr	r2, [pc, #32]	; (800aa54 <HAL_TIM_Base_MspInit+0x38>)
 800aa34:	f043 0301 	orr.w	r3, r3, #1
 800aa38:	61d3      	str	r3, [r2, #28]
 800aa3a:	4b06      	ldr	r3, [pc, #24]	; (800aa54 <HAL_TIM_Base_MspInit+0x38>)
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	f003 0301 	and.w	r3, r3, #1
 800aa42:	60fb      	str	r3, [r7, #12]
 800aa44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800aa46:	bf00      	nop
 800aa48:	3714      	adds	r7, #20
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr
 800aa52:	bf00      	nop
 800aa54:	40021000 	.word	0x40021000

0800aa58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b08c      	sub	sp, #48	; 0x30
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa60:	f107 031c 	add.w	r3, r7, #28
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	605a      	str	r2, [r3, #4]
 800aa6a:	609a      	str	r2, [r3, #8]
 800aa6c:	60da      	str	r2, [r3, #12]
 800aa6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a33      	ldr	r2, [pc, #204]	; (800ab44 <HAL_UART_MspInit+0xec>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d129      	bne.n	800aace <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800aa7a:	4b33      	ldr	r3, [pc, #204]	; (800ab48 <HAL_UART_MspInit+0xf0>)
 800aa7c:	69db      	ldr	r3, [r3, #28]
 800aa7e:	4a32      	ldr	r2, [pc, #200]	; (800ab48 <HAL_UART_MspInit+0xf0>)
 800aa80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa84:	61d3      	str	r3, [r2, #28]
 800aa86:	4b30      	ldr	r3, [pc, #192]	; (800ab48 <HAL_UART_MspInit+0xf0>)
 800aa88:	69db      	ldr	r3, [r3, #28]
 800aa8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aa8e:	61bb      	str	r3, [r7, #24]
 800aa90:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa92:	4b2d      	ldr	r3, [pc, #180]	; (800ab48 <HAL_UART_MspInit+0xf0>)
 800aa94:	695b      	ldr	r3, [r3, #20]
 800aa96:	4a2c      	ldr	r2, [pc, #176]	; (800ab48 <HAL_UART_MspInit+0xf0>)
 800aa98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa9c:	6153      	str	r3, [r2, #20]
 800aa9e:	4b2a      	ldr	r3, [pc, #168]	; (800ab48 <HAL_UART_MspInit+0xf0>)
 800aaa0:	695b      	ldr	r3, [r3, #20]
 800aaa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aaa6:	617b      	str	r3, [r7, #20]
 800aaa8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800aaaa:	230c      	movs	r3, #12
 800aaac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aaae:	2302      	movs	r3, #2
 800aab0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aab2:	2300      	movs	r3, #0
 800aab4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aab6:	2300      	movs	r3, #0
 800aab8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800aaba:	2307      	movs	r3, #7
 800aabc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aabe:	f107 031c 	add.w	r3, r7, #28
 800aac2:	4619      	mov	r1, r3
 800aac4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800aac8:	f7fa fd10 	bl	80054ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800aacc:	e035      	b.n	800ab3a <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART3)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a1e      	ldr	r2, [pc, #120]	; (800ab4c <HAL_UART_MspInit+0xf4>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d130      	bne.n	800ab3a <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART3_CLK_ENABLE();
 800aad8:	4b1b      	ldr	r3, [pc, #108]	; (800ab48 <HAL_UART_MspInit+0xf0>)
 800aada:	69db      	ldr	r3, [r3, #28]
 800aadc:	4a1a      	ldr	r2, [pc, #104]	; (800ab48 <HAL_UART_MspInit+0xf0>)
 800aade:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aae2:	61d3      	str	r3, [r2, #28]
 800aae4:	4b18      	ldr	r3, [pc, #96]	; (800ab48 <HAL_UART_MspInit+0xf0>)
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aaec:	613b      	str	r3, [r7, #16]
 800aaee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aaf0:	4b15      	ldr	r3, [pc, #84]	; (800ab48 <HAL_UART_MspInit+0xf0>)
 800aaf2:	695b      	ldr	r3, [r3, #20]
 800aaf4:	4a14      	ldr	r2, [pc, #80]	; (800ab48 <HAL_UART_MspInit+0xf0>)
 800aaf6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aafa:	6153      	str	r3, [r2, #20]
 800aafc:	4b12      	ldr	r3, [pc, #72]	; (800ab48 <HAL_UART_MspInit+0xf0>)
 800aafe:	695b      	ldr	r3, [r3, #20]
 800ab00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ab04:	60fb      	str	r3, [r7, #12]
 800ab06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800ab08:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800ab0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab0e:	2302      	movs	r3, #2
 800ab10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab12:	2300      	movs	r3, #0
 800ab14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800ab16:	2303      	movs	r3, #3
 800ab18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800ab1a:	2307      	movs	r3, #7
 800ab1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab1e:	f107 031c 	add.w	r3, r7, #28
 800ab22:	4619      	mov	r1, r3
 800ab24:	480a      	ldr	r0, [pc, #40]	; (800ab50 <HAL_UART_MspInit+0xf8>)
 800ab26:	f7fa fce1 	bl	80054ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	2027      	movs	r0, #39	; 0x27
 800ab30:	f7fa fab5 	bl	800509e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800ab34:	2027      	movs	r0, #39	; 0x27
 800ab36:	f7fa face 	bl	80050d6 <HAL_NVIC_EnableIRQ>
}
 800ab3a:	bf00      	nop
 800ab3c:	3730      	adds	r7, #48	; 0x30
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}
 800ab42:	bf00      	nop
 800ab44:	40004400 	.word	0x40004400
 800ab48:	40021000 	.word	0x40021000
 800ab4c:	40004800 	.word	0x40004800
 800ab50:	48000400 	.word	0x48000400

0800ab54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ab54:	b480      	push	{r7}
 800ab56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ab58:	bf00      	nop
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ab62:	b480      	push	{r7}
 800ab64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ab66:	e7fe      	b.n	800ab66 <HardFault_Handler+0x4>

0800ab68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ab6c:	e7fe      	b.n	800ab6c <MemManage_Handler+0x4>

0800ab6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ab6e:	b480      	push	{r7}
 800ab70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ab72:	e7fe      	b.n	800ab72 <BusFault_Handler+0x4>

0800ab74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ab74:	b480      	push	{r7}
 800ab76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ab78:	e7fe      	b.n	800ab78 <UsageFault_Handler+0x4>

0800ab7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ab7a:	b480      	push	{r7}
 800ab7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ab7e:	bf00      	nop
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ab8c:	bf00      	nop
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab94:	4770      	bx	lr

0800ab96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ab96:	b480      	push	{r7}
 800ab98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ab9a:	bf00      	nop
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800aba8:	f7f9 f93a 	bl	8003e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800abac:	bf00      	nop
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800abb4:	4802      	ldr	r0, [pc, #8]	; (800abc0 <DMA1_Channel1_IRQHandler+0x10>)
 800abb6:	f7fa fb8c 	bl	80052d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800abba:	bf00      	nop
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20000dc0 	.word	0x20000dc0

0800abc4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800abc8:	4802      	ldr	r0, [pc, #8]	; (800abd4 <USART3_IRQHandler+0x10>)
 800abca:	f7fd ffad 	bl	8008b28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800abce:	bf00      	nop
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	20000ca4 	.word	0x20000ca4

0800abd8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 800abdc:	4802      	ldr	r0, [pc, #8]	; (800abe8 <RTC_Alarm_IRQHandler+0x10>)
 800abde:	f7fd f9c9 	bl	8007f74 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800abe2:	bf00      	nop
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	20000e04 	.word	0x20000e04

0800abec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b084      	sub	sp, #16
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800abf4:	4b11      	ldr	r3, [pc, #68]	; (800ac3c <_sbrk+0x50>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d102      	bne.n	800ac02 <_sbrk+0x16>
		heap_end = &end;
 800abfc:	4b0f      	ldr	r3, [pc, #60]	; (800ac3c <_sbrk+0x50>)
 800abfe:	4a10      	ldr	r2, [pc, #64]	; (800ac40 <_sbrk+0x54>)
 800ac00:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800ac02:	4b0e      	ldr	r3, [pc, #56]	; (800ac3c <_sbrk+0x50>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800ac08:	4b0c      	ldr	r3, [pc, #48]	; (800ac3c <_sbrk+0x50>)
 800ac0a:	681a      	ldr	r2, [r3, #0]
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	4413      	add	r3, r2
 800ac10:	466a      	mov	r2, sp
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d907      	bls.n	800ac26 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800ac16:	f000 f889 	bl	800ad2c <__errno>
 800ac1a:	4602      	mov	r2, r0
 800ac1c:	230c      	movs	r3, #12
 800ac1e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800ac20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ac24:	e006      	b.n	800ac34 <_sbrk+0x48>
	}

	heap_end += incr;
 800ac26:	4b05      	ldr	r3, [pc, #20]	; (800ac3c <_sbrk+0x50>)
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	4a03      	ldr	r2, [pc, #12]	; (800ac3c <_sbrk+0x50>)
 800ac30:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800ac32:	68fb      	ldr	r3, [r7, #12]
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3710      	adds	r7, #16
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}
 800ac3c:	2000096c 	.word	0x2000096c
 800ac40:	20000ee8 	.word	0x20000ee8

0800ac44 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ac44:	b480      	push	{r7}
 800ac46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800ac48:	4b1f      	ldr	r3, [pc, #124]	; (800acc8 <SystemInit+0x84>)
 800ac4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac4e:	4a1e      	ldr	r2, [pc, #120]	; (800acc8 <SystemInit+0x84>)
 800ac50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ac54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800ac58:	4b1c      	ldr	r3, [pc, #112]	; (800accc <SystemInit+0x88>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a1b      	ldr	r2, [pc, #108]	; (800accc <SystemInit+0x88>)
 800ac5e:	f043 0301 	orr.w	r3, r3, #1
 800ac62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800ac64:	4b19      	ldr	r3, [pc, #100]	; (800accc <SystemInit+0x88>)
 800ac66:	685a      	ldr	r2, [r3, #4]
 800ac68:	4918      	ldr	r1, [pc, #96]	; (800accc <SystemInit+0x88>)
 800ac6a:	4b19      	ldr	r3, [pc, #100]	; (800acd0 <SystemInit+0x8c>)
 800ac6c:	4013      	ands	r3, r2
 800ac6e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800ac70:	4b16      	ldr	r3, [pc, #88]	; (800accc <SystemInit+0x88>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	4a15      	ldr	r2, [pc, #84]	; (800accc <SystemInit+0x88>)
 800ac76:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800ac7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac7e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ac80:	4b12      	ldr	r3, [pc, #72]	; (800accc <SystemInit+0x88>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a11      	ldr	r2, [pc, #68]	; (800accc <SystemInit+0x88>)
 800ac86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ac8a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800ac8c:	4b0f      	ldr	r3, [pc, #60]	; (800accc <SystemInit+0x88>)
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	4a0e      	ldr	r2, [pc, #56]	; (800accc <SystemInit+0x88>)
 800ac92:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800ac96:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800ac98:	4b0c      	ldr	r3, [pc, #48]	; (800accc <SystemInit+0x88>)
 800ac9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9c:	4a0b      	ldr	r2, [pc, #44]	; (800accc <SystemInit+0x88>)
 800ac9e:	f023 030f 	bic.w	r3, r3, #15
 800aca2:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800aca4:	4b09      	ldr	r3, [pc, #36]	; (800accc <SystemInit+0x88>)
 800aca6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aca8:	4908      	ldr	r1, [pc, #32]	; (800accc <SystemInit+0x88>)
 800acaa:	4b0a      	ldr	r3, [pc, #40]	; (800acd4 <SystemInit+0x90>)
 800acac:	4013      	ands	r3, r2
 800acae:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800acb0:	4b06      	ldr	r3, [pc, #24]	; (800accc <SystemInit+0x88>)
 800acb2:	2200      	movs	r2, #0
 800acb4:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800acb6:	4b04      	ldr	r3, [pc, #16]	; (800acc8 <SystemInit+0x84>)
 800acb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800acbc:	609a      	str	r2, [r3, #8]
#endif
}
 800acbe:	bf00      	nop
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	e000ed00 	.word	0xe000ed00
 800accc:	40021000 	.word	0x40021000
 800acd0:	f87fc00c 	.word	0xf87fc00c
 800acd4:	ff00fccc 	.word	0xff00fccc

0800acd8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800acd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ad10 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800acdc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800acde:	e003      	b.n	800ace8 <LoopCopyDataInit>

0800ace0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800ace0:	4b0c      	ldr	r3, [pc, #48]	; (800ad14 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800ace2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800ace4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800ace6:	3104      	adds	r1, #4

0800ace8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800ace8:	480b      	ldr	r0, [pc, #44]	; (800ad18 <LoopForever+0xa>)
	ldr	r3, =_edata
 800acea:	4b0c      	ldr	r3, [pc, #48]	; (800ad1c <LoopForever+0xe>)
	adds	r2, r0, r1
 800acec:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800acee:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800acf0:	d3f6      	bcc.n	800ace0 <CopyDataInit>
	ldr	r2, =_sbss
 800acf2:	4a0b      	ldr	r2, [pc, #44]	; (800ad20 <LoopForever+0x12>)
	b	LoopFillZerobss
 800acf4:	e002      	b.n	800acfc <LoopFillZerobss>

0800acf6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800acf6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800acf8:	f842 3b04 	str.w	r3, [r2], #4

0800acfc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800acfc:	4b09      	ldr	r3, [pc, #36]	; (800ad24 <LoopForever+0x16>)
	cmp	r2, r3
 800acfe:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800ad00:	d3f9      	bcc.n	800acf6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800ad02:	f7ff ff9f 	bl	800ac44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ad06:	f000 f817 	bl	800ad38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800ad0a:	f7ff f90f 	bl	8009f2c <main>

0800ad0e <LoopForever>:

LoopForever:
    b LoopForever
 800ad0e:	e7fe      	b.n	800ad0e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800ad10:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 800ad14:	0800d9e8 	.word	0x0800d9e8
	ldr	r0, =_sdata
 800ad18:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800ad1c:	200001e8 	.word	0x200001e8
	ldr	r2, =_sbss
 800ad20:	200001e8 	.word	0x200001e8
	ldr	r3, = _ebss
 800ad24:	20000ee8 	.word	0x20000ee8

0800ad28 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800ad28:	e7fe      	b.n	800ad28 <ADC1_2_IRQHandler>
	...

0800ad2c <__errno>:
 800ad2c:	4b01      	ldr	r3, [pc, #4]	; (800ad34 <__errno+0x8>)
 800ad2e:	6818      	ldr	r0, [r3, #0]
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	20000014 	.word	0x20000014

0800ad38 <__libc_init_array>:
 800ad38:	b570      	push	{r4, r5, r6, lr}
 800ad3a:	4e0d      	ldr	r6, [pc, #52]	; (800ad70 <__libc_init_array+0x38>)
 800ad3c:	4c0d      	ldr	r4, [pc, #52]	; (800ad74 <__libc_init_array+0x3c>)
 800ad3e:	1ba4      	subs	r4, r4, r6
 800ad40:	10a4      	asrs	r4, r4, #2
 800ad42:	2500      	movs	r5, #0
 800ad44:	42a5      	cmp	r5, r4
 800ad46:	d109      	bne.n	800ad5c <__libc_init_array+0x24>
 800ad48:	4e0b      	ldr	r6, [pc, #44]	; (800ad78 <__libc_init_array+0x40>)
 800ad4a:	4c0c      	ldr	r4, [pc, #48]	; (800ad7c <__libc_init_array+0x44>)
 800ad4c:	f002 fa1c 	bl	800d188 <_init>
 800ad50:	1ba4      	subs	r4, r4, r6
 800ad52:	10a4      	asrs	r4, r4, #2
 800ad54:	2500      	movs	r5, #0
 800ad56:	42a5      	cmp	r5, r4
 800ad58:	d105      	bne.n	800ad66 <__libc_init_array+0x2e>
 800ad5a:	bd70      	pop	{r4, r5, r6, pc}
 800ad5c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad60:	4798      	blx	r3
 800ad62:	3501      	adds	r5, #1
 800ad64:	e7ee      	b.n	800ad44 <__libc_init_array+0xc>
 800ad66:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ad6a:	4798      	blx	r3
 800ad6c:	3501      	adds	r5, #1
 800ad6e:	e7f2      	b.n	800ad56 <__libc_init_array+0x1e>
 800ad70:	0800d9e0 	.word	0x0800d9e0
 800ad74:	0800d9e0 	.word	0x0800d9e0
 800ad78:	0800d9e0 	.word	0x0800d9e0
 800ad7c:	0800d9e4 	.word	0x0800d9e4

0800ad80 <malloc>:
 800ad80:	4b02      	ldr	r3, [pc, #8]	; (800ad8c <malloc+0xc>)
 800ad82:	4601      	mov	r1, r0
 800ad84:	6818      	ldr	r0, [r3, #0]
 800ad86:	f000 b86d 	b.w	800ae64 <_malloc_r>
 800ad8a:	bf00      	nop
 800ad8c:	20000014 	.word	0x20000014

0800ad90 <free>:
 800ad90:	4b02      	ldr	r3, [pc, #8]	; (800ad9c <free+0xc>)
 800ad92:	4601      	mov	r1, r0
 800ad94:	6818      	ldr	r0, [r3, #0]
 800ad96:	f000 b817 	b.w	800adc8 <_free_r>
 800ad9a:	bf00      	nop
 800ad9c:	20000014 	.word	0x20000014

0800ada0 <memcpy>:
 800ada0:	b510      	push	{r4, lr}
 800ada2:	1e43      	subs	r3, r0, #1
 800ada4:	440a      	add	r2, r1
 800ada6:	4291      	cmp	r1, r2
 800ada8:	d100      	bne.n	800adac <memcpy+0xc>
 800adaa:	bd10      	pop	{r4, pc}
 800adac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800adb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800adb4:	e7f7      	b.n	800ada6 <memcpy+0x6>

0800adb6 <memset>:
 800adb6:	4402      	add	r2, r0
 800adb8:	4603      	mov	r3, r0
 800adba:	4293      	cmp	r3, r2
 800adbc:	d100      	bne.n	800adc0 <memset+0xa>
 800adbe:	4770      	bx	lr
 800adc0:	f803 1b01 	strb.w	r1, [r3], #1
 800adc4:	e7f9      	b.n	800adba <memset+0x4>
	...

0800adc8 <_free_r>:
 800adc8:	b538      	push	{r3, r4, r5, lr}
 800adca:	4605      	mov	r5, r0
 800adcc:	2900      	cmp	r1, #0
 800adce:	d045      	beq.n	800ae5c <_free_r+0x94>
 800add0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800add4:	1f0c      	subs	r4, r1, #4
 800add6:	2b00      	cmp	r3, #0
 800add8:	bfb8      	it	lt
 800adda:	18e4      	addlt	r4, r4, r3
 800addc:	f001 fbda 	bl	800c594 <__malloc_lock>
 800ade0:	4a1f      	ldr	r2, [pc, #124]	; (800ae60 <_free_r+0x98>)
 800ade2:	6813      	ldr	r3, [r2, #0]
 800ade4:	4610      	mov	r0, r2
 800ade6:	b933      	cbnz	r3, 800adf6 <_free_r+0x2e>
 800ade8:	6063      	str	r3, [r4, #4]
 800adea:	6014      	str	r4, [r2, #0]
 800adec:	4628      	mov	r0, r5
 800adee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adf2:	f001 bbd0 	b.w	800c596 <__malloc_unlock>
 800adf6:	42a3      	cmp	r3, r4
 800adf8:	d90c      	bls.n	800ae14 <_free_r+0x4c>
 800adfa:	6821      	ldr	r1, [r4, #0]
 800adfc:	1862      	adds	r2, r4, r1
 800adfe:	4293      	cmp	r3, r2
 800ae00:	bf04      	itt	eq
 800ae02:	681a      	ldreq	r2, [r3, #0]
 800ae04:	685b      	ldreq	r3, [r3, #4]
 800ae06:	6063      	str	r3, [r4, #4]
 800ae08:	bf04      	itt	eq
 800ae0a:	1852      	addeq	r2, r2, r1
 800ae0c:	6022      	streq	r2, [r4, #0]
 800ae0e:	6004      	str	r4, [r0, #0]
 800ae10:	e7ec      	b.n	800adec <_free_r+0x24>
 800ae12:	4613      	mov	r3, r2
 800ae14:	685a      	ldr	r2, [r3, #4]
 800ae16:	b10a      	cbz	r2, 800ae1c <_free_r+0x54>
 800ae18:	42a2      	cmp	r2, r4
 800ae1a:	d9fa      	bls.n	800ae12 <_free_r+0x4a>
 800ae1c:	6819      	ldr	r1, [r3, #0]
 800ae1e:	1858      	adds	r0, r3, r1
 800ae20:	42a0      	cmp	r0, r4
 800ae22:	d10b      	bne.n	800ae3c <_free_r+0x74>
 800ae24:	6820      	ldr	r0, [r4, #0]
 800ae26:	4401      	add	r1, r0
 800ae28:	1858      	adds	r0, r3, r1
 800ae2a:	4282      	cmp	r2, r0
 800ae2c:	6019      	str	r1, [r3, #0]
 800ae2e:	d1dd      	bne.n	800adec <_free_r+0x24>
 800ae30:	6810      	ldr	r0, [r2, #0]
 800ae32:	6852      	ldr	r2, [r2, #4]
 800ae34:	605a      	str	r2, [r3, #4]
 800ae36:	4401      	add	r1, r0
 800ae38:	6019      	str	r1, [r3, #0]
 800ae3a:	e7d7      	b.n	800adec <_free_r+0x24>
 800ae3c:	d902      	bls.n	800ae44 <_free_r+0x7c>
 800ae3e:	230c      	movs	r3, #12
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	e7d3      	b.n	800adec <_free_r+0x24>
 800ae44:	6820      	ldr	r0, [r4, #0]
 800ae46:	1821      	adds	r1, r4, r0
 800ae48:	428a      	cmp	r2, r1
 800ae4a:	bf04      	itt	eq
 800ae4c:	6811      	ldreq	r1, [r2, #0]
 800ae4e:	6852      	ldreq	r2, [r2, #4]
 800ae50:	6062      	str	r2, [r4, #4]
 800ae52:	bf04      	itt	eq
 800ae54:	1809      	addeq	r1, r1, r0
 800ae56:	6021      	streq	r1, [r4, #0]
 800ae58:	605c      	str	r4, [r3, #4]
 800ae5a:	e7c7      	b.n	800adec <_free_r+0x24>
 800ae5c:	bd38      	pop	{r3, r4, r5, pc}
 800ae5e:	bf00      	nop
 800ae60:	20000970 	.word	0x20000970

0800ae64 <_malloc_r>:
 800ae64:	b570      	push	{r4, r5, r6, lr}
 800ae66:	1ccd      	adds	r5, r1, #3
 800ae68:	f025 0503 	bic.w	r5, r5, #3
 800ae6c:	3508      	adds	r5, #8
 800ae6e:	2d0c      	cmp	r5, #12
 800ae70:	bf38      	it	cc
 800ae72:	250c      	movcc	r5, #12
 800ae74:	2d00      	cmp	r5, #0
 800ae76:	4606      	mov	r6, r0
 800ae78:	db01      	blt.n	800ae7e <_malloc_r+0x1a>
 800ae7a:	42a9      	cmp	r1, r5
 800ae7c:	d903      	bls.n	800ae86 <_malloc_r+0x22>
 800ae7e:	230c      	movs	r3, #12
 800ae80:	6033      	str	r3, [r6, #0]
 800ae82:	2000      	movs	r0, #0
 800ae84:	bd70      	pop	{r4, r5, r6, pc}
 800ae86:	f001 fb85 	bl	800c594 <__malloc_lock>
 800ae8a:	4a21      	ldr	r2, [pc, #132]	; (800af10 <_malloc_r+0xac>)
 800ae8c:	6814      	ldr	r4, [r2, #0]
 800ae8e:	4621      	mov	r1, r4
 800ae90:	b991      	cbnz	r1, 800aeb8 <_malloc_r+0x54>
 800ae92:	4c20      	ldr	r4, [pc, #128]	; (800af14 <_malloc_r+0xb0>)
 800ae94:	6823      	ldr	r3, [r4, #0]
 800ae96:	b91b      	cbnz	r3, 800aea0 <_malloc_r+0x3c>
 800ae98:	4630      	mov	r0, r6
 800ae9a:	f000 fc99 	bl	800b7d0 <_sbrk_r>
 800ae9e:	6020      	str	r0, [r4, #0]
 800aea0:	4629      	mov	r1, r5
 800aea2:	4630      	mov	r0, r6
 800aea4:	f000 fc94 	bl	800b7d0 <_sbrk_r>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	d124      	bne.n	800aef6 <_malloc_r+0x92>
 800aeac:	230c      	movs	r3, #12
 800aeae:	6033      	str	r3, [r6, #0]
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	f001 fb70 	bl	800c596 <__malloc_unlock>
 800aeb6:	e7e4      	b.n	800ae82 <_malloc_r+0x1e>
 800aeb8:	680b      	ldr	r3, [r1, #0]
 800aeba:	1b5b      	subs	r3, r3, r5
 800aebc:	d418      	bmi.n	800aef0 <_malloc_r+0x8c>
 800aebe:	2b0b      	cmp	r3, #11
 800aec0:	d90f      	bls.n	800aee2 <_malloc_r+0x7e>
 800aec2:	600b      	str	r3, [r1, #0]
 800aec4:	50cd      	str	r5, [r1, r3]
 800aec6:	18cc      	adds	r4, r1, r3
 800aec8:	4630      	mov	r0, r6
 800aeca:	f001 fb64 	bl	800c596 <__malloc_unlock>
 800aece:	f104 000b 	add.w	r0, r4, #11
 800aed2:	1d23      	adds	r3, r4, #4
 800aed4:	f020 0007 	bic.w	r0, r0, #7
 800aed8:	1ac3      	subs	r3, r0, r3
 800aeda:	d0d3      	beq.n	800ae84 <_malloc_r+0x20>
 800aedc:	425a      	negs	r2, r3
 800aede:	50e2      	str	r2, [r4, r3]
 800aee0:	e7d0      	b.n	800ae84 <_malloc_r+0x20>
 800aee2:	428c      	cmp	r4, r1
 800aee4:	684b      	ldr	r3, [r1, #4]
 800aee6:	bf16      	itet	ne
 800aee8:	6063      	strne	r3, [r4, #4]
 800aeea:	6013      	streq	r3, [r2, #0]
 800aeec:	460c      	movne	r4, r1
 800aeee:	e7eb      	b.n	800aec8 <_malloc_r+0x64>
 800aef0:	460c      	mov	r4, r1
 800aef2:	6849      	ldr	r1, [r1, #4]
 800aef4:	e7cc      	b.n	800ae90 <_malloc_r+0x2c>
 800aef6:	1cc4      	adds	r4, r0, #3
 800aef8:	f024 0403 	bic.w	r4, r4, #3
 800aefc:	42a0      	cmp	r0, r4
 800aefe:	d005      	beq.n	800af0c <_malloc_r+0xa8>
 800af00:	1a21      	subs	r1, r4, r0
 800af02:	4630      	mov	r0, r6
 800af04:	f000 fc64 	bl	800b7d0 <_sbrk_r>
 800af08:	3001      	adds	r0, #1
 800af0a:	d0cf      	beq.n	800aeac <_malloc_r+0x48>
 800af0c:	6025      	str	r5, [r4, #0]
 800af0e:	e7db      	b.n	800aec8 <_malloc_r+0x64>
 800af10:	20000970 	.word	0x20000970
 800af14:	20000974 	.word	0x20000974

0800af18 <__cvt>:
 800af18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af1c:	ec55 4b10 	vmov	r4, r5, d0
 800af20:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800af22:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800af26:	2d00      	cmp	r5, #0
 800af28:	460e      	mov	r6, r1
 800af2a:	4691      	mov	r9, r2
 800af2c:	4619      	mov	r1, r3
 800af2e:	bfb8      	it	lt
 800af30:	4622      	movlt	r2, r4
 800af32:	462b      	mov	r3, r5
 800af34:	f027 0720 	bic.w	r7, r7, #32
 800af38:	bfbb      	ittet	lt
 800af3a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800af3e:	461d      	movlt	r5, r3
 800af40:	2300      	movge	r3, #0
 800af42:	232d      	movlt	r3, #45	; 0x2d
 800af44:	bfb8      	it	lt
 800af46:	4614      	movlt	r4, r2
 800af48:	2f46      	cmp	r7, #70	; 0x46
 800af4a:	700b      	strb	r3, [r1, #0]
 800af4c:	d004      	beq.n	800af58 <__cvt+0x40>
 800af4e:	2f45      	cmp	r7, #69	; 0x45
 800af50:	d100      	bne.n	800af54 <__cvt+0x3c>
 800af52:	3601      	adds	r6, #1
 800af54:	2102      	movs	r1, #2
 800af56:	e000      	b.n	800af5a <__cvt+0x42>
 800af58:	2103      	movs	r1, #3
 800af5a:	ab03      	add	r3, sp, #12
 800af5c:	9301      	str	r3, [sp, #4]
 800af5e:	ab02      	add	r3, sp, #8
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	4632      	mov	r2, r6
 800af64:	4653      	mov	r3, sl
 800af66:	ec45 4b10 	vmov	d0, r4, r5
 800af6a:	f000 fd4d 	bl	800ba08 <_dtoa_r>
 800af6e:	2f47      	cmp	r7, #71	; 0x47
 800af70:	4680      	mov	r8, r0
 800af72:	d102      	bne.n	800af7a <__cvt+0x62>
 800af74:	f019 0f01 	tst.w	r9, #1
 800af78:	d026      	beq.n	800afc8 <__cvt+0xb0>
 800af7a:	2f46      	cmp	r7, #70	; 0x46
 800af7c:	eb08 0906 	add.w	r9, r8, r6
 800af80:	d111      	bne.n	800afa6 <__cvt+0x8e>
 800af82:	f898 3000 	ldrb.w	r3, [r8]
 800af86:	2b30      	cmp	r3, #48	; 0x30
 800af88:	d10a      	bne.n	800afa0 <__cvt+0x88>
 800af8a:	2200      	movs	r2, #0
 800af8c:	2300      	movs	r3, #0
 800af8e:	4620      	mov	r0, r4
 800af90:	4629      	mov	r1, r5
 800af92:	f7f5 fda1 	bl	8000ad8 <__aeabi_dcmpeq>
 800af96:	b918      	cbnz	r0, 800afa0 <__cvt+0x88>
 800af98:	f1c6 0601 	rsb	r6, r6, #1
 800af9c:	f8ca 6000 	str.w	r6, [sl]
 800afa0:	f8da 3000 	ldr.w	r3, [sl]
 800afa4:	4499      	add	r9, r3
 800afa6:	2200      	movs	r2, #0
 800afa8:	2300      	movs	r3, #0
 800afaa:	4620      	mov	r0, r4
 800afac:	4629      	mov	r1, r5
 800afae:	f7f5 fd93 	bl	8000ad8 <__aeabi_dcmpeq>
 800afb2:	b938      	cbnz	r0, 800afc4 <__cvt+0xac>
 800afb4:	2230      	movs	r2, #48	; 0x30
 800afb6:	9b03      	ldr	r3, [sp, #12]
 800afb8:	454b      	cmp	r3, r9
 800afba:	d205      	bcs.n	800afc8 <__cvt+0xb0>
 800afbc:	1c59      	adds	r1, r3, #1
 800afbe:	9103      	str	r1, [sp, #12]
 800afc0:	701a      	strb	r2, [r3, #0]
 800afc2:	e7f8      	b.n	800afb6 <__cvt+0x9e>
 800afc4:	f8cd 900c 	str.w	r9, [sp, #12]
 800afc8:	9b03      	ldr	r3, [sp, #12]
 800afca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800afcc:	eba3 0308 	sub.w	r3, r3, r8
 800afd0:	4640      	mov	r0, r8
 800afd2:	6013      	str	r3, [r2, #0]
 800afd4:	b004      	add	sp, #16
 800afd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800afda <__exponent>:
 800afda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afdc:	2900      	cmp	r1, #0
 800afde:	4604      	mov	r4, r0
 800afe0:	bfba      	itte	lt
 800afe2:	4249      	neglt	r1, r1
 800afe4:	232d      	movlt	r3, #45	; 0x2d
 800afe6:	232b      	movge	r3, #43	; 0x2b
 800afe8:	2909      	cmp	r1, #9
 800afea:	f804 2b02 	strb.w	r2, [r4], #2
 800afee:	7043      	strb	r3, [r0, #1]
 800aff0:	dd20      	ble.n	800b034 <__exponent+0x5a>
 800aff2:	f10d 0307 	add.w	r3, sp, #7
 800aff6:	461f      	mov	r7, r3
 800aff8:	260a      	movs	r6, #10
 800affa:	fb91 f5f6 	sdiv	r5, r1, r6
 800affe:	fb06 1115 	mls	r1, r6, r5, r1
 800b002:	3130      	adds	r1, #48	; 0x30
 800b004:	2d09      	cmp	r5, #9
 800b006:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b00a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800b00e:	4629      	mov	r1, r5
 800b010:	dc09      	bgt.n	800b026 <__exponent+0x4c>
 800b012:	3130      	adds	r1, #48	; 0x30
 800b014:	3b02      	subs	r3, #2
 800b016:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b01a:	42bb      	cmp	r3, r7
 800b01c:	4622      	mov	r2, r4
 800b01e:	d304      	bcc.n	800b02a <__exponent+0x50>
 800b020:	1a10      	subs	r0, r2, r0
 800b022:	b003      	add	sp, #12
 800b024:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b026:	4613      	mov	r3, r2
 800b028:	e7e7      	b.n	800affa <__exponent+0x20>
 800b02a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b02e:	f804 2b01 	strb.w	r2, [r4], #1
 800b032:	e7f2      	b.n	800b01a <__exponent+0x40>
 800b034:	2330      	movs	r3, #48	; 0x30
 800b036:	4419      	add	r1, r3
 800b038:	7083      	strb	r3, [r0, #2]
 800b03a:	1d02      	adds	r2, r0, #4
 800b03c:	70c1      	strb	r1, [r0, #3]
 800b03e:	e7ef      	b.n	800b020 <__exponent+0x46>

0800b040 <_printf_float>:
 800b040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b044:	b08d      	sub	sp, #52	; 0x34
 800b046:	460c      	mov	r4, r1
 800b048:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800b04c:	4616      	mov	r6, r2
 800b04e:	461f      	mov	r7, r3
 800b050:	4605      	mov	r5, r0
 800b052:	f001 fa91 	bl	800c578 <_localeconv_r>
 800b056:	6803      	ldr	r3, [r0, #0]
 800b058:	9304      	str	r3, [sp, #16]
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7f5 f8c0 	bl	80001e0 <strlen>
 800b060:	2300      	movs	r3, #0
 800b062:	930a      	str	r3, [sp, #40]	; 0x28
 800b064:	f8d8 3000 	ldr.w	r3, [r8]
 800b068:	9005      	str	r0, [sp, #20]
 800b06a:	3307      	adds	r3, #7
 800b06c:	f023 0307 	bic.w	r3, r3, #7
 800b070:	f103 0208 	add.w	r2, r3, #8
 800b074:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b078:	f8d4 b000 	ldr.w	fp, [r4]
 800b07c:	f8c8 2000 	str.w	r2, [r8]
 800b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b084:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b088:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b08c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b090:	9307      	str	r3, [sp, #28]
 800b092:	f8cd 8018 	str.w	r8, [sp, #24]
 800b096:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b09a:	4ba7      	ldr	r3, [pc, #668]	; (800b338 <_printf_float+0x2f8>)
 800b09c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0a0:	f7f5 fd4c 	bl	8000b3c <__aeabi_dcmpun>
 800b0a4:	bb70      	cbnz	r0, 800b104 <_printf_float+0xc4>
 800b0a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b0aa:	4ba3      	ldr	r3, [pc, #652]	; (800b338 <_printf_float+0x2f8>)
 800b0ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b0b0:	f7f5 fd26 	bl	8000b00 <__aeabi_dcmple>
 800b0b4:	bb30      	cbnz	r0, 800b104 <_printf_float+0xc4>
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	4640      	mov	r0, r8
 800b0bc:	4649      	mov	r1, r9
 800b0be:	f7f5 fd15 	bl	8000aec <__aeabi_dcmplt>
 800b0c2:	b110      	cbz	r0, 800b0ca <_printf_float+0x8a>
 800b0c4:	232d      	movs	r3, #45	; 0x2d
 800b0c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0ca:	4a9c      	ldr	r2, [pc, #624]	; (800b33c <_printf_float+0x2fc>)
 800b0cc:	4b9c      	ldr	r3, [pc, #624]	; (800b340 <_printf_float+0x300>)
 800b0ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b0d2:	bf8c      	ite	hi
 800b0d4:	4690      	movhi	r8, r2
 800b0d6:	4698      	movls	r8, r3
 800b0d8:	2303      	movs	r3, #3
 800b0da:	f02b 0204 	bic.w	r2, fp, #4
 800b0de:	6123      	str	r3, [r4, #16]
 800b0e0:	6022      	str	r2, [r4, #0]
 800b0e2:	f04f 0900 	mov.w	r9, #0
 800b0e6:	9700      	str	r7, [sp, #0]
 800b0e8:	4633      	mov	r3, r6
 800b0ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800b0ec:	4621      	mov	r1, r4
 800b0ee:	4628      	mov	r0, r5
 800b0f0:	f000 f9e6 	bl	800b4c0 <_printf_common>
 800b0f4:	3001      	adds	r0, #1
 800b0f6:	f040 808d 	bne.w	800b214 <_printf_float+0x1d4>
 800b0fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b0fe:	b00d      	add	sp, #52	; 0x34
 800b100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b104:	4642      	mov	r2, r8
 800b106:	464b      	mov	r3, r9
 800b108:	4640      	mov	r0, r8
 800b10a:	4649      	mov	r1, r9
 800b10c:	f7f5 fd16 	bl	8000b3c <__aeabi_dcmpun>
 800b110:	b110      	cbz	r0, 800b118 <_printf_float+0xd8>
 800b112:	4a8c      	ldr	r2, [pc, #560]	; (800b344 <_printf_float+0x304>)
 800b114:	4b8c      	ldr	r3, [pc, #560]	; (800b348 <_printf_float+0x308>)
 800b116:	e7da      	b.n	800b0ce <_printf_float+0x8e>
 800b118:	6861      	ldr	r1, [r4, #4]
 800b11a:	1c4b      	adds	r3, r1, #1
 800b11c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800b120:	a80a      	add	r0, sp, #40	; 0x28
 800b122:	d13e      	bne.n	800b1a2 <_printf_float+0x162>
 800b124:	2306      	movs	r3, #6
 800b126:	6063      	str	r3, [r4, #4]
 800b128:	2300      	movs	r3, #0
 800b12a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b12e:	ab09      	add	r3, sp, #36	; 0x24
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	ec49 8b10 	vmov	d0, r8, r9
 800b136:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b13a:	6022      	str	r2, [r4, #0]
 800b13c:	f8cd a004 	str.w	sl, [sp, #4]
 800b140:	6861      	ldr	r1, [r4, #4]
 800b142:	4628      	mov	r0, r5
 800b144:	f7ff fee8 	bl	800af18 <__cvt>
 800b148:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800b14c:	2b47      	cmp	r3, #71	; 0x47
 800b14e:	4680      	mov	r8, r0
 800b150:	d109      	bne.n	800b166 <_printf_float+0x126>
 800b152:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b154:	1cd8      	adds	r0, r3, #3
 800b156:	db02      	blt.n	800b15e <_printf_float+0x11e>
 800b158:	6862      	ldr	r2, [r4, #4]
 800b15a:	4293      	cmp	r3, r2
 800b15c:	dd47      	ble.n	800b1ee <_printf_float+0x1ae>
 800b15e:	f1aa 0a02 	sub.w	sl, sl, #2
 800b162:	fa5f fa8a 	uxtb.w	sl, sl
 800b166:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b16a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b16c:	d824      	bhi.n	800b1b8 <_printf_float+0x178>
 800b16e:	3901      	subs	r1, #1
 800b170:	4652      	mov	r2, sl
 800b172:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b176:	9109      	str	r1, [sp, #36]	; 0x24
 800b178:	f7ff ff2f 	bl	800afda <__exponent>
 800b17c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b17e:	1813      	adds	r3, r2, r0
 800b180:	2a01      	cmp	r2, #1
 800b182:	4681      	mov	r9, r0
 800b184:	6123      	str	r3, [r4, #16]
 800b186:	dc02      	bgt.n	800b18e <_printf_float+0x14e>
 800b188:	6822      	ldr	r2, [r4, #0]
 800b18a:	07d1      	lsls	r1, r2, #31
 800b18c:	d501      	bpl.n	800b192 <_printf_float+0x152>
 800b18e:	3301      	adds	r3, #1
 800b190:	6123      	str	r3, [r4, #16]
 800b192:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b196:	2b00      	cmp	r3, #0
 800b198:	d0a5      	beq.n	800b0e6 <_printf_float+0xa6>
 800b19a:	232d      	movs	r3, #45	; 0x2d
 800b19c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1a0:	e7a1      	b.n	800b0e6 <_printf_float+0xa6>
 800b1a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800b1a6:	f000 8177 	beq.w	800b498 <_printf_float+0x458>
 800b1aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800b1ae:	d1bb      	bne.n	800b128 <_printf_float+0xe8>
 800b1b0:	2900      	cmp	r1, #0
 800b1b2:	d1b9      	bne.n	800b128 <_printf_float+0xe8>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e7b6      	b.n	800b126 <_printf_float+0xe6>
 800b1b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800b1bc:	d119      	bne.n	800b1f2 <_printf_float+0x1b2>
 800b1be:	2900      	cmp	r1, #0
 800b1c0:	6863      	ldr	r3, [r4, #4]
 800b1c2:	dd0c      	ble.n	800b1de <_printf_float+0x19e>
 800b1c4:	6121      	str	r1, [r4, #16]
 800b1c6:	b913      	cbnz	r3, 800b1ce <_printf_float+0x18e>
 800b1c8:	6822      	ldr	r2, [r4, #0]
 800b1ca:	07d2      	lsls	r2, r2, #31
 800b1cc:	d502      	bpl.n	800b1d4 <_printf_float+0x194>
 800b1ce:	3301      	adds	r3, #1
 800b1d0:	440b      	add	r3, r1
 800b1d2:	6123      	str	r3, [r4, #16]
 800b1d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1d6:	65a3      	str	r3, [r4, #88]	; 0x58
 800b1d8:	f04f 0900 	mov.w	r9, #0
 800b1dc:	e7d9      	b.n	800b192 <_printf_float+0x152>
 800b1de:	b913      	cbnz	r3, 800b1e6 <_printf_float+0x1a6>
 800b1e0:	6822      	ldr	r2, [r4, #0]
 800b1e2:	07d0      	lsls	r0, r2, #31
 800b1e4:	d501      	bpl.n	800b1ea <_printf_float+0x1aa>
 800b1e6:	3302      	adds	r3, #2
 800b1e8:	e7f3      	b.n	800b1d2 <_printf_float+0x192>
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e7f1      	b.n	800b1d2 <_printf_float+0x192>
 800b1ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800b1f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	db05      	blt.n	800b206 <_printf_float+0x1c6>
 800b1fa:	6822      	ldr	r2, [r4, #0]
 800b1fc:	6123      	str	r3, [r4, #16]
 800b1fe:	07d1      	lsls	r1, r2, #31
 800b200:	d5e8      	bpl.n	800b1d4 <_printf_float+0x194>
 800b202:	3301      	adds	r3, #1
 800b204:	e7e5      	b.n	800b1d2 <_printf_float+0x192>
 800b206:	2b00      	cmp	r3, #0
 800b208:	bfd4      	ite	le
 800b20a:	f1c3 0302 	rsble	r3, r3, #2
 800b20e:	2301      	movgt	r3, #1
 800b210:	4413      	add	r3, r2
 800b212:	e7de      	b.n	800b1d2 <_printf_float+0x192>
 800b214:	6823      	ldr	r3, [r4, #0]
 800b216:	055a      	lsls	r2, r3, #21
 800b218:	d407      	bmi.n	800b22a <_printf_float+0x1ea>
 800b21a:	6923      	ldr	r3, [r4, #16]
 800b21c:	4642      	mov	r2, r8
 800b21e:	4631      	mov	r1, r6
 800b220:	4628      	mov	r0, r5
 800b222:	47b8      	blx	r7
 800b224:	3001      	adds	r0, #1
 800b226:	d12b      	bne.n	800b280 <_printf_float+0x240>
 800b228:	e767      	b.n	800b0fa <_printf_float+0xba>
 800b22a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800b22e:	f240 80dc 	bls.w	800b3ea <_printf_float+0x3aa>
 800b232:	2200      	movs	r2, #0
 800b234:	2300      	movs	r3, #0
 800b236:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b23a:	f7f5 fc4d 	bl	8000ad8 <__aeabi_dcmpeq>
 800b23e:	2800      	cmp	r0, #0
 800b240:	d033      	beq.n	800b2aa <_printf_float+0x26a>
 800b242:	2301      	movs	r3, #1
 800b244:	4a41      	ldr	r2, [pc, #260]	; (800b34c <_printf_float+0x30c>)
 800b246:	4631      	mov	r1, r6
 800b248:	4628      	mov	r0, r5
 800b24a:	47b8      	blx	r7
 800b24c:	3001      	adds	r0, #1
 800b24e:	f43f af54 	beq.w	800b0fa <_printf_float+0xba>
 800b252:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b256:	429a      	cmp	r2, r3
 800b258:	db02      	blt.n	800b260 <_printf_float+0x220>
 800b25a:	6823      	ldr	r3, [r4, #0]
 800b25c:	07d8      	lsls	r0, r3, #31
 800b25e:	d50f      	bpl.n	800b280 <_printf_float+0x240>
 800b260:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b264:	4631      	mov	r1, r6
 800b266:	4628      	mov	r0, r5
 800b268:	47b8      	blx	r7
 800b26a:	3001      	adds	r0, #1
 800b26c:	f43f af45 	beq.w	800b0fa <_printf_float+0xba>
 800b270:	f04f 0800 	mov.w	r8, #0
 800b274:	f104 091a 	add.w	r9, r4, #26
 800b278:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b27a:	3b01      	subs	r3, #1
 800b27c:	4543      	cmp	r3, r8
 800b27e:	dc09      	bgt.n	800b294 <_printf_float+0x254>
 800b280:	6823      	ldr	r3, [r4, #0]
 800b282:	079b      	lsls	r3, r3, #30
 800b284:	f100 8103 	bmi.w	800b48e <_printf_float+0x44e>
 800b288:	68e0      	ldr	r0, [r4, #12]
 800b28a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b28c:	4298      	cmp	r0, r3
 800b28e:	bfb8      	it	lt
 800b290:	4618      	movlt	r0, r3
 800b292:	e734      	b.n	800b0fe <_printf_float+0xbe>
 800b294:	2301      	movs	r3, #1
 800b296:	464a      	mov	r2, r9
 800b298:	4631      	mov	r1, r6
 800b29a:	4628      	mov	r0, r5
 800b29c:	47b8      	blx	r7
 800b29e:	3001      	adds	r0, #1
 800b2a0:	f43f af2b 	beq.w	800b0fa <_printf_float+0xba>
 800b2a4:	f108 0801 	add.w	r8, r8, #1
 800b2a8:	e7e6      	b.n	800b278 <_printf_float+0x238>
 800b2aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	dc2b      	bgt.n	800b308 <_printf_float+0x2c8>
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	4a26      	ldr	r2, [pc, #152]	; (800b34c <_printf_float+0x30c>)
 800b2b4:	4631      	mov	r1, r6
 800b2b6:	4628      	mov	r0, r5
 800b2b8:	47b8      	blx	r7
 800b2ba:	3001      	adds	r0, #1
 800b2bc:	f43f af1d 	beq.w	800b0fa <_printf_float+0xba>
 800b2c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c2:	b923      	cbnz	r3, 800b2ce <_printf_float+0x28e>
 800b2c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2c6:	b913      	cbnz	r3, 800b2ce <_printf_float+0x28e>
 800b2c8:	6823      	ldr	r3, [r4, #0]
 800b2ca:	07d9      	lsls	r1, r3, #31
 800b2cc:	d5d8      	bpl.n	800b280 <_printf_float+0x240>
 800b2ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b2d2:	4631      	mov	r1, r6
 800b2d4:	4628      	mov	r0, r5
 800b2d6:	47b8      	blx	r7
 800b2d8:	3001      	adds	r0, #1
 800b2da:	f43f af0e 	beq.w	800b0fa <_printf_float+0xba>
 800b2de:	f04f 0900 	mov.w	r9, #0
 800b2e2:	f104 0a1a 	add.w	sl, r4, #26
 800b2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2e8:	425b      	negs	r3, r3
 800b2ea:	454b      	cmp	r3, r9
 800b2ec:	dc01      	bgt.n	800b2f2 <_printf_float+0x2b2>
 800b2ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2f0:	e794      	b.n	800b21c <_printf_float+0x1dc>
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	4652      	mov	r2, sl
 800b2f6:	4631      	mov	r1, r6
 800b2f8:	4628      	mov	r0, r5
 800b2fa:	47b8      	blx	r7
 800b2fc:	3001      	adds	r0, #1
 800b2fe:	f43f aefc 	beq.w	800b0fa <_printf_float+0xba>
 800b302:	f109 0901 	add.w	r9, r9, #1
 800b306:	e7ee      	b.n	800b2e6 <_printf_float+0x2a6>
 800b308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b30a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b30c:	429a      	cmp	r2, r3
 800b30e:	bfa8      	it	ge
 800b310:	461a      	movge	r2, r3
 800b312:	2a00      	cmp	r2, #0
 800b314:	4691      	mov	r9, r2
 800b316:	dd07      	ble.n	800b328 <_printf_float+0x2e8>
 800b318:	4613      	mov	r3, r2
 800b31a:	4631      	mov	r1, r6
 800b31c:	4642      	mov	r2, r8
 800b31e:	4628      	mov	r0, r5
 800b320:	47b8      	blx	r7
 800b322:	3001      	adds	r0, #1
 800b324:	f43f aee9 	beq.w	800b0fa <_printf_float+0xba>
 800b328:	f104 031a 	add.w	r3, r4, #26
 800b32c:	f04f 0b00 	mov.w	fp, #0
 800b330:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b334:	9306      	str	r3, [sp, #24]
 800b336:	e015      	b.n	800b364 <_printf_float+0x324>
 800b338:	7fefffff 	.word	0x7fefffff
 800b33c:	0800d77c 	.word	0x0800d77c
 800b340:	0800d778 	.word	0x0800d778
 800b344:	0800d784 	.word	0x0800d784
 800b348:	0800d780 	.word	0x0800d780
 800b34c:	0800d788 	.word	0x0800d788
 800b350:	2301      	movs	r3, #1
 800b352:	9a06      	ldr	r2, [sp, #24]
 800b354:	4631      	mov	r1, r6
 800b356:	4628      	mov	r0, r5
 800b358:	47b8      	blx	r7
 800b35a:	3001      	adds	r0, #1
 800b35c:	f43f aecd 	beq.w	800b0fa <_printf_float+0xba>
 800b360:	f10b 0b01 	add.w	fp, fp, #1
 800b364:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800b368:	ebaa 0309 	sub.w	r3, sl, r9
 800b36c:	455b      	cmp	r3, fp
 800b36e:	dcef      	bgt.n	800b350 <_printf_float+0x310>
 800b370:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b374:	429a      	cmp	r2, r3
 800b376:	44d0      	add	r8, sl
 800b378:	db15      	blt.n	800b3a6 <_printf_float+0x366>
 800b37a:	6823      	ldr	r3, [r4, #0]
 800b37c:	07da      	lsls	r2, r3, #31
 800b37e:	d412      	bmi.n	800b3a6 <_printf_float+0x366>
 800b380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b382:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b384:	eba3 020a 	sub.w	r2, r3, sl
 800b388:	eba3 0a01 	sub.w	sl, r3, r1
 800b38c:	4592      	cmp	sl, r2
 800b38e:	bfa8      	it	ge
 800b390:	4692      	movge	sl, r2
 800b392:	f1ba 0f00 	cmp.w	sl, #0
 800b396:	dc0e      	bgt.n	800b3b6 <_printf_float+0x376>
 800b398:	f04f 0800 	mov.w	r8, #0
 800b39c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3a0:	f104 091a 	add.w	r9, r4, #26
 800b3a4:	e019      	b.n	800b3da <_printf_float+0x39a>
 800b3a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3aa:	4631      	mov	r1, r6
 800b3ac:	4628      	mov	r0, r5
 800b3ae:	47b8      	blx	r7
 800b3b0:	3001      	adds	r0, #1
 800b3b2:	d1e5      	bne.n	800b380 <_printf_float+0x340>
 800b3b4:	e6a1      	b.n	800b0fa <_printf_float+0xba>
 800b3b6:	4653      	mov	r3, sl
 800b3b8:	4642      	mov	r2, r8
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	4628      	mov	r0, r5
 800b3be:	47b8      	blx	r7
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d1e9      	bne.n	800b398 <_printf_float+0x358>
 800b3c4:	e699      	b.n	800b0fa <_printf_float+0xba>
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	464a      	mov	r2, r9
 800b3ca:	4631      	mov	r1, r6
 800b3cc:	4628      	mov	r0, r5
 800b3ce:	47b8      	blx	r7
 800b3d0:	3001      	adds	r0, #1
 800b3d2:	f43f ae92 	beq.w	800b0fa <_printf_float+0xba>
 800b3d6:	f108 0801 	add.w	r8, r8, #1
 800b3da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b3de:	1a9b      	subs	r3, r3, r2
 800b3e0:	eba3 030a 	sub.w	r3, r3, sl
 800b3e4:	4543      	cmp	r3, r8
 800b3e6:	dcee      	bgt.n	800b3c6 <_printf_float+0x386>
 800b3e8:	e74a      	b.n	800b280 <_printf_float+0x240>
 800b3ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3ec:	2a01      	cmp	r2, #1
 800b3ee:	dc01      	bgt.n	800b3f4 <_printf_float+0x3b4>
 800b3f0:	07db      	lsls	r3, r3, #31
 800b3f2:	d53a      	bpl.n	800b46a <_printf_float+0x42a>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	4642      	mov	r2, r8
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	47b8      	blx	r7
 800b3fe:	3001      	adds	r0, #1
 800b400:	f43f ae7b 	beq.w	800b0fa <_printf_float+0xba>
 800b404:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b408:	4631      	mov	r1, r6
 800b40a:	4628      	mov	r0, r5
 800b40c:	47b8      	blx	r7
 800b40e:	3001      	adds	r0, #1
 800b410:	f108 0801 	add.w	r8, r8, #1
 800b414:	f43f ae71 	beq.w	800b0fa <_printf_float+0xba>
 800b418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b41a:	2200      	movs	r2, #0
 800b41c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800b420:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b424:	2300      	movs	r3, #0
 800b426:	f7f5 fb57 	bl	8000ad8 <__aeabi_dcmpeq>
 800b42a:	b9c8      	cbnz	r0, 800b460 <_printf_float+0x420>
 800b42c:	4653      	mov	r3, sl
 800b42e:	4642      	mov	r2, r8
 800b430:	4631      	mov	r1, r6
 800b432:	4628      	mov	r0, r5
 800b434:	47b8      	blx	r7
 800b436:	3001      	adds	r0, #1
 800b438:	d10e      	bne.n	800b458 <_printf_float+0x418>
 800b43a:	e65e      	b.n	800b0fa <_printf_float+0xba>
 800b43c:	2301      	movs	r3, #1
 800b43e:	4652      	mov	r2, sl
 800b440:	4631      	mov	r1, r6
 800b442:	4628      	mov	r0, r5
 800b444:	47b8      	blx	r7
 800b446:	3001      	adds	r0, #1
 800b448:	f43f ae57 	beq.w	800b0fa <_printf_float+0xba>
 800b44c:	f108 0801 	add.w	r8, r8, #1
 800b450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b452:	3b01      	subs	r3, #1
 800b454:	4543      	cmp	r3, r8
 800b456:	dcf1      	bgt.n	800b43c <_printf_float+0x3fc>
 800b458:	464b      	mov	r3, r9
 800b45a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b45e:	e6de      	b.n	800b21e <_printf_float+0x1de>
 800b460:	f04f 0800 	mov.w	r8, #0
 800b464:	f104 0a1a 	add.w	sl, r4, #26
 800b468:	e7f2      	b.n	800b450 <_printf_float+0x410>
 800b46a:	2301      	movs	r3, #1
 800b46c:	e7df      	b.n	800b42e <_printf_float+0x3ee>
 800b46e:	2301      	movs	r3, #1
 800b470:	464a      	mov	r2, r9
 800b472:	4631      	mov	r1, r6
 800b474:	4628      	mov	r0, r5
 800b476:	47b8      	blx	r7
 800b478:	3001      	adds	r0, #1
 800b47a:	f43f ae3e 	beq.w	800b0fa <_printf_float+0xba>
 800b47e:	f108 0801 	add.w	r8, r8, #1
 800b482:	68e3      	ldr	r3, [r4, #12]
 800b484:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b486:	1a9b      	subs	r3, r3, r2
 800b488:	4543      	cmp	r3, r8
 800b48a:	dcf0      	bgt.n	800b46e <_printf_float+0x42e>
 800b48c:	e6fc      	b.n	800b288 <_printf_float+0x248>
 800b48e:	f04f 0800 	mov.w	r8, #0
 800b492:	f104 0919 	add.w	r9, r4, #25
 800b496:	e7f4      	b.n	800b482 <_printf_float+0x442>
 800b498:	2900      	cmp	r1, #0
 800b49a:	f43f ae8b 	beq.w	800b1b4 <_printf_float+0x174>
 800b49e:	2300      	movs	r3, #0
 800b4a0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800b4a4:	ab09      	add	r3, sp, #36	; 0x24
 800b4a6:	9300      	str	r3, [sp, #0]
 800b4a8:	ec49 8b10 	vmov	d0, r8, r9
 800b4ac:	6022      	str	r2, [r4, #0]
 800b4ae:	f8cd a004 	str.w	sl, [sp, #4]
 800b4b2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b4b6:	4628      	mov	r0, r5
 800b4b8:	f7ff fd2e 	bl	800af18 <__cvt>
 800b4bc:	4680      	mov	r8, r0
 800b4be:	e648      	b.n	800b152 <_printf_float+0x112>

0800b4c0 <_printf_common>:
 800b4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4c4:	4691      	mov	r9, r2
 800b4c6:	461f      	mov	r7, r3
 800b4c8:	688a      	ldr	r2, [r1, #8]
 800b4ca:	690b      	ldr	r3, [r1, #16]
 800b4cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	bfb8      	it	lt
 800b4d4:	4613      	movlt	r3, r2
 800b4d6:	f8c9 3000 	str.w	r3, [r9]
 800b4da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4de:	4606      	mov	r6, r0
 800b4e0:	460c      	mov	r4, r1
 800b4e2:	b112      	cbz	r2, 800b4ea <_printf_common+0x2a>
 800b4e4:	3301      	adds	r3, #1
 800b4e6:	f8c9 3000 	str.w	r3, [r9]
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	0699      	lsls	r1, r3, #26
 800b4ee:	bf42      	ittt	mi
 800b4f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800b4f4:	3302      	addmi	r3, #2
 800b4f6:	f8c9 3000 	strmi.w	r3, [r9]
 800b4fa:	6825      	ldr	r5, [r4, #0]
 800b4fc:	f015 0506 	ands.w	r5, r5, #6
 800b500:	d107      	bne.n	800b512 <_printf_common+0x52>
 800b502:	f104 0a19 	add.w	sl, r4, #25
 800b506:	68e3      	ldr	r3, [r4, #12]
 800b508:	f8d9 2000 	ldr.w	r2, [r9]
 800b50c:	1a9b      	subs	r3, r3, r2
 800b50e:	42ab      	cmp	r3, r5
 800b510:	dc28      	bgt.n	800b564 <_printf_common+0xa4>
 800b512:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800b516:	6822      	ldr	r2, [r4, #0]
 800b518:	3300      	adds	r3, #0
 800b51a:	bf18      	it	ne
 800b51c:	2301      	movne	r3, #1
 800b51e:	0692      	lsls	r2, r2, #26
 800b520:	d42d      	bmi.n	800b57e <_printf_common+0xbe>
 800b522:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b526:	4639      	mov	r1, r7
 800b528:	4630      	mov	r0, r6
 800b52a:	47c0      	blx	r8
 800b52c:	3001      	adds	r0, #1
 800b52e:	d020      	beq.n	800b572 <_printf_common+0xb2>
 800b530:	6823      	ldr	r3, [r4, #0]
 800b532:	68e5      	ldr	r5, [r4, #12]
 800b534:	f8d9 2000 	ldr.w	r2, [r9]
 800b538:	f003 0306 	and.w	r3, r3, #6
 800b53c:	2b04      	cmp	r3, #4
 800b53e:	bf08      	it	eq
 800b540:	1aad      	subeq	r5, r5, r2
 800b542:	68a3      	ldr	r3, [r4, #8]
 800b544:	6922      	ldr	r2, [r4, #16]
 800b546:	bf0c      	ite	eq
 800b548:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b54c:	2500      	movne	r5, #0
 800b54e:	4293      	cmp	r3, r2
 800b550:	bfc4      	itt	gt
 800b552:	1a9b      	subgt	r3, r3, r2
 800b554:	18ed      	addgt	r5, r5, r3
 800b556:	f04f 0900 	mov.w	r9, #0
 800b55a:	341a      	adds	r4, #26
 800b55c:	454d      	cmp	r5, r9
 800b55e:	d11a      	bne.n	800b596 <_printf_common+0xd6>
 800b560:	2000      	movs	r0, #0
 800b562:	e008      	b.n	800b576 <_printf_common+0xb6>
 800b564:	2301      	movs	r3, #1
 800b566:	4652      	mov	r2, sl
 800b568:	4639      	mov	r1, r7
 800b56a:	4630      	mov	r0, r6
 800b56c:	47c0      	blx	r8
 800b56e:	3001      	adds	r0, #1
 800b570:	d103      	bne.n	800b57a <_printf_common+0xba>
 800b572:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b57a:	3501      	adds	r5, #1
 800b57c:	e7c3      	b.n	800b506 <_printf_common+0x46>
 800b57e:	18e1      	adds	r1, r4, r3
 800b580:	1c5a      	adds	r2, r3, #1
 800b582:	2030      	movs	r0, #48	; 0x30
 800b584:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b588:	4422      	add	r2, r4
 800b58a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b58e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b592:	3302      	adds	r3, #2
 800b594:	e7c5      	b.n	800b522 <_printf_common+0x62>
 800b596:	2301      	movs	r3, #1
 800b598:	4622      	mov	r2, r4
 800b59a:	4639      	mov	r1, r7
 800b59c:	4630      	mov	r0, r6
 800b59e:	47c0      	blx	r8
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	d0e6      	beq.n	800b572 <_printf_common+0xb2>
 800b5a4:	f109 0901 	add.w	r9, r9, #1
 800b5a8:	e7d8      	b.n	800b55c <_printf_common+0x9c>
	...

0800b5ac <_printf_i>:
 800b5ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b5b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800b5b4:	460c      	mov	r4, r1
 800b5b6:	7e09      	ldrb	r1, [r1, #24]
 800b5b8:	b085      	sub	sp, #20
 800b5ba:	296e      	cmp	r1, #110	; 0x6e
 800b5bc:	4617      	mov	r7, r2
 800b5be:	4606      	mov	r6, r0
 800b5c0:	4698      	mov	r8, r3
 800b5c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5c4:	f000 80b3 	beq.w	800b72e <_printf_i+0x182>
 800b5c8:	d822      	bhi.n	800b610 <_printf_i+0x64>
 800b5ca:	2963      	cmp	r1, #99	; 0x63
 800b5cc:	d036      	beq.n	800b63c <_printf_i+0x90>
 800b5ce:	d80a      	bhi.n	800b5e6 <_printf_i+0x3a>
 800b5d0:	2900      	cmp	r1, #0
 800b5d2:	f000 80b9 	beq.w	800b748 <_printf_i+0x19c>
 800b5d6:	2958      	cmp	r1, #88	; 0x58
 800b5d8:	f000 8083 	beq.w	800b6e2 <_printf_i+0x136>
 800b5dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b5e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800b5e4:	e032      	b.n	800b64c <_printf_i+0xa0>
 800b5e6:	2964      	cmp	r1, #100	; 0x64
 800b5e8:	d001      	beq.n	800b5ee <_printf_i+0x42>
 800b5ea:	2969      	cmp	r1, #105	; 0x69
 800b5ec:	d1f6      	bne.n	800b5dc <_printf_i+0x30>
 800b5ee:	6820      	ldr	r0, [r4, #0]
 800b5f0:	6813      	ldr	r3, [r2, #0]
 800b5f2:	0605      	lsls	r5, r0, #24
 800b5f4:	f103 0104 	add.w	r1, r3, #4
 800b5f8:	d52a      	bpl.n	800b650 <_printf_i+0xa4>
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	6011      	str	r1, [r2, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	da03      	bge.n	800b60a <_printf_i+0x5e>
 800b602:	222d      	movs	r2, #45	; 0x2d
 800b604:	425b      	negs	r3, r3
 800b606:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800b60a:	486f      	ldr	r0, [pc, #444]	; (800b7c8 <_printf_i+0x21c>)
 800b60c:	220a      	movs	r2, #10
 800b60e:	e039      	b.n	800b684 <_printf_i+0xd8>
 800b610:	2973      	cmp	r1, #115	; 0x73
 800b612:	f000 809d 	beq.w	800b750 <_printf_i+0x1a4>
 800b616:	d808      	bhi.n	800b62a <_printf_i+0x7e>
 800b618:	296f      	cmp	r1, #111	; 0x6f
 800b61a:	d020      	beq.n	800b65e <_printf_i+0xb2>
 800b61c:	2970      	cmp	r1, #112	; 0x70
 800b61e:	d1dd      	bne.n	800b5dc <_printf_i+0x30>
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	f043 0320 	orr.w	r3, r3, #32
 800b626:	6023      	str	r3, [r4, #0]
 800b628:	e003      	b.n	800b632 <_printf_i+0x86>
 800b62a:	2975      	cmp	r1, #117	; 0x75
 800b62c:	d017      	beq.n	800b65e <_printf_i+0xb2>
 800b62e:	2978      	cmp	r1, #120	; 0x78
 800b630:	d1d4      	bne.n	800b5dc <_printf_i+0x30>
 800b632:	2378      	movs	r3, #120	; 0x78
 800b634:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b638:	4864      	ldr	r0, [pc, #400]	; (800b7cc <_printf_i+0x220>)
 800b63a:	e055      	b.n	800b6e8 <_printf_i+0x13c>
 800b63c:	6813      	ldr	r3, [r2, #0]
 800b63e:	1d19      	adds	r1, r3, #4
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	6011      	str	r1, [r2, #0]
 800b644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b648:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b64c:	2301      	movs	r3, #1
 800b64e:	e08c      	b.n	800b76a <_printf_i+0x1be>
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	6011      	str	r1, [r2, #0]
 800b654:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b658:	bf18      	it	ne
 800b65a:	b21b      	sxthne	r3, r3
 800b65c:	e7cf      	b.n	800b5fe <_printf_i+0x52>
 800b65e:	6813      	ldr	r3, [r2, #0]
 800b660:	6825      	ldr	r5, [r4, #0]
 800b662:	1d18      	adds	r0, r3, #4
 800b664:	6010      	str	r0, [r2, #0]
 800b666:	0628      	lsls	r0, r5, #24
 800b668:	d501      	bpl.n	800b66e <_printf_i+0xc2>
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	e002      	b.n	800b674 <_printf_i+0xc8>
 800b66e:	0668      	lsls	r0, r5, #25
 800b670:	d5fb      	bpl.n	800b66a <_printf_i+0xbe>
 800b672:	881b      	ldrh	r3, [r3, #0]
 800b674:	4854      	ldr	r0, [pc, #336]	; (800b7c8 <_printf_i+0x21c>)
 800b676:	296f      	cmp	r1, #111	; 0x6f
 800b678:	bf14      	ite	ne
 800b67a:	220a      	movne	r2, #10
 800b67c:	2208      	moveq	r2, #8
 800b67e:	2100      	movs	r1, #0
 800b680:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b684:	6865      	ldr	r5, [r4, #4]
 800b686:	60a5      	str	r5, [r4, #8]
 800b688:	2d00      	cmp	r5, #0
 800b68a:	f2c0 8095 	blt.w	800b7b8 <_printf_i+0x20c>
 800b68e:	6821      	ldr	r1, [r4, #0]
 800b690:	f021 0104 	bic.w	r1, r1, #4
 800b694:	6021      	str	r1, [r4, #0]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d13d      	bne.n	800b716 <_printf_i+0x16a>
 800b69a:	2d00      	cmp	r5, #0
 800b69c:	f040 808e 	bne.w	800b7bc <_printf_i+0x210>
 800b6a0:	4665      	mov	r5, ip
 800b6a2:	2a08      	cmp	r2, #8
 800b6a4:	d10b      	bne.n	800b6be <_printf_i+0x112>
 800b6a6:	6823      	ldr	r3, [r4, #0]
 800b6a8:	07db      	lsls	r3, r3, #31
 800b6aa:	d508      	bpl.n	800b6be <_printf_i+0x112>
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	6862      	ldr	r2, [r4, #4]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	bfde      	ittt	le
 800b6b4:	2330      	movle	r3, #48	; 0x30
 800b6b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6ba:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800b6be:	ebac 0305 	sub.w	r3, ip, r5
 800b6c2:	6123      	str	r3, [r4, #16]
 800b6c4:	f8cd 8000 	str.w	r8, [sp]
 800b6c8:	463b      	mov	r3, r7
 800b6ca:	aa03      	add	r2, sp, #12
 800b6cc:	4621      	mov	r1, r4
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f7ff fef6 	bl	800b4c0 <_printf_common>
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	d14d      	bne.n	800b774 <_printf_i+0x1c8>
 800b6d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b6dc:	b005      	add	sp, #20
 800b6de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6e2:	4839      	ldr	r0, [pc, #228]	; (800b7c8 <_printf_i+0x21c>)
 800b6e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800b6e8:	6813      	ldr	r3, [r2, #0]
 800b6ea:	6821      	ldr	r1, [r4, #0]
 800b6ec:	1d1d      	adds	r5, r3, #4
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	6015      	str	r5, [r2, #0]
 800b6f2:	060a      	lsls	r2, r1, #24
 800b6f4:	d50b      	bpl.n	800b70e <_printf_i+0x162>
 800b6f6:	07ca      	lsls	r2, r1, #31
 800b6f8:	bf44      	itt	mi
 800b6fa:	f041 0120 	orrmi.w	r1, r1, #32
 800b6fe:	6021      	strmi	r1, [r4, #0]
 800b700:	b91b      	cbnz	r3, 800b70a <_printf_i+0x15e>
 800b702:	6822      	ldr	r2, [r4, #0]
 800b704:	f022 0220 	bic.w	r2, r2, #32
 800b708:	6022      	str	r2, [r4, #0]
 800b70a:	2210      	movs	r2, #16
 800b70c:	e7b7      	b.n	800b67e <_printf_i+0xd2>
 800b70e:	064d      	lsls	r5, r1, #25
 800b710:	bf48      	it	mi
 800b712:	b29b      	uxthmi	r3, r3
 800b714:	e7ef      	b.n	800b6f6 <_printf_i+0x14a>
 800b716:	4665      	mov	r5, ip
 800b718:	fbb3 f1f2 	udiv	r1, r3, r2
 800b71c:	fb02 3311 	mls	r3, r2, r1, r3
 800b720:	5cc3      	ldrb	r3, [r0, r3]
 800b722:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800b726:	460b      	mov	r3, r1
 800b728:	2900      	cmp	r1, #0
 800b72a:	d1f5      	bne.n	800b718 <_printf_i+0x16c>
 800b72c:	e7b9      	b.n	800b6a2 <_printf_i+0xf6>
 800b72e:	6813      	ldr	r3, [r2, #0]
 800b730:	6825      	ldr	r5, [r4, #0]
 800b732:	6961      	ldr	r1, [r4, #20]
 800b734:	1d18      	adds	r0, r3, #4
 800b736:	6010      	str	r0, [r2, #0]
 800b738:	0628      	lsls	r0, r5, #24
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	d501      	bpl.n	800b742 <_printf_i+0x196>
 800b73e:	6019      	str	r1, [r3, #0]
 800b740:	e002      	b.n	800b748 <_printf_i+0x19c>
 800b742:	066a      	lsls	r2, r5, #25
 800b744:	d5fb      	bpl.n	800b73e <_printf_i+0x192>
 800b746:	8019      	strh	r1, [r3, #0]
 800b748:	2300      	movs	r3, #0
 800b74a:	6123      	str	r3, [r4, #16]
 800b74c:	4665      	mov	r5, ip
 800b74e:	e7b9      	b.n	800b6c4 <_printf_i+0x118>
 800b750:	6813      	ldr	r3, [r2, #0]
 800b752:	1d19      	adds	r1, r3, #4
 800b754:	6011      	str	r1, [r2, #0]
 800b756:	681d      	ldr	r5, [r3, #0]
 800b758:	6862      	ldr	r2, [r4, #4]
 800b75a:	2100      	movs	r1, #0
 800b75c:	4628      	mov	r0, r5
 800b75e:	f7f4 fd47 	bl	80001f0 <memchr>
 800b762:	b108      	cbz	r0, 800b768 <_printf_i+0x1bc>
 800b764:	1b40      	subs	r0, r0, r5
 800b766:	6060      	str	r0, [r4, #4]
 800b768:	6863      	ldr	r3, [r4, #4]
 800b76a:	6123      	str	r3, [r4, #16]
 800b76c:	2300      	movs	r3, #0
 800b76e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b772:	e7a7      	b.n	800b6c4 <_printf_i+0x118>
 800b774:	6923      	ldr	r3, [r4, #16]
 800b776:	462a      	mov	r2, r5
 800b778:	4639      	mov	r1, r7
 800b77a:	4630      	mov	r0, r6
 800b77c:	47c0      	blx	r8
 800b77e:	3001      	adds	r0, #1
 800b780:	d0aa      	beq.n	800b6d8 <_printf_i+0x12c>
 800b782:	6823      	ldr	r3, [r4, #0]
 800b784:	079b      	lsls	r3, r3, #30
 800b786:	d413      	bmi.n	800b7b0 <_printf_i+0x204>
 800b788:	68e0      	ldr	r0, [r4, #12]
 800b78a:	9b03      	ldr	r3, [sp, #12]
 800b78c:	4298      	cmp	r0, r3
 800b78e:	bfb8      	it	lt
 800b790:	4618      	movlt	r0, r3
 800b792:	e7a3      	b.n	800b6dc <_printf_i+0x130>
 800b794:	2301      	movs	r3, #1
 800b796:	464a      	mov	r2, r9
 800b798:	4639      	mov	r1, r7
 800b79a:	4630      	mov	r0, r6
 800b79c:	47c0      	blx	r8
 800b79e:	3001      	adds	r0, #1
 800b7a0:	d09a      	beq.n	800b6d8 <_printf_i+0x12c>
 800b7a2:	3501      	adds	r5, #1
 800b7a4:	68e3      	ldr	r3, [r4, #12]
 800b7a6:	9a03      	ldr	r2, [sp, #12]
 800b7a8:	1a9b      	subs	r3, r3, r2
 800b7aa:	42ab      	cmp	r3, r5
 800b7ac:	dcf2      	bgt.n	800b794 <_printf_i+0x1e8>
 800b7ae:	e7eb      	b.n	800b788 <_printf_i+0x1dc>
 800b7b0:	2500      	movs	r5, #0
 800b7b2:	f104 0919 	add.w	r9, r4, #25
 800b7b6:	e7f5      	b.n	800b7a4 <_printf_i+0x1f8>
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d1ac      	bne.n	800b716 <_printf_i+0x16a>
 800b7bc:	7803      	ldrb	r3, [r0, #0]
 800b7be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b7c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b7c6:	e76c      	b.n	800b6a2 <_printf_i+0xf6>
 800b7c8:	0800d78a 	.word	0x0800d78a
 800b7cc:	0800d79b 	.word	0x0800d79b

0800b7d0 <_sbrk_r>:
 800b7d0:	b538      	push	{r3, r4, r5, lr}
 800b7d2:	4c06      	ldr	r4, [pc, #24]	; (800b7ec <_sbrk_r+0x1c>)
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	4605      	mov	r5, r0
 800b7d8:	4608      	mov	r0, r1
 800b7da:	6023      	str	r3, [r4, #0]
 800b7dc:	f7ff fa06 	bl	800abec <_sbrk>
 800b7e0:	1c43      	adds	r3, r0, #1
 800b7e2:	d102      	bne.n	800b7ea <_sbrk_r+0x1a>
 800b7e4:	6823      	ldr	r3, [r4, #0]
 800b7e6:	b103      	cbz	r3, 800b7ea <_sbrk_r+0x1a>
 800b7e8:	602b      	str	r3, [r5, #0]
 800b7ea:	bd38      	pop	{r3, r4, r5, pc}
 800b7ec:	20000ee4 	.word	0x20000ee4

0800b7f0 <sniprintf>:
 800b7f0:	b40c      	push	{r2, r3}
 800b7f2:	b530      	push	{r4, r5, lr}
 800b7f4:	4b17      	ldr	r3, [pc, #92]	; (800b854 <sniprintf+0x64>)
 800b7f6:	1e0c      	subs	r4, r1, #0
 800b7f8:	b09d      	sub	sp, #116	; 0x74
 800b7fa:	681d      	ldr	r5, [r3, #0]
 800b7fc:	da08      	bge.n	800b810 <sniprintf+0x20>
 800b7fe:	238b      	movs	r3, #139	; 0x8b
 800b800:	602b      	str	r3, [r5, #0]
 800b802:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b806:	b01d      	add	sp, #116	; 0x74
 800b808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b80c:	b002      	add	sp, #8
 800b80e:	4770      	bx	lr
 800b810:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b814:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b818:	bf14      	ite	ne
 800b81a:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800b81e:	4623      	moveq	r3, r4
 800b820:	9304      	str	r3, [sp, #16]
 800b822:	9307      	str	r3, [sp, #28]
 800b824:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b828:	9002      	str	r0, [sp, #8]
 800b82a:	9006      	str	r0, [sp, #24]
 800b82c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b830:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b832:	ab21      	add	r3, sp, #132	; 0x84
 800b834:	a902      	add	r1, sp, #8
 800b836:	4628      	mov	r0, r5
 800b838:	9301      	str	r3, [sp, #4]
 800b83a:	f001 f9f1 	bl	800cc20 <_svfiprintf_r>
 800b83e:	1c43      	adds	r3, r0, #1
 800b840:	bfbc      	itt	lt
 800b842:	238b      	movlt	r3, #139	; 0x8b
 800b844:	602b      	strlt	r3, [r5, #0]
 800b846:	2c00      	cmp	r4, #0
 800b848:	d0dd      	beq.n	800b806 <sniprintf+0x16>
 800b84a:	9b02      	ldr	r3, [sp, #8]
 800b84c:	2200      	movs	r2, #0
 800b84e:	701a      	strb	r2, [r3, #0]
 800b850:	e7d9      	b.n	800b806 <sniprintf+0x16>
 800b852:	bf00      	nop
 800b854:	20000014 	.word	0x20000014

0800b858 <strcpy>:
 800b858:	4603      	mov	r3, r0
 800b85a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b85e:	f803 2b01 	strb.w	r2, [r3], #1
 800b862:	2a00      	cmp	r2, #0
 800b864:	d1f9      	bne.n	800b85a <strcpy+0x2>
 800b866:	4770      	bx	lr

0800b868 <strncat>:
 800b868:	b530      	push	{r4, r5, lr}
 800b86a:	4603      	mov	r3, r0
 800b86c:	781c      	ldrb	r4, [r3, #0]
 800b86e:	1c5d      	adds	r5, r3, #1
 800b870:	b944      	cbnz	r4, 800b884 <strncat+0x1c>
 800b872:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 800b876:	d304      	bcc.n	800b882 <strncat+0x1a>
 800b878:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b87c:	f803 4b01 	strb.w	r4, [r3], #1
 800b880:	b914      	cbnz	r4, 800b888 <strncat+0x20>
 800b882:	bd30      	pop	{r4, r5, pc}
 800b884:	462b      	mov	r3, r5
 800b886:	e7f1      	b.n	800b86c <strncat+0x4>
 800b888:	2a00      	cmp	r2, #0
 800b88a:	d1f2      	bne.n	800b872 <strncat+0xa>
 800b88c:	701a      	strb	r2, [r3, #0]
 800b88e:	e7f0      	b.n	800b872 <strncat+0xa>

0800b890 <strncpy>:
 800b890:	b570      	push	{r4, r5, r6, lr}
 800b892:	3901      	subs	r1, #1
 800b894:	4604      	mov	r4, r0
 800b896:	b902      	cbnz	r2, 800b89a <strncpy+0xa>
 800b898:	bd70      	pop	{r4, r5, r6, pc}
 800b89a:	4623      	mov	r3, r4
 800b89c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800b8a0:	f803 5b01 	strb.w	r5, [r3], #1
 800b8a4:	1e56      	subs	r6, r2, #1
 800b8a6:	b92d      	cbnz	r5, 800b8b4 <strncpy+0x24>
 800b8a8:	4414      	add	r4, r2
 800b8aa:	42a3      	cmp	r3, r4
 800b8ac:	d0f4      	beq.n	800b898 <strncpy+0x8>
 800b8ae:	f803 5b01 	strb.w	r5, [r3], #1
 800b8b2:	e7fa      	b.n	800b8aa <strncpy+0x1a>
 800b8b4:	461c      	mov	r4, r3
 800b8b6:	4632      	mov	r2, r6
 800b8b8:	e7ed      	b.n	800b896 <strncpy+0x6>

0800b8ba <strstr>:
 800b8ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8bc:	7803      	ldrb	r3, [r0, #0]
 800b8be:	b17b      	cbz	r3, 800b8e0 <strstr+0x26>
 800b8c0:	4604      	mov	r4, r0
 800b8c2:	7823      	ldrb	r3, [r4, #0]
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	1c66      	adds	r6, r4, #1
 800b8c8:	b17b      	cbz	r3, 800b8ea <strstr+0x30>
 800b8ca:	1e4a      	subs	r2, r1, #1
 800b8cc:	1e63      	subs	r3, r4, #1
 800b8ce:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800b8d2:	b14d      	cbz	r5, 800b8e8 <strstr+0x2e>
 800b8d4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800b8d8:	42af      	cmp	r7, r5
 800b8da:	4634      	mov	r4, r6
 800b8dc:	d0f7      	beq.n	800b8ce <strstr+0x14>
 800b8de:	e7f0      	b.n	800b8c2 <strstr+0x8>
 800b8e0:	780b      	ldrb	r3, [r1, #0]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	bf18      	it	ne
 800b8e6:	2000      	movne	r0, #0
 800b8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	e7fc      	b.n	800b8e8 <strstr+0x2e>

0800b8ee <quorem>:
 800b8ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f2:	6903      	ldr	r3, [r0, #16]
 800b8f4:	690c      	ldr	r4, [r1, #16]
 800b8f6:	42a3      	cmp	r3, r4
 800b8f8:	4680      	mov	r8, r0
 800b8fa:	f2c0 8082 	blt.w	800ba02 <quorem+0x114>
 800b8fe:	3c01      	subs	r4, #1
 800b900:	f101 0714 	add.w	r7, r1, #20
 800b904:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800b908:	f100 0614 	add.w	r6, r0, #20
 800b90c:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800b910:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800b914:	eb06 030c 	add.w	r3, r6, ip
 800b918:	3501      	adds	r5, #1
 800b91a:	eb07 090c 	add.w	r9, r7, ip
 800b91e:	9301      	str	r3, [sp, #4]
 800b920:	fbb0 f5f5 	udiv	r5, r0, r5
 800b924:	b395      	cbz	r5, 800b98c <quorem+0x9e>
 800b926:	f04f 0a00 	mov.w	sl, #0
 800b92a:	4638      	mov	r0, r7
 800b92c:	46b6      	mov	lr, r6
 800b92e:	46d3      	mov	fp, sl
 800b930:	f850 2b04 	ldr.w	r2, [r0], #4
 800b934:	b293      	uxth	r3, r2
 800b936:	fb05 a303 	mla	r3, r5, r3, sl
 800b93a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b93e:	b29b      	uxth	r3, r3
 800b940:	ebab 0303 	sub.w	r3, fp, r3
 800b944:	0c12      	lsrs	r2, r2, #16
 800b946:	f8de b000 	ldr.w	fp, [lr]
 800b94a:	fb05 a202 	mla	r2, r5, r2, sl
 800b94e:	fa13 f38b 	uxtah	r3, r3, fp
 800b952:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800b956:	fa1f fb82 	uxth.w	fp, r2
 800b95a:	f8de 2000 	ldr.w	r2, [lr]
 800b95e:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800b962:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b966:	b29b      	uxth	r3, r3
 800b968:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b96c:	4581      	cmp	r9, r0
 800b96e:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800b972:	f84e 3b04 	str.w	r3, [lr], #4
 800b976:	d2db      	bcs.n	800b930 <quorem+0x42>
 800b978:	f856 300c 	ldr.w	r3, [r6, ip]
 800b97c:	b933      	cbnz	r3, 800b98c <quorem+0x9e>
 800b97e:	9b01      	ldr	r3, [sp, #4]
 800b980:	3b04      	subs	r3, #4
 800b982:	429e      	cmp	r6, r3
 800b984:	461a      	mov	r2, r3
 800b986:	d330      	bcc.n	800b9ea <quorem+0xfc>
 800b988:	f8c8 4010 	str.w	r4, [r8, #16]
 800b98c:	4640      	mov	r0, r8
 800b98e:	f001 f819 	bl	800c9c4 <__mcmp>
 800b992:	2800      	cmp	r0, #0
 800b994:	db25      	blt.n	800b9e2 <quorem+0xf4>
 800b996:	3501      	adds	r5, #1
 800b998:	4630      	mov	r0, r6
 800b99a:	f04f 0c00 	mov.w	ip, #0
 800b99e:	f857 2b04 	ldr.w	r2, [r7], #4
 800b9a2:	f8d0 e000 	ldr.w	lr, [r0]
 800b9a6:	b293      	uxth	r3, r2
 800b9a8:	ebac 0303 	sub.w	r3, ip, r3
 800b9ac:	0c12      	lsrs	r2, r2, #16
 800b9ae:	fa13 f38e 	uxtah	r3, r3, lr
 800b9b2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b9b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b9ba:	b29b      	uxth	r3, r3
 800b9bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b9c0:	45b9      	cmp	r9, r7
 800b9c2:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b9c6:	f840 3b04 	str.w	r3, [r0], #4
 800b9ca:	d2e8      	bcs.n	800b99e <quorem+0xb0>
 800b9cc:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800b9d0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800b9d4:	b92a      	cbnz	r2, 800b9e2 <quorem+0xf4>
 800b9d6:	3b04      	subs	r3, #4
 800b9d8:	429e      	cmp	r6, r3
 800b9da:	461a      	mov	r2, r3
 800b9dc:	d30b      	bcc.n	800b9f6 <quorem+0x108>
 800b9de:	f8c8 4010 	str.w	r4, [r8, #16]
 800b9e2:	4628      	mov	r0, r5
 800b9e4:	b003      	add	sp, #12
 800b9e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9ea:	6812      	ldr	r2, [r2, #0]
 800b9ec:	3b04      	subs	r3, #4
 800b9ee:	2a00      	cmp	r2, #0
 800b9f0:	d1ca      	bne.n	800b988 <quorem+0x9a>
 800b9f2:	3c01      	subs	r4, #1
 800b9f4:	e7c5      	b.n	800b982 <quorem+0x94>
 800b9f6:	6812      	ldr	r2, [r2, #0]
 800b9f8:	3b04      	subs	r3, #4
 800b9fa:	2a00      	cmp	r2, #0
 800b9fc:	d1ef      	bne.n	800b9de <quorem+0xf0>
 800b9fe:	3c01      	subs	r4, #1
 800ba00:	e7ea      	b.n	800b9d8 <quorem+0xea>
 800ba02:	2000      	movs	r0, #0
 800ba04:	e7ee      	b.n	800b9e4 <quorem+0xf6>
	...

0800ba08 <_dtoa_r>:
 800ba08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0c:	ec57 6b10 	vmov	r6, r7, d0
 800ba10:	b097      	sub	sp, #92	; 0x5c
 800ba12:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ba14:	9106      	str	r1, [sp, #24]
 800ba16:	4604      	mov	r4, r0
 800ba18:	920b      	str	r2, [sp, #44]	; 0x2c
 800ba1a:	9312      	str	r3, [sp, #72]	; 0x48
 800ba1c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ba20:	e9cd 6700 	strd	r6, r7, [sp]
 800ba24:	b93d      	cbnz	r5, 800ba36 <_dtoa_r+0x2e>
 800ba26:	2010      	movs	r0, #16
 800ba28:	f7ff f9aa 	bl	800ad80 <malloc>
 800ba2c:	6260      	str	r0, [r4, #36]	; 0x24
 800ba2e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ba32:	6005      	str	r5, [r0, #0]
 800ba34:	60c5      	str	r5, [r0, #12]
 800ba36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba38:	6819      	ldr	r1, [r3, #0]
 800ba3a:	b151      	cbz	r1, 800ba52 <_dtoa_r+0x4a>
 800ba3c:	685a      	ldr	r2, [r3, #4]
 800ba3e:	604a      	str	r2, [r1, #4]
 800ba40:	2301      	movs	r3, #1
 800ba42:	4093      	lsls	r3, r2
 800ba44:	608b      	str	r3, [r1, #8]
 800ba46:	4620      	mov	r0, r4
 800ba48:	f000 fdda 	bl	800c600 <_Bfree>
 800ba4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba4e:	2200      	movs	r2, #0
 800ba50:	601a      	str	r2, [r3, #0]
 800ba52:	1e3b      	subs	r3, r7, #0
 800ba54:	bfbb      	ittet	lt
 800ba56:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ba5a:	9301      	strlt	r3, [sp, #4]
 800ba5c:	2300      	movge	r3, #0
 800ba5e:	2201      	movlt	r2, #1
 800ba60:	bfac      	ite	ge
 800ba62:	f8c8 3000 	strge.w	r3, [r8]
 800ba66:	f8c8 2000 	strlt.w	r2, [r8]
 800ba6a:	4baf      	ldr	r3, [pc, #700]	; (800bd28 <_dtoa_r+0x320>)
 800ba6c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ba70:	ea33 0308 	bics.w	r3, r3, r8
 800ba74:	d114      	bne.n	800baa0 <_dtoa_r+0x98>
 800ba76:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ba78:	f242 730f 	movw	r3, #9999	; 0x270f
 800ba7c:	6013      	str	r3, [r2, #0]
 800ba7e:	9b00      	ldr	r3, [sp, #0]
 800ba80:	b923      	cbnz	r3, 800ba8c <_dtoa_r+0x84>
 800ba82:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800ba86:	2800      	cmp	r0, #0
 800ba88:	f000 8542 	beq.w	800c510 <_dtoa_r+0xb08>
 800ba8c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ba8e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800bd3c <_dtoa_r+0x334>
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	f000 8544 	beq.w	800c520 <_dtoa_r+0xb18>
 800ba98:	f10b 0303 	add.w	r3, fp, #3
 800ba9c:	f000 bd3e 	b.w	800c51c <_dtoa_r+0xb14>
 800baa0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800baa4:	2200      	movs	r2, #0
 800baa6:	2300      	movs	r3, #0
 800baa8:	4630      	mov	r0, r6
 800baaa:	4639      	mov	r1, r7
 800baac:	f7f5 f814 	bl	8000ad8 <__aeabi_dcmpeq>
 800bab0:	4681      	mov	r9, r0
 800bab2:	b168      	cbz	r0, 800bad0 <_dtoa_r+0xc8>
 800bab4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bab6:	2301      	movs	r3, #1
 800bab8:	6013      	str	r3, [r2, #0]
 800baba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800babc:	2b00      	cmp	r3, #0
 800babe:	f000 8524 	beq.w	800c50a <_dtoa_r+0xb02>
 800bac2:	4b9a      	ldr	r3, [pc, #616]	; (800bd2c <_dtoa_r+0x324>)
 800bac4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bac6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800baca:	6013      	str	r3, [r2, #0]
 800bacc:	f000 bd28 	b.w	800c520 <_dtoa_r+0xb18>
 800bad0:	aa14      	add	r2, sp, #80	; 0x50
 800bad2:	a915      	add	r1, sp, #84	; 0x54
 800bad4:	ec47 6b10 	vmov	d0, r6, r7
 800bad8:	4620      	mov	r0, r4
 800bada:	f000 ffea 	bl	800cab2 <__d2b>
 800bade:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800bae2:	9004      	str	r0, [sp, #16]
 800bae4:	2d00      	cmp	r5, #0
 800bae6:	d07c      	beq.n	800bbe2 <_dtoa_r+0x1da>
 800bae8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800baec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800baf0:	46b2      	mov	sl, r6
 800baf2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800baf6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bafa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800bafe:	2200      	movs	r2, #0
 800bb00:	4b8b      	ldr	r3, [pc, #556]	; (800bd30 <_dtoa_r+0x328>)
 800bb02:	4650      	mov	r0, sl
 800bb04:	4659      	mov	r1, fp
 800bb06:	f7f4 fbc7 	bl	8000298 <__aeabi_dsub>
 800bb0a:	a381      	add	r3, pc, #516	; (adr r3, 800bd10 <_dtoa_r+0x308>)
 800bb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb10:	f7f4 fd7a 	bl	8000608 <__aeabi_dmul>
 800bb14:	a380      	add	r3, pc, #512	; (adr r3, 800bd18 <_dtoa_r+0x310>)
 800bb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb1a:	f7f4 fbbf 	bl	800029c <__adddf3>
 800bb1e:	4606      	mov	r6, r0
 800bb20:	4628      	mov	r0, r5
 800bb22:	460f      	mov	r7, r1
 800bb24:	f7f4 fd06 	bl	8000534 <__aeabi_i2d>
 800bb28:	a37d      	add	r3, pc, #500	; (adr r3, 800bd20 <_dtoa_r+0x318>)
 800bb2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2e:	f7f4 fd6b 	bl	8000608 <__aeabi_dmul>
 800bb32:	4602      	mov	r2, r0
 800bb34:	460b      	mov	r3, r1
 800bb36:	4630      	mov	r0, r6
 800bb38:	4639      	mov	r1, r7
 800bb3a:	f7f4 fbaf 	bl	800029c <__adddf3>
 800bb3e:	4606      	mov	r6, r0
 800bb40:	460f      	mov	r7, r1
 800bb42:	f7f5 f811 	bl	8000b68 <__aeabi_d2iz>
 800bb46:	2200      	movs	r2, #0
 800bb48:	4682      	mov	sl, r0
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	4630      	mov	r0, r6
 800bb4e:	4639      	mov	r1, r7
 800bb50:	f7f4 ffcc 	bl	8000aec <__aeabi_dcmplt>
 800bb54:	b148      	cbz	r0, 800bb6a <_dtoa_r+0x162>
 800bb56:	4650      	mov	r0, sl
 800bb58:	f7f4 fcec 	bl	8000534 <__aeabi_i2d>
 800bb5c:	4632      	mov	r2, r6
 800bb5e:	463b      	mov	r3, r7
 800bb60:	f7f4 ffba 	bl	8000ad8 <__aeabi_dcmpeq>
 800bb64:	b908      	cbnz	r0, 800bb6a <_dtoa_r+0x162>
 800bb66:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bb6a:	f1ba 0f16 	cmp.w	sl, #22
 800bb6e:	d859      	bhi.n	800bc24 <_dtoa_r+0x21c>
 800bb70:	4970      	ldr	r1, [pc, #448]	; (800bd34 <_dtoa_r+0x32c>)
 800bb72:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bb76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb7e:	f7f4 ffd3 	bl	8000b28 <__aeabi_dcmpgt>
 800bb82:	2800      	cmp	r0, #0
 800bb84:	d050      	beq.n	800bc28 <_dtoa_r+0x220>
 800bb86:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800bb8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb90:	1b5d      	subs	r5, r3, r5
 800bb92:	f1b5 0801 	subs.w	r8, r5, #1
 800bb96:	bf49      	itett	mi
 800bb98:	f1c5 0301 	rsbmi	r3, r5, #1
 800bb9c:	2300      	movpl	r3, #0
 800bb9e:	9305      	strmi	r3, [sp, #20]
 800bba0:	f04f 0800 	movmi.w	r8, #0
 800bba4:	bf58      	it	pl
 800bba6:	9305      	strpl	r3, [sp, #20]
 800bba8:	f1ba 0f00 	cmp.w	sl, #0
 800bbac:	db3e      	blt.n	800bc2c <_dtoa_r+0x224>
 800bbae:	2300      	movs	r3, #0
 800bbb0:	44d0      	add	r8, sl
 800bbb2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800bbb6:	9307      	str	r3, [sp, #28]
 800bbb8:	9b06      	ldr	r3, [sp, #24]
 800bbba:	2b09      	cmp	r3, #9
 800bbbc:	f200 8090 	bhi.w	800bce0 <_dtoa_r+0x2d8>
 800bbc0:	2b05      	cmp	r3, #5
 800bbc2:	bfc4      	itt	gt
 800bbc4:	3b04      	subgt	r3, #4
 800bbc6:	9306      	strgt	r3, [sp, #24]
 800bbc8:	9b06      	ldr	r3, [sp, #24]
 800bbca:	f1a3 0302 	sub.w	r3, r3, #2
 800bbce:	bfcc      	ite	gt
 800bbd0:	2500      	movgt	r5, #0
 800bbd2:	2501      	movle	r5, #1
 800bbd4:	2b03      	cmp	r3, #3
 800bbd6:	f200 808f 	bhi.w	800bcf8 <_dtoa_r+0x2f0>
 800bbda:	e8df f003 	tbb	[pc, r3]
 800bbde:	7f7d      	.short	0x7f7d
 800bbe0:	7131      	.short	0x7131
 800bbe2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800bbe6:	441d      	add	r5, r3
 800bbe8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800bbec:	2820      	cmp	r0, #32
 800bbee:	dd13      	ble.n	800bc18 <_dtoa_r+0x210>
 800bbf0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800bbf4:	9b00      	ldr	r3, [sp, #0]
 800bbf6:	fa08 f800 	lsl.w	r8, r8, r0
 800bbfa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800bbfe:	fa23 f000 	lsr.w	r0, r3, r0
 800bc02:	ea48 0000 	orr.w	r0, r8, r0
 800bc06:	f7f4 fc85 	bl	8000514 <__aeabi_ui2d>
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	4682      	mov	sl, r0
 800bc0e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800bc12:	3d01      	subs	r5, #1
 800bc14:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc16:	e772      	b.n	800bafe <_dtoa_r+0xf6>
 800bc18:	9b00      	ldr	r3, [sp, #0]
 800bc1a:	f1c0 0020 	rsb	r0, r0, #32
 800bc1e:	fa03 f000 	lsl.w	r0, r3, r0
 800bc22:	e7f0      	b.n	800bc06 <_dtoa_r+0x1fe>
 800bc24:	2301      	movs	r3, #1
 800bc26:	e7b1      	b.n	800bb8c <_dtoa_r+0x184>
 800bc28:	900f      	str	r0, [sp, #60]	; 0x3c
 800bc2a:	e7b0      	b.n	800bb8e <_dtoa_r+0x186>
 800bc2c:	9b05      	ldr	r3, [sp, #20]
 800bc2e:	eba3 030a 	sub.w	r3, r3, sl
 800bc32:	9305      	str	r3, [sp, #20]
 800bc34:	f1ca 0300 	rsb	r3, sl, #0
 800bc38:	9307      	str	r3, [sp, #28]
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	930e      	str	r3, [sp, #56]	; 0x38
 800bc3e:	e7bb      	b.n	800bbb8 <_dtoa_r+0x1b0>
 800bc40:	2301      	movs	r3, #1
 800bc42:	930a      	str	r3, [sp, #40]	; 0x28
 800bc44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	dd59      	ble.n	800bcfe <_dtoa_r+0x2f6>
 800bc4a:	9302      	str	r3, [sp, #8]
 800bc4c:	4699      	mov	r9, r3
 800bc4e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bc50:	2200      	movs	r2, #0
 800bc52:	6072      	str	r2, [r6, #4]
 800bc54:	2204      	movs	r2, #4
 800bc56:	f102 0014 	add.w	r0, r2, #20
 800bc5a:	4298      	cmp	r0, r3
 800bc5c:	6871      	ldr	r1, [r6, #4]
 800bc5e:	d953      	bls.n	800bd08 <_dtoa_r+0x300>
 800bc60:	4620      	mov	r0, r4
 800bc62:	f000 fc99 	bl	800c598 <_Balloc>
 800bc66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc68:	6030      	str	r0, [r6, #0]
 800bc6a:	f1b9 0f0e 	cmp.w	r9, #14
 800bc6e:	f8d3 b000 	ldr.w	fp, [r3]
 800bc72:	f200 80e6 	bhi.w	800be42 <_dtoa_r+0x43a>
 800bc76:	2d00      	cmp	r5, #0
 800bc78:	f000 80e3 	beq.w	800be42 <_dtoa_r+0x43a>
 800bc7c:	ed9d 7b00 	vldr	d7, [sp]
 800bc80:	f1ba 0f00 	cmp.w	sl, #0
 800bc84:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800bc88:	dd74      	ble.n	800bd74 <_dtoa_r+0x36c>
 800bc8a:	4a2a      	ldr	r2, [pc, #168]	; (800bd34 <_dtoa_r+0x32c>)
 800bc8c:	f00a 030f 	and.w	r3, sl, #15
 800bc90:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bc94:	ed93 7b00 	vldr	d7, [r3]
 800bc98:	ea4f 162a 	mov.w	r6, sl, asr #4
 800bc9c:	06f0      	lsls	r0, r6, #27
 800bc9e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800bca2:	d565      	bpl.n	800bd70 <_dtoa_r+0x368>
 800bca4:	4b24      	ldr	r3, [pc, #144]	; (800bd38 <_dtoa_r+0x330>)
 800bca6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bcaa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bcae:	f7f4 fdd5 	bl	800085c <__aeabi_ddiv>
 800bcb2:	e9cd 0100 	strd	r0, r1, [sp]
 800bcb6:	f006 060f 	and.w	r6, r6, #15
 800bcba:	2503      	movs	r5, #3
 800bcbc:	4f1e      	ldr	r7, [pc, #120]	; (800bd38 <_dtoa_r+0x330>)
 800bcbe:	e04c      	b.n	800bd5a <_dtoa_r+0x352>
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	930a      	str	r3, [sp, #40]	; 0x28
 800bcc4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcc6:	4453      	add	r3, sl
 800bcc8:	f103 0901 	add.w	r9, r3, #1
 800bccc:	9302      	str	r3, [sp, #8]
 800bcce:	464b      	mov	r3, r9
 800bcd0:	2b01      	cmp	r3, #1
 800bcd2:	bfb8      	it	lt
 800bcd4:	2301      	movlt	r3, #1
 800bcd6:	e7ba      	b.n	800bc4e <_dtoa_r+0x246>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	e7b2      	b.n	800bc42 <_dtoa_r+0x23a>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	e7f0      	b.n	800bcc2 <_dtoa_r+0x2ba>
 800bce0:	2501      	movs	r5, #1
 800bce2:	2300      	movs	r3, #0
 800bce4:	9306      	str	r3, [sp, #24]
 800bce6:	950a      	str	r5, [sp, #40]	; 0x28
 800bce8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcec:	9302      	str	r3, [sp, #8]
 800bcee:	4699      	mov	r9, r3
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	2312      	movs	r3, #18
 800bcf4:	920b      	str	r2, [sp, #44]	; 0x2c
 800bcf6:	e7aa      	b.n	800bc4e <_dtoa_r+0x246>
 800bcf8:	2301      	movs	r3, #1
 800bcfa:	930a      	str	r3, [sp, #40]	; 0x28
 800bcfc:	e7f4      	b.n	800bce8 <_dtoa_r+0x2e0>
 800bcfe:	2301      	movs	r3, #1
 800bd00:	9302      	str	r3, [sp, #8]
 800bd02:	4699      	mov	r9, r3
 800bd04:	461a      	mov	r2, r3
 800bd06:	e7f5      	b.n	800bcf4 <_dtoa_r+0x2ec>
 800bd08:	3101      	adds	r1, #1
 800bd0a:	6071      	str	r1, [r6, #4]
 800bd0c:	0052      	lsls	r2, r2, #1
 800bd0e:	e7a2      	b.n	800bc56 <_dtoa_r+0x24e>
 800bd10:	636f4361 	.word	0x636f4361
 800bd14:	3fd287a7 	.word	0x3fd287a7
 800bd18:	8b60c8b3 	.word	0x8b60c8b3
 800bd1c:	3fc68a28 	.word	0x3fc68a28
 800bd20:	509f79fb 	.word	0x509f79fb
 800bd24:	3fd34413 	.word	0x3fd34413
 800bd28:	7ff00000 	.word	0x7ff00000
 800bd2c:	0800d789 	.word	0x0800d789
 800bd30:	3ff80000 	.word	0x3ff80000
 800bd34:	0800d7e8 	.word	0x0800d7e8
 800bd38:	0800d7c0 	.word	0x0800d7c0
 800bd3c:	0800d7b5 	.word	0x0800d7b5
 800bd40:	07f1      	lsls	r1, r6, #31
 800bd42:	d508      	bpl.n	800bd56 <_dtoa_r+0x34e>
 800bd44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bd48:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bd4c:	f7f4 fc5c 	bl	8000608 <__aeabi_dmul>
 800bd50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd54:	3501      	adds	r5, #1
 800bd56:	1076      	asrs	r6, r6, #1
 800bd58:	3708      	adds	r7, #8
 800bd5a:	2e00      	cmp	r6, #0
 800bd5c:	d1f0      	bne.n	800bd40 <_dtoa_r+0x338>
 800bd5e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bd62:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bd66:	f7f4 fd79 	bl	800085c <__aeabi_ddiv>
 800bd6a:	e9cd 0100 	strd	r0, r1, [sp]
 800bd6e:	e01a      	b.n	800bda6 <_dtoa_r+0x39e>
 800bd70:	2502      	movs	r5, #2
 800bd72:	e7a3      	b.n	800bcbc <_dtoa_r+0x2b4>
 800bd74:	f000 80a0 	beq.w	800beb8 <_dtoa_r+0x4b0>
 800bd78:	f1ca 0600 	rsb	r6, sl, #0
 800bd7c:	4b9f      	ldr	r3, [pc, #636]	; (800bffc <_dtoa_r+0x5f4>)
 800bd7e:	4fa0      	ldr	r7, [pc, #640]	; (800c000 <_dtoa_r+0x5f8>)
 800bd80:	f006 020f 	and.w	r2, r6, #15
 800bd84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800bd90:	f7f4 fc3a 	bl	8000608 <__aeabi_dmul>
 800bd94:	e9cd 0100 	strd	r0, r1, [sp]
 800bd98:	1136      	asrs	r6, r6, #4
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	2502      	movs	r5, #2
 800bd9e:	2e00      	cmp	r6, #0
 800bda0:	d17f      	bne.n	800bea2 <_dtoa_r+0x49a>
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1e1      	bne.n	800bd6a <_dtoa_r+0x362>
 800bda6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 8087 	beq.w	800bebc <_dtoa_r+0x4b4>
 800bdae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	4b93      	ldr	r3, [pc, #588]	; (800c004 <_dtoa_r+0x5fc>)
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	4639      	mov	r1, r7
 800bdba:	f7f4 fe97 	bl	8000aec <__aeabi_dcmplt>
 800bdbe:	2800      	cmp	r0, #0
 800bdc0:	d07c      	beq.n	800bebc <_dtoa_r+0x4b4>
 800bdc2:	f1b9 0f00 	cmp.w	r9, #0
 800bdc6:	d079      	beq.n	800bebc <_dtoa_r+0x4b4>
 800bdc8:	9b02      	ldr	r3, [sp, #8]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	dd35      	ble.n	800be3a <_dtoa_r+0x432>
 800bdce:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800bdd2:	9308      	str	r3, [sp, #32]
 800bdd4:	4639      	mov	r1, r7
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	4b8b      	ldr	r3, [pc, #556]	; (800c008 <_dtoa_r+0x600>)
 800bdda:	4630      	mov	r0, r6
 800bddc:	f7f4 fc14 	bl	8000608 <__aeabi_dmul>
 800bde0:	e9cd 0100 	strd	r0, r1, [sp]
 800bde4:	9f02      	ldr	r7, [sp, #8]
 800bde6:	3501      	adds	r5, #1
 800bde8:	4628      	mov	r0, r5
 800bdea:	f7f4 fba3 	bl	8000534 <__aeabi_i2d>
 800bdee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bdf2:	f7f4 fc09 	bl	8000608 <__aeabi_dmul>
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	4b84      	ldr	r3, [pc, #528]	; (800c00c <_dtoa_r+0x604>)
 800bdfa:	f7f4 fa4f 	bl	800029c <__adddf3>
 800bdfe:	4605      	mov	r5, r0
 800be00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800be04:	2f00      	cmp	r7, #0
 800be06:	d15d      	bne.n	800bec4 <_dtoa_r+0x4bc>
 800be08:	2200      	movs	r2, #0
 800be0a:	4b81      	ldr	r3, [pc, #516]	; (800c010 <_dtoa_r+0x608>)
 800be0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be10:	f7f4 fa42 	bl	8000298 <__aeabi_dsub>
 800be14:	462a      	mov	r2, r5
 800be16:	4633      	mov	r3, r6
 800be18:	e9cd 0100 	strd	r0, r1, [sp]
 800be1c:	f7f4 fe84 	bl	8000b28 <__aeabi_dcmpgt>
 800be20:	2800      	cmp	r0, #0
 800be22:	f040 8288 	bne.w	800c336 <_dtoa_r+0x92e>
 800be26:	462a      	mov	r2, r5
 800be28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800be2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be30:	f7f4 fe5c 	bl	8000aec <__aeabi_dcmplt>
 800be34:	2800      	cmp	r0, #0
 800be36:	f040 827c 	bne.w	800c332 <_dtoa_r+0x92a>
 800be3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800be3e:	e9cd 2300 	strd	r2, r3, [sp]
 800be42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800be44:	2b00      	cmp	r3, #0
 800be46:	f2c0 8150 	blt.w	800c0ea <_dtoa_r+0x6e2>
 800be4a:	f1ba 0f0e 	cmp.w	sl, #14
 800be4e:	f300 814c 	bgt.w	800c0ea <_dtoa_r+0x6e2>
 800be52:	4b6a      	ldr	r3, [pc, #424]	; (800bffc <_dtoa_r+0x5f4>)
 800be54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800be58:	ed93 7b00 	vldr	d7, [r3]
 800be5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800be5e:	2b00      	cmp	r3, #0
 800be60:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be64:	f280 80d8 	bge.w	800c018 <_dtoa_r+0x610>
 800be68:	f1b9 0f00 	cmp.w	r9, #0
 800be6c:	f300 80d4 	bgt.w	800c018 <_dtoa_r+0x610>
 800be70:	f040 825e 	bne.w	800c330 <_dtoa_r+0x928>
 800be74:	2200      	movs	r2, #0
 800be76:	4b66      	ldr	r3, [pc, #408]	; (800c010 <_dtoa_r+0x608>)
 800be78:	ec51 0b17 	vmov	r0, r1, d7
 800be7c:	f7f4 fbc4 	bl	8000608 <__aeabi_dmul>
 800be80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be84:	f7f4 fe46 	bl	8000b14 <__aeabi_dcmpge>
 800be88:	464f      	mov	r7, r9
 800be8a:	464e      	mov	r6, r9
 800be8c:	2800      	cmp	r0, #0
 800be8e:	f040 8234 	bne.w	800c2fa <_dtoa_r+0x8f2>
 800be92:	2331      	movs	r3, #49	; 0x31
 800be94:	f10b 0501 	add.w	r5, fp, #1
 800be98:	f88b 3000 	strb.w	r3, [fp]
 800be9c:	f10a 0a01 	add.w	sl, sl, #1
 800bea0:	e22f      	b.n	800c302 <_dtoa_r+0x8fa>
 800bea2:	07f2      	lsls	r2, r6, #31
 800bea4:	d505      	bpl.n	800beb2 <_dtoa_r+0x4aa>
 800bea6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beaa:	f7f4 fbad 	bl	8000608 <__aeabi_dmul>
 800beae:	3501      	adds	r5, #1
 800beb0:	2301      	movs	r3, #1
 800beb2:	1076      	asrs	r6, r6, #1
 800beb4:	3708      	adds	r7, #8
 800beb6:	e772      	b.n	800bd9e <_dtoa_r+0x396>
 800beb8:	2502      	movs	r5, #2
 800beba:	e774      	b.n	800bda6 <_dtoa_r+0x39e>
 800bebc:	f8cd a020 	str.w	sl, [sp, #32]
 800bec0:	464f      	mov	r7, r9
 800bec2:	e791      	b.n	800bde8 <_dtoa_r+0x3e0>
 800bec4:	4b4d      	ldr	r3, [pc, #308]	; (800bffc <_dtoa_r+0x5f4>)
 800bec6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800beca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800bece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d047      	beq.n	800bf64 <_dtoa_r+0x55c>
 800bed4:	4602      	mov	r2, r0
 800bed6:	460b      	mov	r3, r1
 800bed8:	2000      	movs	r0, #0
 800beda:	494e      	ldr	r1, [pc, #312]	; (800c014 <_dtoa_r+0x60c>)
 800bedc:	f7f4 fcbe 	bl	800085c <__aeabi_ddiv>
 800bee0:	462a      	mov	r2, r5
 800bee2:	4633      	mov	r3, r6
 800bee4:	f7f4 f9d8 	bl	8000298 <__aeabi_dsub>
 800bee8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800beec:	465d      	mov	r5, fp
 800beee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bef2:	f7f4 fe39 	bl	8000b68 <__aeabi_d2iz>
 800bef6:	4606      	mov	r6, r0
 800bef8:	f7f4 fb1c 	bl	8000534 <__aeabi_i2d>
 800befc:	4602      	mov	r2, r0
 800befe:	460b      	mov	r3, r1
 800bf00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf04:	f7f4 f9c8 	bl	8000298 <__aeabi_dsub>
 800bf08:	3630      	adds	r6, #48	; 0x30
 800bf0a:	f805 6b01 	strb.w	r6, [r5], #1
 800bf0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bf12:	e9cd 0100 	strd	r0, r1, [sp]
 800bf16:	f7f4 fde9 	bl	8000aec <__aeabi_dcmplt>
 800bf1a:	2800      	cmp	r0, #0
 800bf1c:	d163      	bne.n	800bfe6 <_dtoa_r+0x5de>
 800bf1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf22:	2000      	movs	r0, #0
 800bf24:	4937      	ldr	r1, [pc, #220]	; (800c004 <_dtoa_r+0x5fc>)
 800bf26:	f7f4 f9b7 	bl	8000298 <__aeabi_dsub>
 800bf2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bf2e:	f7f4 fddd 	bl	8000aec <__aeabi_dcmplt>
 800bf32:	2800      	cmp	r0, #0
 800bf34:	f040 80b7 	bne.w	800c0a6 <_dtoa_r+0x69e>
 800bf38:	eba5 030b 	sub.w	r3, r5, fp
 800bf3c:	429f      	cmp	r7, r3
 800bf3e:	f77f af7c 	ble.w	800be3a <_dtoa_r+0x432>
 800bf42:	2200      	movs	r2, #0
 800bf44:	4b30      	ldr	r3, [pc, #192]	; (800c008 <_dtoa_r+0x600>)
 800bf46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf4a:	f7f4 fb5d 	bl	8000608 <__aeabi_dmul>
 800bf4e:	2200      	movs	r2, #0
 800bf50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bf54:	4b2c      	ldr	r3, [pc, #176]	; (800c008 <_dtoa_r+0x600>)
 800bf56:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf5a:	f7f4 fb55 	bl	8000608 <__aeabi_dmul>
 800bf5e:	e9cd 0100 	strd	r0, r1, [sp]
 800bf62:	e7c4      	b.n	800beee <_dtoa_r+0x4e6>
 800bf64:	462a      	mov	r2, r5
 800bf66:	4633      	mov	r3, r6
 800bf68:	f7f4 fb4e 	bl	8000608 <__aeabi_dmul>
 800bf6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800bf70:	eb0b 0507 	add.w	r5, fp, r7
 800bf74:	465e      	mov	r6, fp
 800bf76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf7a:	f7f4 fdf5 	bl	8000b68 <__aeabi_d2iz>
 800bf7e:	4607      	mov	r7, r0
 800bf80:	f7f4 fad8 	bl	8000534 <__aeabi_i2d>
 800bf84:	3730      	adds	r7, #48	; 0x30
 800bf86:	4602      	mov	r2, r0
 800bf88:	460b      	mov	r3, r1
 800bf8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf8e:	f7f4 f983 	bl	8000298 <__aeabi_dsub>
 800bf92:	f806 7b01 	strb.w	r7, [r6], #1
 800bf96:	42ae      	cmp	r6, r5
 800bf98:	e9cd 0100 	strd	r0, r1, [sp]
 800bf9c:	f04f 0200 	mov.w	r2, #0
 800bfa0:	d126      	bne.n	800bff0 <_dtoa_r+0x5e8>
 800bfa2:	4b1c      	ldr	r3, [pc, #112]	; (800c014 <_dtoa_r+0x60c>)
 800bfa4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bfa8:	f7f4 f978 	bl	800029c <__adddf3>
 800bfac:	4602      	mov	r2, r0
 800bfae:	460b      	mov	r3, r1
 800bfb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfb4:	f7f4 fdb8 	bl	8000b28 <__aeabi_dcmpgt>
 800bfb8:	2800      	cmp	r0, #0
 800bfba:	d174      	bne.n	800c0a6 <_dtoa_r+0x69e>
 800bfbc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	4914      	ldr	r1, [pc, #80]	; (800c014 <_dtoa_r+0x60c>)
 800bfc4:	f7f4 f968 	bl	8000298 <__aeabi_dsub>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	460b      	mov	r3, r1
 800bfcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfd0:	f7f4 fd8c 	bl	8000aec <__aeabi_dcmplt>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	f43f af30 	beq.w	800be3a <_dtoa_r+0x432>
 800bfda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bfde:	2b30      	cmp	r3, #48	; 0x30
 800bfe0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800bfe4:	d002      	beq.n	800bfec <_dtoa_r+0x5e4>
 800bfe6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800bfea:	e04a      	b.n	800c082 <_dtoa_r+0x67a>
 800bfec:	4615      	mov	r5, r2
 800bfee:	e7f4      	b.n	800bfda <_dtoa_r+0x5d2>
 800bff0:	4b05      	ldr	r3, [pc, #20]	; (800c008 <_dtoa_r+0x600>)
 800bff2:	f7f4 fb09 	bl	8000608 <__aeabi_dmul>
 800bff6:	e9cd 0100 	strd	r0, r1, [sp]
 800bffa:	e7bc      	b.n	800bf76 <_dtoa_r+0x56e>
 800bffc:	0800d7e8 	.word	0x0800d7e8
 800c000:	0800d7c0 	.word	0x0800d7c0
 800c004:	3ff00000 	.word	0x3ff00000
 800c008:	40240000 	.word	0x40240000
 800c00c:	401c0000 	.word	0x401c0000
 800c010:	40140000 	.word	0x40140000
 800c014:	3fe00000 	.word	0x3fe00000
 800c018:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c01c:	465d      	mov	r5, fp
 800c01e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c022:	4630      	mov	r0, r6
 800c024:	4639      	mov	r1, r7
 800c026:	f7f4 fc19 	bl	800085c <__aeabi_ddiv>
 800c02a:	f7f4 fd9d 	bl	8000b68 <__aeabi_d2iz>
 800c02e:	4680      	mov	r8, r0
 800c030:	f7f4 fa80 	bl	8000534 <__aeabi_i2d>
 800c034:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c038:	f7f4 fae6 	bl	8000608 <__aeabi_dmul>
 800c03c:	4602      	mov	r2, r0
 800c03e:	460b      	mov	r3, r1
 800c040:	4630      	mov	r0, r6
 800c042:	4639      	mov	r1, r7
 800c044:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c048:	f7f4 f926 	bl	8000298 <__aeabi_dsub>
 800c04c:	f805 6b01 	strb.w	r6, [r5], #1
 800c050:	eba5 060b 	sub.w	r6, r5, fp
 800c054:	45b1      	cmp	r9, r6
 800c056:	4602      	mov	r2, r0
 800c058:	460b      	mov	r3, r1
 800c05a:	d139      	bne.n	800c0d0 <_dtoa_r+0x6c8>
 800c05c:	f7f4 f91e 	bl	800029c <__adddf3>
 800c060:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c064:	4606      	mov	r6, r0
 800c066:	460f      	mov	r7, r1
 800c068:	f7f4 fd5e 	bl	8000b28 <__aeabi_dcmpgt>
 800c06c:	b9c8      	cbnz	r0, 800c0a2 <_dtoa_r+0x69a>
 800c06e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c072:	4630      	mov	r0, r6
 800c074:	4639      	mov	r1, r7
 800c076:	f7f4 fd2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800c07a:	b110      	cbz	r0, 800c082 <_dtoa_r+0x67a>
 800c07c:	f018 0f01 	tst.w	r8, #1
 800c080:	d10f      	bne.n	800c0a2 <_dtoa_r+0x69a>
 800c082:	9904      	ldr	r1, [sp, #16]
 800c084:	4620      	mov	r0, r4
 800c086:	f000 fabb 	bl	800c600 <_Bfree>
 800c08a:	2300      	movs	r3, #0
 800c08c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c08e:	702b      	strb	r3, [r5, #0]
 800c090:	f10a 0301 	add.w	r3, sl, #1
 800c094:	6013      	str	r3, [r2, #0]
 800c096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c098:	2b00      	cmp	r3, #0
 800c09a:	f000 8241 	beq.w	800c520 <_dtoa_r+0xb18>
 800c09e:	601d      	str	r5, [r3, #0]
 800c0a0:	e23e      	b.n	800c520 <_dtoa_r+0xb18>
 800c0a2:	f8cd a020 	str.w	sl, [sp, #32]
 800c0a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c0aa:	2a39      	cmp	r2, #57	; 0x39
 800c0ac:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800c0b0:	d108      	bne.n	800c0c4 <_dtoa_r+0x6bc>
 800c0b2:	459b      	cmp	fp, r3
 800c0b4:	d10a      	bne.n	800c0cc <_dtoa_r+0x6c4>
 800c0b6:	9b08      	ldr	r3, [sp, #32]
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	9308      	str	r3, [sp, #32]
 800c0bc:	2330      	movs	r3, #48	; 0x30
 800c0be:	f88b 3000 	strb.w	r3, [fp]
 800c0c2:	465b      	mov	r3, fp
 800c0c4:	781a      	ldrb	r2, [r3, #0]
 800c0c6:	3201      	adds	r2, #1
 800c0c8:	701a      	strb	r2, [r3, #0]
 800c0ca:	e78c      	b.n	800bfe6 <_dtoa_r+0x5de>
 800c0cc:	461d      	mov	r5, r3
 800c0ce:	e7ea      	b.n	800c0a6 <_dtoa_r+0x69e>
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	4b9b      	ldr	r3, [pc, #620]	; (800c340 <_dtoa_r+0x938>)
 800c0d4:	f7f4 fa98 	bl	8000608 <__aeabi_dmul>
 800c0d8:	2200      	movs	r2, #0
 800c0da:	2300      	movs	r3, #0
 800c0dc:	4606      	mov	r6, r0
 800c0de:	460f      	mov	r7, r1
 800c0e0:	f7f4 fcfa 	bl	8000ad8 <__aeabi_dcmpeq>
 800c0e4:	2800      	cmp	r0, #0
 800c0e6:	d09a      	beq.n	800c01e <_dtoa_r+0x616>
 800c0e8:	e7cb      	b.n	800c082 <_dtoa_r+0x67a>
 800c0ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0ec:	2a00      	cmp	r2, #0
 800c0ee:	f000 808b 	beq.w	800c208 <_dtoa_r+0x800>
 800c0f2:	9a06      	ldr	r2, [sp, #24]
 800c0f4:	2a01      	cmp	r2, #1
 800c0f6:	dc6e      	bgt.n	800c1d6 <_dtoa_r+0x7ce>
 800c0f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c0fa:	2a00      	cmp	r2, #0
 800c0fc:	d067      	beq.n	800c1ce <_dtoa_r+0x7c6>
 800c0fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c102:	9f07      	ldr	r7, [sp, #28]
 800c104:	9d05      	ldr	r5, [sp, #20]
 800c106:	9a05      	ldr	r2, [sp, #20]
 800c108:	2101      	movs	r1, #1
 800c10a:	441a      	add	r2, r3
 800c10c:	4620      	mov	r0, r4
 800c10e:	9205      	str	r2, [sp, #20]
 800c110:	4498      	add	r8, r3
 800c112:	f000 fb15 	bl	800c740 <__i2b>
 800c116:	4606      	mov	r6, r0
 800c118:	2d00      	cmp	r5, #0
 800c11a:	dd0c      	ble.n	800c136 <_dtoa_r+0x72e>
 800c11c:	f1b8 0f00 	cmp.w	r8, #0
 800c120:	dd09      	ble.n	800c136 <_dtoa_r+0x72e>
 800c122:	4545      	cmp	r5, r8
 800c124:	9a05      	ldr	r2, [sp, #20]
 800c126:	462b      	mov	r3, r5
 800c128:	bfa8      	it	ge
 800c12a:	4643      	movge	r3, r8
 800c12c:	1ad2      	subs	r2, r2, r3
 800c12e:	9205      	str	r2, [sp, #20]
 800c130:	1aed      	subs	r5, r5, r3
 800c132:	eba8 0803 	sub.w	r8, r8, r3
 800c136:	9b07      	ldr	r3, [sp, #28]
 800c138:	b1eb      	cbz	r3, 800c176 <_dtoa_r+0x76e>
 800c13a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d067      	beq.n	800c210 <_dtoa_r+0x808>
 800c140:	b18f      	cbz	r7, 800c166 <_dtoa_r+0x75e>
 800c142:	4631      	mov	r1, r6
 800c144:	463a      	mov	r2, r7
 800c146:	4620      	mov	r0, r4
 800c148:	f000 fb9a 	bl	800c880 <__pow5mult>
 800c14c:	9a04      	ldr	r2, [sp, #16]
 800c14e:	4601      	mov	r1, r0
 800c150:	4606      	mov	r6, r0
 800c152:	4620      	mov	r0, r4
 800c154:	f000 fafd 	bl	800c752 <__multiply>
 800c158:	9904      	ldr	r1, [sp, #16]
 800c15a:	9008      	str	r0, [sp, #32]
 800c15c:	4620      	mov	r0, r4
 800c15e:	f000 fa4f 	bl	800c600 <_Bfree>
 800c162:	9b08      	ldr	r3, [sp, #32]
 800c164:	9304      	str	r3, [sp, #16]
 800c166:	9b07      	ldr	r3, [sp, #28]
 800c168:	1bda      	subs	r2, r3, r7
 800c16a:	d004      	beq.n	800c176 <_dtoa_r+0x76e>
 800c16c:	9904      	ldr	r1, [sp, #16]
 800c16e:	4620      	mov	r0, r4
 800c170:	f000 fb86 	bl	800c880 <__pow5mult>
 800c174:	9004      	str	r0, [sp, #16]
 800c176:	2101      	movs	r1, #1
 800c178:	4620      	mov	r0, r4
 800c17a:	f000 fae1 	bl	800c740 <__i2b>
 800c17e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c180:	4607      	mov	r7, r0
 800c182:	2b00      	cmp	r3, #0
 800c184:	f000 81d0 	beq.w	800c528 <_dtoa_r+0xb20>
 800c188:	461a      	mov	r2, r3
 800c18a:	4601      	mov	r1, r0
 800c18c:	4620      	mov	r0, r4
 800c18e:	f000 fb77 	bl	800c880 <__pow5mult>
 800c192:	9b06      	ldr	r3, [sp, #24]
 800c194:	2b01      	cmp	r3, #1
 800c196:	4607      	mov	r7, r0
 800c198:	dc40      	bgt.n	800c21c <_dtoa_r+0x814>
 800c19a:	9b00      	ldr	r3, [sp, #0]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d139      	bne.n	800c214 <_dtoa_r+0x80c>
 800c1a0:	9b01      	ldr	r3, [sp, #4]
 800c1a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d136      	bne.n	800c218 <_dtoa_r+0x810>
 800c1aa:	9b01      	ldr	r3, [sp, #4]
 800c1ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1b0:	0d1b      	lsrs	r3, r3, #20
 800c1b2:	051b      	lsls	r3, r3, #20
 800c1b4:	b12b      	cbz	r3, 800c1c2 <_dtoa_r+0x7ba>
 800c1b6:	9b05      	ldr	r3, [sp, #20]
 800c1b8:	3301      	adds	r3, #1
 800c1ba:	9305      	str	r3, [sp, #20]
 800c1bc:	f108 0801 	add.w	r8, r8, #1
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	9307      	str	r3, [sp, #28]
 800c1c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d12a      	bne.n	800c220 <_dtoa_r+0x818>
 800c1ca:	2001      	movs	r0, #1
 800c1cc:	e030      	b.n	800c230 <_dtoa_r+0x828>
 800c1ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c1d0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c1d4:	e795      	b.n	800c102 <_dtoa_r+0x6fa>
 800c1d6:	9b07      	ldr	r3, [sp, #28]
 800c1d8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800c1dc:	42bb      	cmp	r3, r7
 800c1de:	bfbf      	itttt	lt
 800c1e0:	9b07      	ldrlt	r3, [sp, #28]
 800c1e2:	9707      	strlt	r7, [sp, #28]
 800c1e4:	1afa      	sublt	r2, r7, r3
 800c1e6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800c1e8:	bfbb      	ittet	lt
 800c1ea:	189b      	addlt	r3, r3, r2
 800c1ec:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c1ee:	1bdf      	subge	r7, r3, r7
 800c1f0:	2700      	movlt	r7, #0
 800c1f2:	f1b9 0f00 	cmp.w	r9, #0
 800c1f6:	bfb5      	itete	lt
 800c1f8:	9b05      	ldrlt	r3, [sp, #20]
 800c1fa:	9d05      	ldrge	r5, [sp, #20]
 800c1fc:	eba3 0509 	sublt.w	r5, r3, r9
 800c200:	464b      	movge	r3, r9
 800c202:	bfb8      	it	lt
 800c204:	2300      	movlt	r3, #0
 800c206:	e77e      	b.n	800c106 <_dtoa_r+0x6fe>
 800c208:	9f07      	ldr	r7, [sp, #28]
 800c20a:	9d05      	ldr	r5, [sp, #20]
 800c20c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800c20e:	e783      	b.n	800c118 <_dtoa_r+0x710>
 800c210:	9a07      	ldr	r2, [sp, #28]
 800c212:	e7ab      	b.n	800c16c <_dtoa_r+0x764>
 800c214:	2300      	movs	r3, #0
 800c216:	e7d4      	b.n	800c1c2 <_dtoa_r+0x7ba>
 800c218:	9b00      	ldr	r3, [sp, #0]
 800c21a:	e7d2      	b.n	800c1c2 <_dtoa_r+0x7ba>
 800c21c:	2300      	movs	r3, #0
 800c21e:	9307      	str	r3, [sp, #28]
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800c226:	6918      	ldr	r0, [r3, #16]
 800c228:	f000 fa3c 	bl	800c6a4 <__hi0bits>
 800c22c:	f1c0 0020 	rsb	r0, r0, #32
 800c230:	4440      	add	r0, r8
 800c232:	f010 001f 	ands.w	r0, r0, #31
 800c236:	d047      	beq.n	800c2c8 <_dtoa_r+0x8c0>
 800c238:	f1c0 0320 	rsb	r3, r0, #32
 800c23c:	2b04      	cmp	r3, #4
 800c23e:	dd3b      	ble.n	800c2b8 <_dtoa_r+0x8b0>
 800c240:	9b05      	ldr	r3, [sp, #20]
 800c242:	f1c0 001c 	rsb	r0, r0, #28
 800c246:	4403      	add	r3, r0
 800c248:	9305      	str	r3, [sp, #20]
 800c24a:	4405      	add	r5, r0
 800c24c:	4480      	add	r8, r0
 800c24e:	9b05      	ldr	r3, [sp, #20]
 800c250:	2b00      	cmp	r3, #0
 800c252:	dd05      	ble.n	800c260 <_dtoa_r+0x858>
 800c254:	461a      	mov	r2, r3
 800c256:	9904      	ldr	r1, [sp, #16]
 800c258:	4620      	mov	r0, r4
 800c25a:	f000 fb5f 	bl	800c91c <__lshift>
 800c25e:	9004      	str	r0, [sp, #16]
 800c260:	f1b8 0f00 	cmp.w	r8, #0
 800c264:	dd05      	ble.n	800c272 <_dtoa_r+0x86a>
 800c266:	4639      	mov	r1, r7
 800c268:	4642      	mov	r2, r8
 800c26a:	4620      	mov	r0, r4
 800c26c:	f000 fb56 	bl	800c91c <__lshift>
 800c270:	4607      	mov	r7, r0
 800c272:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c274:	b353      	cbz	r3, 800c2cc <_dtoa_r+0x8c4>
 800c276:	4639      	mov	r1, r7
 800c278:	9804      	ldr	r0, [sp, #16]
 800c27a:	f000 fba3 	bl	800c9c4 <__mcmp>
 800c27e:	2800      	cmp	r0, #0
 800c280:	da24      	bge.n	800c2cc <_dtoa_r+0x8c4>
 800c282:	2300      	movs	r3, #0
 800c284:	220a      	movs	r2, #10
 800c286:	9904      	ldr	r1, [sp, #16]
 800c288:	4620      	mov	r0, r4
 800c28a:	f000 f9d0 	bl	800c62e <__multadd>
 800c28e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c290:	9004      	str	r0, [sp, #16]
 800c292:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800c296:	2b00      	cmp	r3, #0
 800c298:	f000 814d 	beq.w	800c536 <_dtoa_r+0xb2e>
 800c29c:	2300      	movs	r3, #0
 800c29e:	4631      	mov	r1, r6
 800c2a0:	220a      	movs	r2, #10
 800c2a2:	4620      	mov	r0, r4
 800c2a4:	f000 f9c3 	bl	800c62e <__multadd>
 800c2a8:	9b02      	ldr	r3, [sp, #8]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	4606      	mov	r6, r0
 800c2ae:	dc4f      	bgt.n	800c350 <_dtoa_r+0x948>
 800c2b0:	9b06      	ldr	r3, [sp, #24]
 800c2b2:	2b02      	cmp	r3, #2
 800c2b4:	dd4c      	ble.n	800c350 <_dtoa_r+0x948>
 800c2b6:	e011      	b.n	800c2dc <_dtoa_r+0x8d4>
 800c2b8:	d0c9      	beq.n	800c24e <_dtoa_r+0x846>
 800c2ba:	9a05      	ldr	r2, [sp, #20]
 800c2bc:	331c      	adds	r3, #28
 800c2be:	441a      	add	r2, r3
 800c2c0:	9205      	str	r2, [sp, #20]
 800c2c2:	441d      	add	r5, r3
 800c2c4:	4498      	add	r8, r3
 800c2c6:	e7c2      	b.n	800c24e <_dtoa_r+0x846>
 800c2c8:	4603      	mov	r3, r0
 800c2ca:	e7f6      	b.n	800c2ba <_dtoa_r+0x8b2>
 800c2cc:	f1b9 0f00 	cmp.w	r9, #0
 800c2d0:	dc38      	bgt.n	800c344 <_dtoa_r+0x93c>
 800c2d2:	9b06      	ldr	r3, [sp, #24]
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	dd35      	ble.n	800c344 <_dtoa_r+0x93c>
 800c2d8:	f8cd 9008 	str.w	r9, [sp, #8]
 800c2dc:	9b02      	ldr	r3, [sp, #8]
 800c2de:	b963      	cbnz	r3, 800c2fa <_dtoa_r+0x8f2>
 800c2e0:	4639      	mov	r1, r7
 800c2e2:	2205      	movs	r2, #5
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f000 f9a2 	bl	800c62e <__multadd>
 800c2ea:	4601      	mov	r1, r0
 800c2ec:	4607      	mov	r7, r0
 800c2ee:	9804      	ldr	r0, [sp, #16]
 800c2f0:	f000 fb68 	bl	800c9c4 <__mcmp>
 800c2f4:	2800      	cmp	r0, #0
 800c2f6:	f73f adcc 	bgt.w	800be92 <_dtoa_r+0x48a>
 800c2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2fc:	465d      	mov	r5, fp
 800c2fe:	ea6f 0a03 	mvn.w	sl, r3
 800c302:	f04f 0900 	mov.w	r9, #0
 800c306:	4639      	mov	r1, r7
 800c308:	4620      	mov	r0, r4
 800c30a:	f000 f979 	bl	800c600 <_Bfree>
 800c30e:	2e00      	cmp	r6, #0
 800c310:	f43f aeb7 	beq.w	800c082 <_dtoa_r+0x67a>
 800c314:	f1b9 0f00 	cmp.w	r9, #0
 800c318:	d005      	beq.n	800c326 <_dtoa_r+0x91e>
 800c31a:	45b1      	cmp	r9, r6
 800c31c:	d003      	beq.n	800c326 <_dtoa_r+0x91e>
 800c31e:	4649      	mov	r1, r9
 800c320:	4620      	mov	r0, r4
 800c322:	f000 f96d 	bl	800c600 <_Bfree>
 800c326:	4631      	mov	r1, r6
 800c328:	4620      	mov	r0, r4
 800c32a:	f000 f969 	bl	800c600 <_Bfree>
 800c32e:	e6a8      	b.n	800c082 <_dtoa_r+0x67a>
 800c330:	2700      	movs	r7, #0
 800c332:	463e      	mov	r6, r7
 800c334:	e7e1      	b.n	800c2fa <_dtoa_r+0x8f2>
 800c336:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c33a:	463e      	mov	r6, r7
 800c33c:	e5a9      	b.n	800be92 <_dtoa_r+0x48a>
 800c33e:	bf00      	nop
 800c340:	40240000 	.word	0x40240000
 800c344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c346:	f8cd 9008 	str.w	r9, [sp, #8]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	f000 80fa 	beq.w	800c544 <_dtoa_r+0xb3c>
 800c350:	2d00      	cmp	r5, #0
 800c352:	dd05      	ble.n	800c360 <_dtoa_r+0x958>
 800c354:	4631      	mov	r1, r6
 800c356:	462a      	mov	r2, r5
 800c358:	4620      	mov	r0, r4
 800c35a:	f000 fadf 	bl	800c91c <__lshift>
 800c35e:	4606      	mov	r6, r0
 800c360:	9b07      	ldr	r3, [sp, #28]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d04c      	beq.n	800c400 <_dtoa_r+0x9f8>
 800c366:	6871      	ldr	r1, [r6, #4]
 800c368:	4620      	mov	r0, r4
 800c36a:	f000 f915 	bl	800c598 <_Balloc>
 800c36e:	6932      	ldr	r2, [r6, #16]
 800c370:	3202      	adds	r2, #2
 800c372:	4605      	mov	r5, r0
 800c374:	0092      	lsls	r2, r2, #2
 800c376:	f106 010c 	add.w	r1, r6, #12
 800c37a:	300c      	adds	r0, #12
 800c37c:	f7fe fd10 	bl	800ada0 <memcpy>
 800c380:	2201      	movs	r2, #1
 800c382:	4629      	mov	r1, r5
 800c384:	4620      	mov	r0, r4
 800c386:	f000 fac9 	bl	800c91c <__lshift>
 800c38a:	9b00      	ldr	r3, [sp, #0]
 800c38c:	f8cd b014 	str.w	fp, [sp, #20]
 800c390:	f003 0301 	and.w	r3, r3, #1
 800c394:	46b1      	mov	r9, r6
 800c396:	9307      	str	r3, [sp, #28]
 800c398:	4606      	mov	r6, r0
 800c39a:	4639      	mov	r1, r7
 800c39c:	9804      	ldr	r0, [sp, #16]
 800c39e:	f7ff faa6 	bl	800b8ee <quorem>
 800c3a2:	4649      	mov	r1, r9
 800c3a4:	4605      	mov	r5, r0
 800c3a6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c3aa:	9804      	ldr	r0, [sp, #16]
 800c3ac:	f000 fb0a 	bl	800c9c4 <__mcmp>
 800c3b0:	4632      	mov	r2, r6
 800c3b2:	9000      	str	r0, [sp, #0]
 800c3b4:	4639      	mov	r1, r7
 800c3b6:	4620      	mov	r0, r4
 800c3b8:	f000 fb1e 	bl	800c9f8 <__mdiff>
 800c3bc:	68c3      	ldr	r3, [r0, #12]
 800c3be:	4602      	mov	r2, r0
 800c3c0:	bb03      	cbnz	r3, 800c404 <_dtoa_r+0x9fc>
 800c3c2:	4601      	mov	r1, r0
 800c3c4:	9008      	str	r0, [sp, #32]
 800c3c6:	9804      	ldr	r0, [sp, #16]
 800c3c8:	f000 fafc 	bl	800c9c4 <__mcmp>
 800c3cc:	9a08      	ldr	r2, [sp, #32]
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	4611      	mov	r1, r2
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	9308      	str	r3, [sp, #32]
 800c3d6:	f000 f913 	bl	800c600 <_Bfree>
 800c3da:	9b08      	ldr	r3, [sp, #32]
 800c3dc:	b9a3      	cbnz	r3, 800c408 <_dtoa_r+0xa00>
 800c3de:	9a06      	ldr	r2, [sp, #24]
 800c3e0:	b992      	cbnz	r2, 800c408 <_dtoa_r+0xa00>
 800c3e2:	9a07      	ldr	r2, [sp, #28]
 800c3e4:	b982      	cbnz	r2, 800c408 <_dtoa_r+0xa00>
 800c3e6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c3ea:	d029      	beq.n	800c440 <_dtoa_r+0xa38>
 800c3ec:	9b00      	ldr	r3, [sp, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	dd01      	ble.n	800c3f6 <_dtoa_r+0x9ee>
 800c3f2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800c3f6:	9b05      	ldr	r3, [sp, #20]
 800c3f8:	1c5d      	adds	r5, r3, #1
 800c3fa:	f883 8000 	strb.w	r8, [r3]
 800c3fe:	e782      	b.n	800c306 <_dtoa_r+0x8fe>
 800c400:	4630      	mov	r0, r6
 800c402:	e7c2      	b.n	800c38a <_dtoa_r+0x982>
 800c404:	2301      	movs	r3, #1
 800c406:	e7e3      	b.n	800c3d0 <_dtoa_r+0x9c8>
 800c408:	9a00      	ldr	r2, [sp, #0]
 800c40a:	2a00      	cmp	r2, #0
 800c40c:	db04      	blt.n	800c418 <_dtoa_r+0xa10>
 800c40e:	d125      	bne.n	800c45c <_dtoa_r+0xa54>
 800c410:	9a06      	ldr	r2, [sp, #24]
 800c412:	bb1a      	cbnz	r2, 800c45c <_dtoa_r+0xa54>
 800c414:	9a07      	ldr	r2, [sp, #28]
 800c416:	bb0a      	cbnz	r2, 800c45c <_dtoa_r+0xa54>
 800c418:	2b00      	cmp	r3, #0
 800c41a:	ddec      	ble.n	800c3f6 <_dtoa_r+0x9ee>
 800c41c:	2201      	movs	r2, #1
 800c41e:	9904      	ldr	r1, [sp, #16]
 800c420:	4620      	mov	r0, r4
 800c422:	f000 fa7b 	bl	800c91c <__lshift>
 800c426:	4639      	mov	r1, r7
 800c428:	9004      	str	r0, [sp, #16]
 800c42a:	f000 facb 	bl	800c9c4 <__mcmp>
 800c42e:	2800      	cmp	r0, #0
 800c430:	dc03      	bgt.n	800c43a <_dtoa_r+0xa32>
 800c432:	d1e0      	bne.n	800c3f6 <_dtoa_r+0x9ee>
 800c434:	f018 0f01 	tst.w	r8, #1
 800c438:	d0dd      	beq.n	800c3f6 <_dtoa_r+0x9ee>
 800c43a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c43e:	d1d8      	bne.n	800c3f2 <_dtoa_r+0x9ea>
 800c440:	9b05      	ldr	r3, [sp, #20]
 800c442:	9a05      	ldr	r2, [sp, #20]
 800c444:	1c5d      	adds	r5, r3, #1
 800c446:	2339      	movs	r3, #57	; 0x39
 800c448:	7013      	strb	r3, [r2, #0]
 800c44a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c44e:	2b39      	cmp	r3, #57	; 0x39
 800c450:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c454:	d04f      	beq.n	800c4f6 <_dtoa_r+0xaee>
 800c456:	3301      	adds	r3, #1
 800c458:	7013      	strb	r3, [r2, #0]
 800c45a:	e754      	b.n	800c306 <_dtoa_r+0x8fe>
 800c45c:	9a05      	ldr	r2, [sp, #20]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	f102 0501 	add.w	r5, r2, #1
 800c464:	dd06      	ble.n	800c474 <_dtoa_r+0xa6c>
 800c466:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800c46a:	d0e9      	beq.n	800c440 <_dtoa_r+0xa38>
 800c46c:	f108 0801 	add.w	r8, r8, #1
 800c470:	9b05      	ldr	r3, [sp, #20]
 800c472:	e7c2      	b.n	800c3fa <_dtoa_r+0x9f2>
 800c474:	9a02      	ldr	r2, [sp, #8]
 800c476:	f805 8c01 	strb.w	r8, [r5, #-1]
 800c47a:	eba5 030b 	sub.w	r3, r5, fp
 800c47e:	4293      	cmp	r3, r2
 800c480:	d021      	beq.n	800c4c6 <_dtoa_r+0xabe>
 800c482:	2300      	movs	r3, #0
 800c484:	220a      	movs	r2, #10
 800c486:	9904      	ldr	r1, [sp, #16]
 800c488:	4620      	mov	r0, r4
 800c48a:	f000 f8d0 	bl	800c62e <__multadd>
 800c48e:	45b1      	cmp	r9, r6
 800c490:	9004      	str	r0, [sp, #16]
 800c492:	f04f 0300 	mov.w	r3, #0
 800c496:	f04f 020a 	mov.w	r2, #10
 800c49a:	4649      	mov	r1, r9
 800c49c:	4620      	mov	r0, r4
 800c49e:	d105      	bne.n	800c4ac <_dtoa_r+0xaa4>
 800c4a0:	f000 f8c5 	bl	800c62e <__multadd>
 800c4a4:	4681      	mov	r9, r0
 800c4a6:	4606      	mov	r6, r0
 800c4a8:	9505      	str	r5, [sp, #20]
 800c4aa:	e776      	b.n	800c39a <_dtoa_r+0x992>
 800c4ac:	f000 f8bf 	bl	800c62e <__multadd>
 800c4b0:	4631      	mov	r1, r6
 800c4b2:	4681      	mov	r9, r0
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	220a      	movs	r2, #10
 800c4b8:	4620      	mov	r0, r4
 800c4ba:	f000 f8b8 	bl	800c62e <__multadd>
 800c4be:	4606      	mov	r6, r0
 800c4c0:	e7f2      	b.n	800c4a8 <_dtoa_r+0xaa0>
 800c4c2:	f04f 0900 	mov.w	r9, #0
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	9904      	ldr	r1, [sp, #16]
 800c4ca:	4620      	mov	r0, r4
 800c4cc:	f000 fa26 	bl	800c91c <__lshift>
 800c4d0:	4639      	mov	r1, r7
 800c4d2:	9004      	str	r0, [sp, #16]
 800c4d4:	f000 fa76 	bl	800c9c4 <__mcmp>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	dcb6      	bgt.n	800c44a <_dtoa_r+0xa42>
 800c4dc:	d102      	bne.n	800c4e4 <_dtoa_r+0xadc>
 800c4de:	f018 0f01 	tst.w	r8, #1
 800c4e2:	d1b2      	bne.n	800c44a <_dtoa_r+0xa42>
 800c4e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c4e8:	2b30      	cmp	r3, #48	; 0x30
 800c4ea:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800c4ee:	f47f af0a 	bne.w	800c306 <_dtoa_r+0x8fe>
 800c4f2:	4615      	mov	r5, r2
 800c4f4:	e7f6      	b.n	800c4e4 <_dtoa_r+0xadc>
 800c4f6:	4593      	cmp	fp, r2
 800c4f8:	d105      	bne.n	800c506 <_dtoa_r+0xafe>
 800c4fa:	2331      	movs	r3, #49	; 0x31
 800c4fc:	f10a 0a01 	add.w	sl, sl, #1
 800c500:	f88b 3000 	strb.w	r3, [fp]
 800c504:	e6ff      	b.n	800c306 <_dtoa_r+0x8fe>
 800c506:	4615      	mov	r5, r2
 800c508:	e79f      	b.n	800c44a <_dtoa_r+0xa42>
 800c50a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800c570 <_dtoa_r+0xb68>
 800c50e:	e007      	b.n	800c520 <_dtoa_r+0xb18>
 800c510:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c512:	f8df b060 	ldr.w	fp, [pc, #96]	; 800c574 <_dtoa_r+0xb6c>
 800c516:	b11b      	cbz	r3, 800c520 <_dtoa_r+0xb18>
 800c518:	f10b 0308 	add.w	r3, fp, #8
 800c51c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c51e:	6013      	str	r3, [r2, #0]
 800c520:	4658      	mov	r0, fp
 800c522:	b017      	add	sp, #92	; 0x5c
 800c524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c528:	9b06      	ldr	r3, [sp, #24]
 800c52a:	2b01      	cmp	r3, #1
 800c52c:	f77f ae35 	ble.w	800c19a <_dtoa_r+0x792>
 800c530:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c532:	9307      	str	r3, [sp, #28]
 800c534:	e649      	b.n	800c1ca <_dtoa_r+0x7c2>
 800c536:	9b02      	ldr	r3, [sp, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	dc03      	bgt.n	800c544 <_dtoa_r+0xb3c>
 800c53c:	9b06      	ldr	r3, [sp, #24]
 800c53e:	2b02      	cmp	r3, #2
 800c540:	f73f aecc 	bgt.w	800c2dc <_dtoa_r+0x8d4>
 800c544:	465d      	mov	r5, fp
 800c546:	4639      	mov	r1, r7
 800c548:	9804      	ldr	r0, [sp, #16]
 800c54a:	f7ff f9d0 	bl	800b8ee <quorem>
 800c54e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800c552:	f805 8b01 	strb.w	r8, [r5], #1
 800c556:	9a02      	ldr	r2, [sp, #8]
 800c558:	eba5 030b 	sub.w	r3, r5, fp
 800c55c:	429a      	cmp	r2, r3
 800c55e:	ddb0      	ble.n	800c4c2 <_dtoa_r+0xaba>
 800c560:	2300      	movs	r3, #0
 800c562:	220a      	movs	r2, #10
 800c564:	9904      	ldr	r1, [sp, #16]
 800c566:	4620      	mov	r0, r4
 800c568:	f000 f861 	bl	800c62e <__multadd>
 800c56c:	9004      	str	r0, [sp, #16]
 800c56e:	e7ea      	b.n	800c546 <_dtoa_r+0xb3e>
 800c570:	0800d788 	.word	0x0800d788
 800c574:	0800d7ac 	.word	0x0800d7ac

0800c578 <_localeconv_r>:
 800c578:	4b04      	ldr	r3, [pc, #16]	; (800c58c <_localeconv_r+0x14>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	6a18      	ldr	r0, [r3, #32]
 800c57e:	4b04      	ldr	r3, [pc, #16]	; (800c590 <_localeconv_r+0x18>)
 800c580:	2800      	cmp	r0, #0
 800c582:	bf08      	it	eq
 800c584:	4618      	moveq	r0, r3
 800c586:	30f0      	adds	r0, #240	; 0xf0
 800c588:	4770      	bx	lr
 800c58a:	bf00      	nop
 800c58c:	20000014 	.word	0x20000014
 800c590:	20000078 	.word	0x20000078

0800c594 <__malloc_lock>:
 800c594:	4770      	bx	lr

0800c596 <__malloc_unlock>:
 800c596:	4770      	bx	lr

0800c598 <_Balloc>:
 800c598:	b570      	push	{r4, r5, r6, lr}
 800c59a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c59c:	4604      	mov	r4, r0
 800c59e:	460e      	mov	r6, r1
 800c5a0:	b93d      	cbnz	r5, 800c5b2 <_Balloc+0x1a>
 800c5a2:	2010      	movs	r0, #16
 800c5a4:	f7fe fbec 	bl	800ad80 <malloc>
 800c5a8:	6260      	str	r0, [r4, #36]	; 0x24
 800c5aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c5ae:	6005      	str	r5, [r0, #0]
 800c5b0:	60c5      	str	r5, [r0, #12]
 800c5b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800c5b4:	68eb      	ldr	r3, [r5, #12]
 800c5b6:	b183      	cbz	r3, 800c5da <_Balloc+0x42>
 800c5b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800c5c0:	b9b8      	cbnz	r0, 800c5f2 <_Balloc+0x5a>
 800c5c2:	2101      	movs	r1, #1
 800c5c4:	fa01 f506 	lsl.w	r5, r1, r6
 800c5c8:	1d6a      	adds	r2, r5, #5
 800c5ca:	0092      	lsls	r2, r2, #2
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f000 fabf 	bl	800cb50 <_calloc_r>
 800c5d2:	b160      	cbz	r0, 800c5ee <_Balloc+0x56>
 800c5d4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800c5d8:	e00e      	b.n	800c5f8 <_Balloc+0x60>
 800c5da:	2221      	movs	r2, #33	; 0x21
 800c5dc:	2104      	movs	r1, #4
 800c5de:	4620      	mov	r0, r4
 800c5e0:	f000 fab6 	bl	800cb50 <_calloc_r>
 800c5e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5e6:	60e8      	str	r0, [r5, #12]
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1e4      	bne.n	800c5b8 <_Balloc+0x20>
 800c5ee:	2000      	movs	r0, #0
 800c5f0:	bd70      	pop	{r4, r5, r6, pc}
 800c5f2:	6802      	ldr	r2, [r0, #0]
 800c5f4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c5fe:	e7f7      	b.n	800c5f0 <_Balloc+0x58>

0800c600 <_Bfree>:
 800c600:	b570      	push	{r4, r5, r6, lr}
 800c602:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800c604:	4606      	mov	r6, r0
 800c606:	460d      	mov	r5, r1
 800c608:	b93c      	cbnz	r4, 800c61a <_Bfree+0x1a>
 800c60a:	2010      	movs	r0, #16
 800c60c:	f7fe fbb8 	bl	800ad80 <malloc>
 800c610:	6270      	str	r0, [r6, #36]	; 0x24
 800c612:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c616:	6004      	str	r4, [r0, #0]
 800c618:	60c4      	str	r4, [r0, #12]
 800c61a:	b13d      	cbz	r5, 800c62c <_Bfree+0x2c>
 800c61c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800c61e:	686a      	ldr	r2, [r5, #4]
 800c620:	68db      	ldr	r3, [r3, #12]
 800c622:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c626:	6029      	str	r1, [r5, #0]
 800c628:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800c62c:	bd70      	pop	{r4, r5, r6, pc}

0800c62e <__multadd>:
 800c62e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c632:	690d      	ldr	r5, [r1, #16]
 800c634:	461f      	mov	r7, r3
 800c636:	4606      	mov	r6, r0
 800c638:	460c      	mov	r4, r1
 800c63a:	f101 0c14 	add.w	ip, r1, #20
 800c63e:	2300      	movs	r3, #0
 800c640:	f8dc 0000 	ldr.w	r0, [ip]
 800c644:	b281      	uxth	r1, r0
 800c646:	fb02 7101 	mla	r1, r2, r1, r7
 800c64a:	0c0f      	lsrs	r7, r1, #16
 800c64c:	0c00      	lsrs	r0, r0, #16
 800c64e:	fb02 7000 	mla	r0, r2, r0, r7
 800c652:	b289      	uxth	r1, r1
 800c654:	3301      	adds	r3, #1
 800c656:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800c65a:	429d      	cmp	r5, r3
 800c65c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800c660:	f84c 1b04 	str.w	r1, [ip], #4
 800c664:	dcec      	bgt.n	800c640 <__multadd+0x12>
 800c666:	b1d7      	cbz	r7, 800c69e <__multadd+0x70>
 800c668:	68a3      	ldr	r3, [r4, #8]
 800c66a:	42ab      	cmp	r3, r5
 800c66c:	dc12      	bgt.n	800c694 <__multadd+0x66>
 800c66e:	6861      	ldr	r1, [r4, #4]
 800c670:	4630      	mov	r0, r6
 800c672:	3101      	adds	r1, #1
 800c674:	f7ff ff90 	bl	800c598 <_Balloc>
 800c678:	6922      	ldr	r2, [r4, #16]
 800c67a:	3202      	adds	r2, #2
 800c67c:	f104 010c 	add.w	r1, r4, #12
 800c680:	4680      	mov	r8, r0
 800c682:	0092      	lsls	r2, r2, #2
 800c684:	300c      	adds	r0, #12
 800c686:	f7fe fb8b 	bl	800ada0 <memcpy>
 800c68a:	4621      	mov	r1, r4
 800c68c:	4630      	mov	r0, r6
 800c68e:	f7ff ffb7 	bl	800c600 <_Bfree>
 800c692:	4644      	mov	r4, r8
 800c694:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c698:	3501      	adds	r5, #1
 800c69a:	615f      	str	r7, [r3, #20]
 800c69c:	6125      	str	r5, [r4, #16]
 800c69e:	4620      	mov	r0, r4
 800c6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c6a4 <__hi0bits>:
 800c6a4:	0c02      	lsrs	r2, r0, #16
 800c6a6:	0412      	lsls	r2, r2, #16
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	b9b2      	cbnz	r2, 800c6da <__hi0bits+0x36>
 800c6ac:	0403      	lsls	r3, r0, #16
 800c6ae:	2010      	movs	r0, #16
 800c6b0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800c6b4:	bf04      	itt	eq
 800c6b6:	021b      	lsleq	r3, r3, #8
 800c6b8:	3008      	addeq	r0, #8
 800c6ba:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800c6be:	bf04      	itt	eq
 800c6c0:	011b      	lsleq	r3, r3, #4
 800c6c2:	3004      	addeq	r0, #4
 800c6c4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800c6c8:	bf04      	itt	eq
 800c6ca:	009b      	lsleq	r3, r3, #2
 800c6cc:	3002      	addeq	r0, #2
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	db06      	blt.n	800c6e0 <__hi0bits+0x3c>
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	d503      	bpl.n	800c6de <__hi0bits+0x3a>
 800c6d6:	3001      	adds	r0, #1
 800c6d8:	4770      	bx	lr
 800c6da:	2000      	movs	r0, #0
 800c6dc:	e7e8      	b.n	800c6b0 <__hi0bits+0xc>
 800c6de:	2020      	movs	r0, #32
 800c6e0:	4770      	bx	lr

0800c6e2 <__lo0bits>:
 800c6e2:	6803      	ldr	r3, [r0, #0]
 800c6e4:	f013 0207 	ands.w	r2, r3, #7
 800c6e8:	4601      	mov	r1, r0
 800c6ea:	d00b      	beq.n	800c704 <__lo0bits+0x22>
 800c6ec:	07da      	lsls	r2, r3, #31
 800c6ee:	d423      	bmi.n	800c738 <__lo0bits+0x56>
 800c6f0:	0798      	lsls	r0, r3, #30
 800c6f2:	bf49      	itett	mi
 800c6f4:	085b      	lsrmi	r3, r3, #1
 800c6f6:	089b      	lsrpl	r3, r3, #2
 800c6f8:	2001      	movmi	r0, #1
 800c6fa:	600b      	strmi	r3, [r1, #0]
 800c6fc:	bf5c      	itt	pl
 800c6fe:	600b      	strpl	r3, [r1, #0]
 800c700:	2002      	movpl	r0, #2
 800c702:	4770      	bx	lr
 800c704:	b298      	uxth	r0, r3
 800c706:	b9a8      	cbnz	r0, 800c734 <__lo0bits+0x52>
 800c708:	0c1b      	lsrs	r3, r3, #16
 800c70a:	2010      	movs	r0, #16
 800c70c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c710:	bf04      	itt	eq
 800c712:	0a1b      	lsreq	r3, r3, #8
 800c714:	3008      	addeq	r0, #8
 800c716:	071a      	lsls	r2, r3, #28
 800c718:	bf04      	itt	eq
 800c71a:	091b      	lsreq	r3, r3, #4
 800c71c:	3004      	addeq	r0, #4
 800c71e:	079a      	lsls	r2, r3, #30
 800c720:	bf04      	itt	eq
 800c722:	089b      	lsreq	r3, r3, #2
 800c724:	3002      	addeq	r0, #2
 800c726:	07da      	lsls	r2, r3, #31
 800c728:	d402      	bmi.n	800c730 <__lo0bits+0x4e>
 800c72a:	085b      	lsrs	r3, r3, #1
 800c72c:	d006      	beq.n	800c73c <__lo0bits+0x5a>
 800c72e:	3001      	adds	r0, #1
 800c730:	600b      	str	r3, [r1, #0]
 800c732:	4770      	bx	lr
 800c734:	4610      	mov	r0, r2
 800c736:	e7e9      	b.n	800c70c <__lo0bits+0x2a>
 800c738:	2000      	movs	r0, #0
 800c73a:	4770      	bx	lr
 800c73c:	2020      	movs	r0, #32
 800c73e:	4770      	bx	lr

0800c740 <__i2b>:
 800c740:	b510      	push	{r4, lr}
 800c742:	460c      	mov	r4, r1
 800c744:	2101      	movs	r1, #1
 800c746:	f7ff ff27 	bl	800c598 <_Balloc>
 800c74a:	2201      	movs	r2, #1
 800c74c:	6144      	str	r4, [r0, #20]
 800c74e:	6102      	str	r2, [r0, #16]
 800c750:	bd10      	pop	{r4, pc}

0800c752 <__multiply>:
 800c752:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c756:	4614      	mov	r4, r2
 800c758:	690a      	ldr	r2, [r1, #16]
 800c75a:	6923      	ldr	r3, [r4, #16]
 800c75c:	429a      	cmp	r2, r3
 800c75e:	bfb8      	it	lt
 800c760:	460b      	movlt	r3, r1
 800c762:	4688      	mov	r8, r1
 800c764:	bfbc      	itt	lt
 800c766:	46a0      	movlt	r8, r4
 800c768:	461c      	movlt	r4, r3
 800c76a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c76e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c772:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c776:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c77a:	eb07 0609 	add.w	r6, r7, r9
 800c77e:	42b3      	cmp	r3, r6
 800c780:	bfb8      	it	lt
 800c782:	3101      	addlt	r1, #1
 800c784:	f7ff ff08 	bl	800c598 <_Balloc>
 800c788:	f100 0514 	add.w	r5, r0, #20
 800c78c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800c790:	462b      	mov	r3, r5
 800c792:	2200      	movs	r2, #0
 800c794:	4573      	cmp	r3, lr
 800c796:	d316      	bcc.n	800c7c6 <__multiply+0x74>
 800c798:	f104 0214 	add.w	r2, r4, #20
 800c79c:	f108 0114 	add.w	r1, r8, #20
 800c7a0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800c7a4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c7a8:	9300      	str	r3, [sp, #0]
 800c7aa:	9b00      	ldr	r3, [sp, #0]
 800c7ac:	9201      	str	r2, [sp, #4]
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d80c      	bhi.n	800c7cc <__multiply+0x7a>
 800c7b2:	2e00      	cmp	r6, #0
 800c7b4:	dd03      	ble.n	800c7be <__multiply+0x6c>
 800c7b6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d05d      	beq.n	800c87a <__multiply+0x128>
 800c7be:	6106      	str	r6, [r0, #16]
 800c7c0:	b003      	add	sp, #12
 800c7c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7c6:	f843 2b04 	str.w	r2, [r3], #4
 800c7ca:	e7e3      	b.n	800c794 <__multiply+0x42>
 800c7cc:	f8b2 b000 	ldrh.w	fp, [r2]
 800c7d0:	f1bb 0f00 	cmp.w	fp, #0
 800c7d4:	d023      	beq.n	800c81e <__multiply+0xcc>
 800c7d6:	4689      	mov	r9, r1
 800c7d8:	46ac      	mov	ip, r5
 800c7da:	f04f 0800 	mov.w	r8, #0
 800c7de:	f859 4b04 	ldr.w	r4, [r9], #4
 800c7e2:	f8dc a000 	ldr.w	sl, [ip]
 800c7e6:	b2a3      	uxth	r3, r4
 800c7e8:	fa1f fa8a 	uxth.w	sl, sl
 800c7ec:	fb0b a303 	mla	r3, fp, r3, sl
 800c7f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c7f4:	f8dc 4000 	ldr.w	r4, [ip]
 800c7f8:	4443      	add	r3, r8
 800c7fa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c7fe:	fb0b 840a 	mla	r4, fp, sl, r8
 800c802:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c806:	46e2      	mov	sl, ip
 800c808:	b29b      	uxth	r3, r3
 800c80a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c80e:	454f      	cmp	r7, r9
 800c810:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800c814:	f84a 3b04 	str.w	r3, [sl], #4
 800c818:	d82b      	bhi.n	800c872 <__multiply+0x120>
 800c81a:	f8cc 8004 	str.w	r8, [ip, #4]
 800c81e:	9b01      	ldr	r3, [sp, #4]
 800c820:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800c824:	3204      	adds	r2, #4
 800c826:	f1ba 0f00 	cmp.w	sl, #0
 800c82a:	d020      	beq.n	800c86e <__multiply+0x11c>
 800c82c:	682b      	ldr	r3, [r5, #0]
 800c82e:	4689      	mov	r9, r1
 800c830:	46a8      	mov	r8, r5
 800c832:	f04f 0b00 	mov.w	fp, #0
 800c836:	f8b9 c000 	ldrh.w	ip, [r9]
 800c83a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800c83e:	fb0a 440c 	mla	r4, sl, ip, r4
 800c842:	445c      	add	r4, fp
 800c844:	46c4      	mov	ip, r8
 800c846:	b29b      	uxth	r3, r3
 800c848:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c84c:	f84c 3b04 	str.w	r3, [ip], #4
 800c850:	f859 3b04 	ldr.w	r3, [r9], #4
 800c854:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800c858:	0c1b      	lsrs	r3, r3, #16
 800c85a:	fb0a b303 	mla	r3, sl, r3, fp
 800c85e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800c862:	454f      	cmp	r7, r9
 800c864:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800c868:	d805      	bhi.n	800c876 <__multiply+0x124>
 800c86a:	f8c8 3004 	str.w	r3, [r8, #4]
 800c86e:	3504      	adds	r5, #4
 800c870:	e79b      	b.n	800c7aa <__multiply+0x58>
 800c872:	46d4      	mov	ip, sl
 800c874:	e7b3      	b.n	800c7de <__multiply+0x8c>
 800c876:	46e0      	mov	r8, ip
 800c878:	e7dd      	b.n	800c836 <__multiply+0xe4>
 800c87a:	3e01      	subs	r6, #1
 800c87c:	e799      	b.n	800c7b2 <__multiply+0x60>
	...

0800c880 <__pow5mult>:
 800c880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c884:	4615      	mov	r5, r2
 800c886:	f012 0203 	ands.w	r2, r2, #3
 800c88a:	4606      	mov	r6, r0
 800c88c:	460f      	mov	r7, r1
 800c88e:	d007      	beq.n	800c8a0 <__pow5mult+0x20>
 800c890:	3a01      	subs	r2, #1
 800c892:	4c21      	ldr	r4, [pc, #132]	; (800c918 <__pow5mult+0x98>)
 800c894:	2300      	movs	r3, #0
 800c896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c89a:	f7ff fec8 	bl	800c62e <__multadd>
 800c89e:	4607      	mov	r7, r0
 800c8a0:	10ad      	asrs	r5, r5, #2
 800c8a2:	d035      	beq.n	800c910 <__pow5mult+0x90>
 800c8a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c8a6:	b93c      	cbnz	r4, 800c8b8 <__pow5mult+0x38>
 800c8a8:	2010      	movs	r0, #16
 800c8aa:	f7fe fa69 	bl	800ad80 <malloc>
 800c8ae:	6270      	str	r0, [r6, #36]	; 0x24
 800c8b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c8b4:	6004      	str	r4, [r0, #0]
 800c8b6:	60c4      	str	r4, [r0, #12]
 800c8b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c8bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c8c0:	b94c      	cbnz	r4, 800c8d6 <__pow5mult+0x56>
 800c8c2:	f240 2171 	movw	r1, #625	; 0x271
 800c8c6:	4630      	mov	r0, r6
 800c8c8:	f7ff ff3a 	bl	800c740 <__i2b>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	f8c8 0008 	str.w	r0, [r8, #8]
 800c8d2:	4604      	mov	r4, r0
 800c8d4:	6003      	str	r3, [r0, #0]
 800c8d6:	f04f 0800 	mov.w	r8, #0
 800c8da:	07eb      	lsls	r3, r5, #31
 800c8dc:	d50a      	bpl.n	800c8f4 <__pow5mult+0x74>
 800c8de:	4639      	mov	r1, r7
 800c8e0:	4622      	mov	r2, r4
 800c8e2:	4630      	mov	r0, r6
 800c8e4:	f7ff ff35 	bl	800c752 <__multiply>
 800c8e8:	4639      	mov	r1, r7
 800c8ea:	4681      	mov	r9, r0
 800c8ec:	4630      	mov	r0, r6
 800c8ee:	f7ff fe87 	bl	800c600 <_Bfree>
 800c8f2:	464f      	mov	r7, r9
 800c8f4:	106d      	asrs	r5, r5, #1
 800c8f6:	d00b      	beq.n	800c910 <__pow5mult+0x90>
 800c8f8:	6820      	ldr	r0, [r4, #0]
 800c8fa:	b938      	cbnz	r0, 800c90c <__pow5mult+0x8c>
 800c8fc:	4622      	mov	r2, r4
 800c8fe:	4621      	mov	r1, r4
 800c900:	4630      	mov	r0, r6
 800c902:	f7ff ff26 	bl	800c752 <__multiply>
 800c906:	6020      	str	r0, [r4, #0]
 800c908:	f8c0 8000 	str.w	r8, [r0]
 800c90c:	4604      	mov	r4, r0
 800c90e:	e7e4      	b.n	800c8da <__pow5mult+0x5a>
 800c910:	4638      	mov	r0, r7
 800c912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c916:	bf00      	nop
 800c918:	0800d8b0 	.word	0x0800d8b0

0800c91c <__lshift>:
 800c91c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c920:	460c      	mov	r4, r1
 800c922:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c926:	6923      	ldr	r3, [r4, #16]
 800c928:	6849      	ldr	r1, [r1, #4]
 800c92a:	eb0a 0903 	add.w	r9, sl, r3
 800c92e:	68a3      	ldr	r3, [r4, #8]
 800c930:	4607      	mov	r7, r0
 800c932:	4616      	mov	r6, r2
 800c934:	f109 0501 	add.w	r5, r9, #1
 800c938:	42ab      	cmp	r3, r5
 800c93a:	db32      	blt.n	800c9a2 <__lshift+0x86>
 800c93c:	4638      	mov	r0, r7
 800c93e:	f7ff fe2b 	bl	800c598 <_Balloc>
 800c942:	2300      	movs	r3, #0
 800c944:	4680      	mov	r8, r0
 800c946:	f100 0114 	add.w	r1, r0, #20
 800c94a:	461a      	mov	r2, r3
 800c94c:	4553      	cmp	r3, sl
 800c94e:	db2b      	blt.n	800c9a8 <__lshift+0x8c>
 800c950:	6920      	ldr	r0, [r4, #16]
 800c952:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c956:	f104 0314 	add.w	r3, r4, #20
 800c95a:	f016 021f 	ands.w	r2, r6, #31
 800c95e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c962:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800c966:	d025      	beq.n	800c9b4 <__lshift+0x98>
 800c968:	f1c2 0e20 	rsb	lr, r2, #32
 800c96c:	2000      	movs	r0, #0
 800c96e:	681e      	ldr	r6, [r3, #0]
 800c970:	468a      	mov	sl, r1
 800c972:	4096      	lsls	r6, r2
 800c974:	4330      	orrs	r0, r6
 800c976:	f84a 0b04 	str.w	r0, [sl], #4
 800c97a:	f853 0b04 	ldr.w	r0, [r3], #4
 800c97e:	459c      	cmp	ip, r3
 800c980:	fa20 f00e 	lsr.w	r0, r0, lr
 800c984:	d814      	bhi.n	800c9b0 <__lshift+0x94>
 800c986:	6048      	str	r0, [r1, #4]
 800c988:	b108      	cbz	r0, 800c98e <__lshift+0x72>
 800c98a:	f109 0502 	add.w	r5, r9, #2
 800c98e:	3d01      	subs	r5, #1
 800c990:	4638      	mov	r0, r7
 800c992:	f8c8 5010 	str.w	r5, [r8, #16]
 800c996:	4621      	mov	r1, r4
 800c998:	f7ff fe32 	bl	800c600 <_Bfree>
 800c99c:	4640      	mov	r0, r8
 800c99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a2:	3101      	adds	r1, #1
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	e7c7      	b.n	800c938 <__lshift+0x1c>
 800c9a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	e7cd      	b.n	800c94c <__lshift+0x30>
 800c9b0:	4651      	mov	r1, sl
 800c9b2:	e7dc      	b.n	800c96e <__lshift+0x52>
 800c9b4:	3904      	subs	r1, #4
 800c9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9ba:	f841 2f04 	str.w	r2, [r1, #4]!
 800c9be:	459c      	cmp	ip, r3
 800c9c0:	d8f9      	bhi.n	800c9b6 <__lshift+0x9a>
 800c9c2:	e7e4      	b.n	800c98e <__lshift+0x72>

0800c9c4 <__mcmp>:
 800c9c4:	6903      	ldr	r3, [r0, #16]
 800c9c6:	690a      	ldr	r2, [r1, #16]
 800c9c8:	1a9b      	subs	r3, r3, r2
 800c9ca:	b530      	push	{r4, r5, lr}
 800c9cc:	d10c      	bne.n	800c9e8 <__mcmp+0x24>
 800c9ce:	0092      	lsls	r2, r2, #2
 800c9d0:	3014      	adds	r0, #20
 800c9d2:	3114      	adds	r1, #20
 800c9d4:	1884      	adds	r4, r0, r2
 800c9d6:	4411      	add	r1, r2
 800c9d8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c9dc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c9e0:	4295      	cmp	r5, r2
 800c9e2:	d003      	beq.n	800c9ec <__mcmp+0x28>
 800c9e4:	d305      	bcc.n	800c9f2 <__mcmp+0x2e>
 800c9e6:	2301      	movs	r3, #1
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	bd30      	pop	{r4, r5, pc}
 800c9ec:	42a0      	cmp	r0, r4
 800c9ee:	d3f3      	bcc.n	800c9d8 <__mcmp+0x14>
 800c9f0:	e7fa      	b.n	800c9e8 <__mcmp+0x24>
 800c9f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c9f6:	e7f7      	b.n	800c9e8 <__mcmp+0x24>

0800c9f8 <__mdiff>:
 800c9f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9fc:	460d      	mov	r5, r1
 800c9fe:	4607      	mov	r7, r0
 800ca00:	4611      	mov	r1, r2
 800ca02:	4628      	mov	r0, r5
 800ca04:	4614      	mov	r4, r2
 800ca06:	f7ff ffdd 	bl	800c9c4 <__mcmp>
 800ca0a:	1e06      	subs	r6, r0, #0
 800ca0c:	d108      	bne.n	800ca20 <__mdiff+0x28>
 800ca0e:	4631      	mov	r1, r6
 800ca10:	4638      	mov	r0, r7
 800ca12:	f7ff fdc1 	bl	800c598 <_Balloc>
 800ca16:	2301      	movs	r3, #1
 800ca18:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ca1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca20:	bfa4      	itt	ge
 800ca22:	4623      	movge	r3, r4
 800ca24:	462c      	movge	r4, r5
 800ca26:	4638      	mov	r0, r7
 800ca28:	6861      	ldr	r1, [r4, #4]
 800ca2a:	bfa6      	itte	ge
 800ca2c:	461d      	movge	r5, r3
 800ca2e:	2600      	movge	r6, #0
 800ca30:	2601      	movlt	r6, #1
 800ca32:	f7ff fdb1 	bl	800c598 <_Balloc>
 800ca36:	692b      	ldr	r3, [r5, #16]
 800ca38:	60c6      	str	r6, [r0, #12]
 800ca3a:	6926      	ldr	r6, [r4, #16]
 800ca3c:	f105 0914 	add.w	r9, r5, #20
 800ca40:	f104 0214 	add.w	r2, r4, #20
 800ca44:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ca48:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ca4c:	f100 0514 	add.w	r5, r0, #20
 800ca50:	f04f 0e00 	mov.w	lr, #0
 800ca54:	f852 ab04 	ldr.w	sl, [r2], #4
 800ca58:	f859 4b04 	ldr.w	r4, [r9], #4
 800ca5c:	fa1e f18a 	uxtah	r1, lr, sl
 800ca60:	b2a3      	uxth	r3, r4
 800ca62:	1ac9      	subs	r1, r1, r3
 800ca64:	0c23      	lsrs	r3, r4, #16
 800ca66:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ca6a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ca6e:	b289      	uxth	r1, r1
 800ca70:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ca74:	45c8      	cmp	r8, r9
 800ca76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ca7a:	4694      	mov	ip, r2
 800ca7c:	f845 3b04 	str.w	r3, [r5], #4
 800ca80:	d8e8      	bhi.n	800ca54 <__mdiff+0x5c>
 800ca82:	45bc      	cmp	ip, r7
 800ca84:	d304      	bcc.n	800ca90 <__mdiff+0x98>
 800ca86:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ca8a:	b183      	cbz	r3, 800caae <__mdiff+0xb6>
 800ca8c:	6106      	str	r6, [r0, #16]
 800ca8e:	e7c5      	b.n	800ca1c <__mdiff+0x24>
 800ca90:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ca94:	fa1e f381 	uxtah	r3, lr, r1
 800ca98:	141a      	asrs	r2, r3, #16
 800ca9a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800caa4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800caa8:	f845 3b04 	str.w	r3, [r5], #4
 800caac:	e7e9      	b.n	800ca82 <__mdiff+0x8a>
 800caae:	3e01      	subs	r6, #1
 800cab0:	e7e9      	b.n	800ca86 <__mdiff+0x8e>

0800cab2 <__d2b>:
 800cab2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cab6:	460e      	mov	r6, r1
 800cab8:	2101      	movs	r1, #1
 800caba:	ec59 8b10 	vmov	r8, r9, d0
 800cabe:	4615      	mov	r5, r2
 800cac0:	f7ff fd6a 	bl	800c598 <_Balloc>
 800cac4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800cac8:	4607      	mov	r7, r0
 800caca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cace:	bb34      	cbnz	r4, 800cb1e <__d2b+0x6c>
 800cad0:	9301      	str	r3, [sp, #4]
 800cad2:	f1b8 0300 	subs.w	r3, r8, #0
 800cad6:	d027      	beq.n	800cb28 <__d2b+0x76>
 800cad8:	a802      	add	r0, sp, #8
 800cada:	f840 3d08 	str.w	r3, [r0, #-8]!
 800cade:	f7ff fe00 	bl	800c6e2 <__lo0bits>
 800cae2:	9900      	ldr	r1, [sp, #0]
 800cae4:	b1f0      	cbz	r0, 800cb24 <__d2b+0x72>
 800cae6:	9a01      	ldr	r2, [sp, #4]
 800cae8:	f1c0 0320 	rsb	r3, r0, #32
 800caec:	fa02 f303 	lsl.w	r3, r2, r3
 800caf0:	430b      	orrs	r3, r1
 800caf2:	40c2      	lsrs	r2, r0
 800caf4:	617b      	str	r3, [r7, #20]
 800caf6:	9201      	str	r2, [sp, #4]
 800caf8:	9b01      	ldr	r3, [sp, #4]
 800cafa:	61bb      	str	r3, [r7, #24]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	bf14      	ite	ne
 800cb00:	2102      	movne	r1, #2
 800cb02:	2101      	moveq	r1, #1
 800cb04:	6139      	str	r1, [r7, #16]
 800cb06:	b1c4      	cbz	r4, 800cb3a <__d2b+0x88>
 800cb08:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800cb0c:	4404      	add	r4, r0
 800cb0e:	6034      	str	r4, [r6, #0]
 800cb10:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb14:	6028      	str	r0, [r5, #0]
 800cb16:	4638      	mov	r0, r7
 800cb18:	b003      	add	sp, #12
 800cb1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb22:	e7d5      	b.n	800cad0 <__d2b+0x1e>
 800cb24:	6179      	str	r1, [r7, #20]
 800cb26:	e7e7      	b.n	800caf8 <__d2b+0x46>
 800cb28:	a801      	add	r0, sp, #4
 800cb2a:	f7ff fdda 	bl	800c6e2 <__lo0bits>
 800cb2e:	9b01      	ldr	r3, [sp, #4]
 800cb30:	617b      	str	r3, [r7, #20]
 800cb32:	2101      	movs	r1, #1
 800cb34:	6139      	str	r1, [r7, #16]
 800cb36:	3020      	adds	r0, #32
 800cb38:	e7e5      	b.n	800cb06 <__d2b+0x54>
 800cb3a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800cb3e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb42:	6030      	str	r0, [r6, #0]
 800cb44:	6918      	ldr	r0, [r3, #16]
 800cb46:	f7ff fdad 	bl	800c6a4 <__hi0bits>
 800cb4a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800cb4e:	e7e1      	b.n	800cb14 <__d2b+0x62>

0800cb50 <_calloc_r>:
 800cb50:	b538      	push	{r3, r4, r5, lr}
 800cb52:	fb02 f401 	mul.w	r4, r2, r1
 800cb56:	4621      	mov	r1, r4
 800cb58:	f7fe f984 	bl	800ae64 <_malloc_r>
 800cb5c:	4605      	mov	r5, r0
 800cb5e:	b118      	cbz	r0, 800cb68 <_calloc_r+0x18>
 800cb60:	4622      	mov	r2, r4
 800cb62:	2100      	movs	r1, #0
 800cb64:	f7fe f927 	bl	800adb6 <memset>
 800cb68:	4628      	mov	r0, r5
 800cb6a:	bd38      	pop	{r3, r4, r5, pc}

0800cb6c <__ssputs_r>:
 800cb6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb70:	688e      	ldr	r6, [r1, #8]
 800cb72:	429e      	cmp	r6, r3
 800cb74:	4682      	mov	sl, r0
 800cb76:	460c      	mov	r4, r1
 800cb78:	4690      	mov	r8, r2
 800cb7a:	4699      	mov	r9, r3
 800cb7c:	d837      	bhi.n	800cbee <__ssputs_r+0x82>
 800cb7e:	898a      	ldrh	r2, [r1, #12]
 800cb80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cb84:	d031      	beq.n	800cbea <__ssputs_r+0x7e>
 800cb86:	6825      	ldr	r5, [r4, #0]
 800cb88:	6909      	ldr	r1, [r1, #16]
 800cb8a:	1a6f      	subs	r7, r5, r1
 800cb8c:	6965      	ldr	r5, [r4, #20]
 800cb8e:	2302      	movs	r3, #2
 800cb90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cb94:	fb95 f5f3 	sdiv	r5, r5, r3
 800cb98:	f109 0301 	add.w	r3, r9, #1
 800cb9c:	443b      	add	r3, r7
 800cb9e:	429d      	cmp	r5, r3
 800cba0:	bf38      	it	cc
 800cba2:	461d      	movcc	r5, r3
 800cba4:	0553      	lsls	r3, r2, #21
 800cba6:	d530      	bpl.n	800cc0a <__ssputs_r+0x9e>
 800cba8:	4629      	mov	r1, r5
 800cbaa:	f7fe f95b 	bl	800ae64 <_malloc_r>
 800cbae:	4606      	mov	r6, r0
 800cbb0:	b950      	cbnz	r0, 800cbc8 <__ssputs_r+0x5c>
 800cbb2:	230c      	movs	r3, #12
 800cbb4:	f8ca 3000 	str.w	r3, [sl]
 800cbb8:	89a3      	ldrh	r3, [r4, #12]
 800cbba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbbe:	81a3      	strh	r3, [r4, #12]
 800cbc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbc8:	463a      	mov	r2, r7
 800cbca:	6921      	ldr	r1, [r4, #16]
 800cbcc:	f7fe f8e8 	bl	800ada0 <memcpy>
 800cbd0:	89a3      	ldrh	r3, [r4, #12]
 800cbd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cbd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbda:	81a3      	strh	r3, [r4, #12]
 800cbdc:	6126      	str	r6, [r4, #16]
 800cbde:	6165      	str	r5, [r4, #20]
 800cbe0:	443e      	add	r6, r7
 800cbe2:	1bed      	subs	r5, r5, r7
 800cbe4:	6026      	str	r6, [r4, #0]
 800cbe6:	60a5      	str	r5, [r4, #8]
 800cbe8:	464e      	mov	r6, r9
 800cbea:	454e      	cmp	r6, r9
 800cbec:	d900      	bls.n	800cbf0 <__ssputs_r+0x84>
 800cbee:	464e      	mov	r6, r9
 800cbf0:	4632      	mov	r2, r6
 800cbf2:	4641      	mov	r1, r8
 800cbf4:	6820      	ldr	r0, [r4, #0]
 800cbf6:	f000 f91d 	bl	800ce34 <memmove>
 800cbfa:	68a3      	ldr	r3, [r4, #8]
 800cbfc:	1b9b      	subs	r3, r3, r6
 800cbfe:	60a3      	str	r3, [r4, #8]
 800cc00:	6823      	ldr	r3, [r4, #0]
 800cc02:	441e      	add	r6, r3
 800cc04:	6026      	str	r6, [r4, #0]
 800cc06:	2000      	movs	r0, #0
 800cc08:	e7dc      	b.n	800cbc4 <__ssputs_r+0x58>
 800cc0a:	462a      	mov	r2, r5
 800cc0c:	f000 f92b 	bl	800ce66 <_realloc_r>
 800cc10:	4606      	mov	r6, r0
 800cc12:	2800      	cmp	r0, #0
 800cc14:	d1e2      	bne.n	800cbdc <__ssputs_r+0x70>
 800cc16:	6921      	ldr	r1, [r4, #16]
 800cc18:	4650      	mov	r0, sl
 800cc1a:	f7fe f8d5 	bl	800adc8 <_free_r>
 800cc1e:	e7c8      	b.n	800cbb2 <__ssputs_r+0x46>

0800cc20 <_svfiprintf_r>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	461d      	mov	r5, r3
 800cc26:	898b      	ldrh	r3, [r1, #12]
 800cc28:	061f      	lsls	r7, r3, #24
 800cc2a:	b09d      	sub	sp, #116	; 0x74
 800cc2c:	4680      	mov	r8, r0
 800cc2e:	460c      	mov	r4, r1
 800cc30:	4616      	mov	r6, r2
 800cc32:	d50f      	bpl.n	800cc54 <_svfiprintf_r+0x34>
 800cc34:	690b      	ldr	r3, [r1, #16]
 800cc36:	b96b      	cbnz	r3, 800cc54 <_svfiprintf_r+0x34>
 800cc38:	2140      	movs	r1, #64	; 0x40
 800cc3a:	f7fe f913 	bl	800ae64 <_malloc_r>
 800cc3e:	6020      	str	r0, [r4, #0]
 800cc40:	6120      	str	r0, [r4, #16]
 800cc42:	b928      	cbnz	r0, 800cc50 <_svfiprintf_r+0x30>
 800cc44:	230c      	movs	r3, #12
 800cc46:	f8c8 3000 	str.w	r3, [r8]
 800cc4a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cc4e:	e0c8      	b.n	800cde2 <_svfiprintf_r+0x1c2>
 800cc50:	2340      	movs	r3, #64	; 0x40
 800cc52:	6163      	str	r3, [r4, #20]
 800cc54:	2300      	movs	r3, #0
 800cc56:	9309      	str	r3, [sp, #36]	; 0x24
 800cc58:	2320      	movs	r3, #32
 800cc5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cc5e:	2330      	movs	r3, #48	; 0x30
 800cc60:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cc64:	9503      	str	r5, [sp, #12]
 800cc66:	f04f 0b01 	mov.w	fp, #1
 800cc6a:	4637      	mov	r7, r6
 800cc6c:	463d      	mov	r5, r7
 800cc6e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cc72:	b10b      	cbz	r3, 800cc78 <_svfiprintf_r+0x58>
 800cc74:	2b25      	cmp	r3, #37	; 0x25
 800cc76:	d13e      	bne.n	800ccf6 <_svfiprintf_r+0xd6>
 800cc78:	ebb7 0a06 	subs.w	sl, r7, r6
 800cc7c:	d00b      	beq.n	800cc96 <_svfiprintf_r+0x76>
 800cc7e:	4653      	mov	r3, sl
 800cc80:	4632      	mov	r2, r6
 800cc82:	4621      	mov	r1, r4
 800cc84:	4640      	mov	r0, r8
 800cc86:	f7ff ff71 	bl	800cb6c <__ssputs_r>
 800cc8a:	3001      	adds	r0, #1
 800cc8c:	f000 80a4 	beq.w	800cdd8 <_svfiprintf_r+0x1b8>
 800cc90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc92:	4453      	add	r3, sl
 800cc94:	9309      	str	r3, [sp, #36]	; 0x24
 800cc96:	783b      	ldrb	r3, [r7, #0]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f000 809d 	beq.w	800cdd8 <_svfiprintf_r+0x1b8>
 800cc9e:	2300      	movs	r3, #0
 800cca0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cca4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cca8:	9304      	str	r3, [sp, #16]
 800ccaa:	9307      	str	r3, [sp, #28]
 800ccac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ccb0:	931a      	str	r3, [sp, #104]	; 0x68
 800ccb2:	462f      	mov	r7, r5
 800ccb4:	2205      	movs	r2, #5
 800ccb6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ccba:	4850      	ldr	r0, [pc, #320]	; (800cdfc <_svfiprintf_r+0x1dc>)
 800ccbc:	f7f3 fa98 	bl	80001f0 <memchr>
 800ccc0:	9b04      	ldr	r3, [sp, #16]
 800ccc2:	b9d0      	cbnz	r0, 800ccfa <_svfiprintf_r+0xda>
 800ccc4:	06d9      	lsls	r1, r3, #27
 800ccc6:	bf44      	itt	mi
 800ccc8:	2220      	movmi	r2, #32
 800ccca:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ccce:	071a      	lsls	r2, r3, #28
 800ccd0:	bf44      	itt	mi
 800ccd2:	222b      	movmi	r2, #43	; 0x2b
 800ccd4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ccd8:	782a      	ldrb	r2, [r5, #0]
 800ccda:	2a2a      	cmp	r2, #42	; 0x2a
 800ccdc:	d015      	beq.n	800cd0a <_svfiprintf_r+0xea>
 800ccde:	9a07      	ldr	r2, [sp, #28]
 800cce0:	462f      	mov	r7, r5
 800cce2:	2000      	movs	r0, #0
 800cce4:	250a      	movs	r5, #10
 800cce6:	4639      	mov	r1, r7
 800cce8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ccec:	3b30      	subs	r3, #48	; 0x30
 800ccee:	2b09      	cmp	r3, #9
 800ccf0:	d94d      	bls.n	800cd8e <_svfiprintf_r+0x16e>
 800ccf2:	b1b8      	cbz	r0, 800cd24 <_svfiprintf_r+0x104>
 800ccf4:	e00f      	b.n	800cd16 <_svfiprintf_r+0xf6>
 800ccf6:	462f      	mov	r7, r5
 800ccf8:	e7b8      	b.n	800cc6c <_svfiprintf_r+0x4c>
 800ccfa:	4a40      	ldr	r2, [pc, #256]	; (800cdfc <_svfiprintf_r+0x1dc>)
 800ccfc:	1a80      	subs	r0, r0, r2
 800ccfe:	fa0b f000 	lsl.w	r0, fp, r0
 800cd02:	4318      	orrs	r0, r3
 800cd04:	9004      	str	r0, [sp, #16]
 800cd06:	463d      	mov	r5, r7
 800cd08:	e7d3      	b.n	800ccb2 <_svfiprintf_r+0x92>
 800cd0a:	9a03      	ldr	r2, [sp, #12]
 800cd0c:	1d11      	adds	r1, r2, #4
 800cd0e:	6812      	ldr	r2, [r2, #0]
 800cd10:	9103      	str	r1, [sp, #12]
 800cd12:	2a00      	cmp	r2, #0
 800cd14:	db01      	blt.n	800cd1a <_svfiprintf_r+0xfa>
 800cd16:	9207      	str	r2, [sp, #28]
 800cd18:	e004      	b.n	800cd24 <_svfiprintf_r+0x104>
 800cd1a:	4252      	negs	r2, r2
 800cd1c:	f043 0302 	orr.w	r3, r3, #2
 800cd20:	9207      	str	r2, [sp, #28]
 800cd22:	9304      	str	r3, [sp, #16]
 800cd24:	783b      	ldrb	r3, [r7, #0]
 800cd26:	2b2e      	cmp	r3, #46	; 0x2e
 800cd28:	d10c      	bne.n	800cd44 <_svfiprintf_r+0x124>
 800cd2a:	787b      	ldrb	r3, [r7, #1]
 800cd2c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd2e:	d133      	bne.n	800cd98 <_svfiprintf_r+0x178>
 800cd30:	9b03      	ldr	r3, [sp, #12]
 800cd32:	1d1a      	adds	r2, r3, #4
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	9203      	str	r2, [sp, #12]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	bfb8      	it	lt
 800cd3c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800cd40:	3702      	adds	r7, #2
 800cd42:	9305      	str	r3, [sp, #20]
 800cd44:	4d2e      	ldr	r5, [pc, #184]	; (800ce00 <_svfiprintf_r+0x1e0>)
 800cd46:	7839      	ldrb	r1, [r7, #0]
 800cd48:	2203      	movs	r2, #3
 800cd4a:	4628      	mov	r0, r5
 800cd4c:	f7f3 fa50 	bl	80001f0 <memchr>
 800cd50:	b138      	cbz	r0, 800cd62 <_svfiprintf_r+0x142>
 800cd52:	2340      	movs	r3, #64	; 0x40
 800cd54:	1b40      	subs	r0, r0, r5
 800cd56:	fa03 f000 	lsl.w	r0, r3, r0
 800cd5a:	9b04      	ldr	r3, [sp, #16]
 800cd5c:	4303      	orrs	r3, r0
 800cd5e:	3701      	adds	r7, #1
 800cd60:	9304      	str	r3, [sp, #16]
 800cd62:	7839      	ldrb	r1, [r7, #0]
 800cd64:	4827      	ldr	r0, [pc, #156]	; (800ce04 <_svfiprintf_r+0x1e4>)
 800cd66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cd6a:	2206      	movs	r2, #6
 800cd6c:	1c7e      	adds	r6, r7, #1
 800cd6e:	f7f3 fa3f 	bl	80001f0 <memchr>
 800cd72:	2800      	cmp	r0, #0
 800cd74:	d038      	beq.n	800cde8 <_svfiprintf_r+0x1c8>
 800cd76:	4b24      	ldr	r3, [pc, #144]	; (800ce08 <_svfiprintf_r+0x1e8>)
 800cd78:	bb13      	cbnz	r3, 800cdc0 <_svfiprintf_r+0x1a0>
 800cd7a:	9b03      	ldr	r3, [sp, #12]
 800cd7c:	3307      	adds	r3, #7
 800cd7e:	f023 0307 	bic.w	r3, r3, #7
 800cd82:	3308      	adds	r3, #8
 800cd84:	9303      	str	r3, [sp, #12]
 800cd86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd88:	444b      	add	r3, r9
 800cd8a:	9309      	str	r3, [sp, #36]	; 0x24
 800cd8c:	e76d      	b.n	800cc6a <_svfiprintf_r+0x4a>
 800cd8e:	fb05 3202 	mla	r2, r5, r2, r3
 800cd92:	2001      	movs	r0, #1
 800cd94:	460f      	mov	r7, r1
 800cd96:	e7a6      	b.n	800cce6 <_svfiprintf_r+0xc6>
 800cd98:	2300      	movs	r3, #0
 800cd9a:	3701      	adds	r7, #1
 800cd9c:	9305      	str	r3, [sp, #20]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	250a      	movs	r5, #10
 800cda2:	4638      	mov	r0, r7
 800cda4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cda8:	3a30      	subs	r2, #48	; 0x30
 800cdaa:	2a09      	cmp	r2, #9
 800cdac:	d903      	bls.n	800cdb6 <_svfiprintf_r+0x196>
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d0c8      	beq.n	800cd44 <_svfiprintf_r+0x124>
 800cdb2:	9105      	str	r1, [sp, #20]
 800cdb4:	e7c6      	b.n	800cd44 <_svfiprintf_r+0x124>
 800cdb6:	fb05 2101 	mla	r1, r5, r1, r2
 800cdba:	2301      	movs	r3, #1
 800cdbc:	4607      	mov	r7, r0
 800cdbe:	e7f0      	b.n	800cda2 <_svfiprintf_r+0x182>
 800cdc0:	ab03      	add	r3, sp, #12
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	4622      	mov	r2, r4
 800cdc6:	4b11      	ldr	r3, [pc, #68]	; (800ce0c <_svfiprintf_r+0x1ec>)
 800cdc8:	a904      	add	r1, sp, #16
 800cdca:	4640      	mov	r0, r8
 800cdcc:	f7fe f938 	bl	800b040 <_printf_float>
 800cdd0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800cdd4:	4681      	mov	r9, r0
 800cdd6:	d1d6      	bne.n	800cd86 <_svfiprintf_r+0x166>
 800cdd8:	89a3      	ldrh	r3, [r4, #12]
 800cdda:	065b      	lsls	r3, r3, #25
 800cddc:	f53f af35 	bmi.w	800cc4a <_svfiprintf_r+0x2a>
 800cde0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cde2:	b01d      	add	sp, #116	; 0x74
 800cde4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde8:	ab03      	add	r3, sp, #12
 800cdea:	9300      	str	r3, [sp, #0]
 800cdec:	4622      	mov	r2, r4
 800cdee:	4b07      	ldr	r3, [pc, #28]	; (800ce0c <_svfiprintf_r+0x1ec>)
 800cdf0:	a904      	add	r1, sp, #16
 800cdf2:	4640      	mov	r0, r8
 800cdf4:	f7fe fbda 	bl	800b5ac <_printf_i>
 800cdf8:	e7ea      	b.n	800cdd0 <_svfiprintf_r+0x1b0>
 800cdfa:	bf00      	nop
 800cdfc:	0800d8bc 	.word	0x0800d8bc
 800ce00:	0800d8c2 	.word	0x0800d8c2
 800ce04:	0800d8c6 	.word	0x0800d8c6
 800ce08:	0800b041 	.word	0x0800b041
 800ce0c:	0800cb6d 	.word	0x0800cb6d

0800ce10 <__ascii_mbtowc>:
 800ce10:	b082      	sub	sp, #8
 800ce12:	b901      	cbnz	r1, 800ce16 <__ascii_mbtowc+0x6>
 800ce14:	a901      	add	r1, sp, #4
 800ce16:	b142      	cbz	r2, 800ce2a <__ascii_mbtowc+0x1a>
 800ce18:	b14b      	cbz	r3, 800ce2e <__ascii_mbtowc+0x1e>
 800ce1a:	7813      	ldrb	r3, [r2, #0]
 800ce1c:	600b      	str	r3, [r1, #0]
 800ce1e:	7812      	ldrb	r2, [r2, #0]
 800ce20:	1c10      	adds	r0, r2, #0
 800ce22:	bf18      	it	ne
 800ce24:	2001      	movne	r0, #1
 800ce26:	b002      	add	sp, #8
 800ce28:	4770      	bx	lr
 800ce2a:	4610      	mov	r0, r2
 800ce2c:	e7fb      	b.n	800ce26 <__ascii_mbtowc+0x16>
 800ce2e:	f06f 0001 	mvn.w	r0, #1
 800ce32:	e7f8      	b.n	800ce26 <__ascii_mbtowc+0x16>

0800ce34 <memmove>:
 800ce34:	4288      	cmp	r0, r1
 800ce36:	b510      	push	{r4, lr}
 800ce38:	eb01 0302 	add.w	r3, r1, r2
 800ce3c:	d807      	bhi.n	800ce4e <memmove+0x1a>
 800ce3e:	1e42      	subs	r2, r0, #1
 800ce40:	4299      	cmp	r1, r3
 800ce42:	d00a      	beq.n	800ce5a <memmove+0x26>
 800ce44:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce48:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ce4c:	e7f8      	b.n	800ce40 <memmove+0xc>
 800ce4e:	4283      	cmp	r3, r0
 800ce50:	d9f5      	bls.n	800ce3e <memmove+0xa>
 800ce52:	1881      	adds	r1, r0, r2
 800ce54:	1ad2      	subs	r2, r2, r3
 800ce56:	42d3      	cmn	r3, r2
 800ce58:	d100      	bne.n	800ce5c <memmove+0x28>
 800ce5a:	bd10      	pop	{r4, pc}
 800ce5c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce60:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ce64:	e7f7      	b.n	800ce56 <memmove+0x22>

0800ce66 <_realloc_r>:
 800ce66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce68:	4607      	mov	r7, r0
 800ce6a:	4614      	mov	r4, r2
 800ce6c:	460e      	mov	r6, r1
 800ce6e:	b921      	cbnz	r1, 800ce7a <_realloc_r+0x14>
 800ce70:	4611      	mov	r1, r2
 800ce72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ce76:	f7fd bff5 	b.w	800ae64 <_malloc_r>
 800ce7a:	b922      	cbnz	r2, 800ce86 <_realloc_r+0x20>
 800ce7c:	f7fd ffa4 	bl	800adc8 <_free_r>
 800ce80:	4625      	mov	r5, r4
 800ce82:	4628      	mov	r0, r5
 800ce84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce86:	f000 f821 	bl	800cecc <_malloc_usable_size_r>
 800ce8a:	42a0      	cmp	r0, r4
 800ce8c:	d20f      	bcs.n	800ceae <_realloc_r+0x48>
 800ce8e:	4621      	mov	r1, r4
 800ce90:	4638      	mov	r0, r7
 800ce92:	f7fd ffe7 	bl	800ae64 <_malloc_r>
 800ce96:	4605      	mov	r5, r0
 800ce98:	2800      	cmp	r0, #0
 800ce9a:	d0f2      	beq.n	800ce82 <_realloc_r+0x1c>
 800ce9c:	4631      	mov	r1, r6
 800ce9e:	4622      	mov	r2, r4
 800cea0:	f7fd ff7e 	bl	800ada0 <memcpy>
 800cea4:	4631      	mov	r1, r6
 800cea6:	4638      	mov	r0, r7
 800cea8:	f7fd ff8e 	bl	800adc8 <_free_r>
 800ceac:	e7e9      	b.n	800ce82 <_realloc_r+0x1c>
 800ceae:	4635      	mov	r5, r6
 800ceb0:	e7e7      	b.n	800ce82 <_realloc_r+0x1c>

0800ceb2 <__ascii_wctomb>:
 800ceb2:	b149      	cbz	r1, 800cec8 <__ascii_wctomb+0x16>
 800ceb4:	2aff      	cmp	r2, #255	; 0xff
 800ceb6:	bf85      	ittet	hi
 800ceb8:	238a      	movhi	r3, #138	; 0x8a
 800ceba:	6003      	strhi	r3, [r0, #0]
 800cebc:	700a      	strbls	r2, [r1, #0]
 800cebe:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800cec2:	bf98      	it	ls
 800cec4:	2001      	movls	r0, #1
 800cec6:	4770      	bx	lr
 800cec8:	4608      	mov	r0, r1
 800ceca:	4770      	bx	lr

0800cecc <_malloc_usable_size_r>:
 800cecc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ced0:	1f18      	subs	r0, r3, #4
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	bfbc      	itt	lt
 800ced6:	580b      	ldrlt	r3, [r1, r0]
 800ced8:	18c0      	addlt	r0, r0, r3
 800ceda:	4770      	bx	lr

0800cedc <round>:
 800cedc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cede:	ec57 6b10 	vmov	r6, r7, d0
 800cee2:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800cee6:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800ceea:	2c13      	cmp	r4, #19
 800ceec:	463b      	mov	r3, r7
 800ceee:	463d      	mov	r5, r7
 800cef0:	dc17      	bgt.n	800cf22 <round+0x46>
 800cef2:	2c00      	cmp	r4, #0
 800cef4:	da09      	bge.n	800cf0a <round+0x2e>
 800cef6:	3401      	adds	r4, #1
 800cef8:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800cefc:	d103      	bne.n	800cf06 <round+0x2a>
 800cefe:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cf02:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cf06:	2100      	movs	r1, #0
 800cf08:	e02c      	b.n	800cf64 <round+0x88>
 800cf0a:	4a18      	ldr	r2, [pc, #96]	; (800cf6c <round+0x90>)
 800cf0c:	4122      	asrs	r2, r4
 800cf0e:	4217      	tst	r7, r2
 800cf10:	d100      	bne.n	800cf14 <round+0x38>
 800cf12:	b19e      	cbz	r6, 800cf3c <round+0x60>
 800cf14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cf18:	4123      	asrs	r3, r4
 800cf1a:	442b      	add	r3, r5
 800cf1c:	ea23 0302 	bic.w	r3, r3, r2
 800cf20:	e7f1      	b.n	800cf06 <round+0x2a>
 800cf22:	2c33      	cmp	r4, #51	; 0x33
 800cf24:	dd0d      	ble.n	800cf42 <round+0x66>
 800cf26:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800cf2a:	d107      	bne.n	800cf3c <round+0x60>
 800cf2c:	4630      	mov	r0, r6
 800cf2e:	4639      	mov	r1, r7
 800cf30:	ee10 2a10 	vmov	r2, s0
 800cf34:	f7f3 f9b2 	bl	800029c <__adddf3>
 800cf38:	4606      	mov	r6, r0
 800cf3a:	460f      	mov	r7, r1
 800cf3c:	ec47 6b10 	vmov	d0, r6, r7
 800cf40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf42:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800cf46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf4a:	40d0      	lsrs	r0, r2
 800cf4c:	4206      	tst	r6, r0
 800cf4e:	d0f5      	beq.n	800cf3c <round+0x60>
 800cf50:	2201      	movs	r2, #1
 800cf52:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800cf56:	fa02 f404 	lsl.w	r4, r2, r4
 800cf5a:	1931      	adds	r1, r6, r4
 800cf5c:	bf28      	it	cs
 800cf5e:	189b      	addcs	r3, r3, r2
 800cf60:	ea21 0100 	bic.w	r1, r1, r0
 800cf64:	461f      	mov	r7, r3
 800cf66:	460e      	mov	r6, r1
 800cf68:	e7e8      	b.n	800cf3c <round+0x60>
 800cf6a:	bf00      	nop
 800cf6c:	000fffff 	.word	0x000fffff

0800cf70 <sqrt>:
 800cf70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cf74:	ed2d 8b02 	vpush	{d8}
 800cf78:	b08b      	sub	sp, #44	; 0x2c
 800cf7a:	ec55 4b10 	vmov	r4, r5, d0
 800cf7e:	f000 f851 	bl	800d024 <__ieee754_sqrt>
 800cf82:	4b26      	ldr	r3, [pc, #152]	; (800d01c <sqrt+0xac>)
 800cf84:	eeb0 8a40 	vmov.f32	s16, s0
 800cf88:	eef0 8a60 	vmov.f32	s17, s1
 800cf8c:	f993 6000 	ldrsb.w	r6, [r3]
 800cf90:	1c73      	adds	r3, r6, #1
 800cf92:	d02a      	beq.n	800cfea <sqrt+0x7a>
 800cf94:	4622      	mov	r2, r4
 800cf96:	462b      	mov	r3, r5
 800cf98:	4620      	mov	r0, r4
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	f7f3 fdce 	bl	8000b3c <__aeabi_dcmpun>
 800cfa0:	4607      	mov	r7, r0
 800cfa2:	bb10      	cbnz	r0, 800cfea <sqrt+0x7a>
 800cfa4:	f04f 0800 	mov.w	r8, #0
 800cfa8:	f04f 0900 	mov.w	r9, #0
 800cfac:	4642      	mov	r2, r8
 800cfae:	464b      	mov	r3, r9
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	4629      	mov	r1, r5
 800cfb4:	f7f3 fd9a 	bl	8000aec <__aeabi_dcmplt>
 800cfb8:	b1b8      	cbz	r0, 800cfea <sqrt+0x7a>
 800cfba:	2301      	movs	r3, #1
 800cfbc:	9300      	str	r3, [sp, #0]
 800cfbe:	4b18      	ldr	r3, [pc, #96]	; (800d020 <sqrt+0xb0>)
 800cfc0:	9301      	str	r3, [sp, #4]
 800cfc2:	9708      	str	r7, [sp, #32]
 800cfc4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800cfc8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cfcc:	b9b6      	cbnz	r6, 800cffc <sqrt+0x8c>
 800cfce:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800cfd2:	4668      	mov	r0, sp
 800cfd4:	f000 f8d6 	bl	800d184 <matherr>
 800cfd8:	b1d0      	cbz	r0, 800d010 <sqrt+0xa0>
 800cfda:	9b08      	ldr	r3, [sp, #32]
 800cfdc:	b11b      	cbz	r3, 800cfe6 <sqrt+0x76>
 800cfde:	f7fd fea5 	bl	800ad2c <__errno>
 800cfe2:	9b08      	ldr	r3, [sp, #32]
 800cfe4:	6003      	str	r3, [r0, #0]
 800cfe6:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cfea:	eeb0 0a48 	vmov.f32	s0, s16
 800cfee:	eef0 0a68 	vmov.f32	s1, s17
 800cff2:	b00b      	add	sp, #44	; 0x2c
 800cff4:	ecbd 8b02 	vpop	{d8}
 800cff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cffc:	4642      	mov	r2, r8
 800cffe:	464b      	mov	r3, r9
 800d000:	4640      	mov	r0, r8
 800d002:	4649      	mov	r1, r9
 800d004:	f7f3 fc2a 	bl	800085c <__aeabi_ddiv>
 800d008:	2e02      	cmp	r6, #2
 800d00a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800d00e:	d1e0      	bne.n	800cfd2 <sqrt+0x62>
 800d010:	f7fd fe8c 	bl	800ad2c <__errno>
 800d014:	2321      	movs	r3, #33	; 0x21
 800d016:	6003      	str	r3, [r0, #0]
 800d018:	e7df      	b.n	800cfda <sqrt+0x6a>
 800d01a:	bf00      	nop
 800d01c:	200001e4 	.word	0x200001e4
 800d020:	0800d9d8 	.word	0x0800d9d8

0800d024 <__ieee754_sqrt>:
 800d024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d028:	4955      	ldr	r1, [pc, #340]	; (800d180 <__ieee754_sqrt+0x15c>)
 800d02a:	ec55 4b10 	vmov	r4, r5, d0
 800d02e:	43a9      	bics	r1, r5
 800d030:	462b      	mov	r3, r5
 800d032:	462a      	mov	r2, r5
 800d034:	d112      	bne.n	800d05c <__ieee754_sqrt+0x38>
 800d036:	ee10 2a10 	vmov	r2, s0
 800d03a:	ee10 0a10 	vmov	r0, s0
 800d03e:	4629      	mov	r1, r5
 800d040:	f7f3 fae2 	bl	8000608 <__aeabi_dmul>
 800d044:	4602      	mov	r2, r0
 800d046:	460b      	mov	r3, r1
 800d048:	4620      	mov	r0, r4
 800d04a:	4629      	mov	r1, r5
 800d04c:	f7f3 f926 	bl	800029c <__adddf3>
 800d050:	4604      	mov	r4, r0
 800d052:	460d      	mov	r5, r1
 800d054:	ec45 4b10 	vmov	d0, r4, r5
 800d058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d05c:	2d00      	cmp	r5, #0
 800d05e:	ee10 0a10 	vmov	r0, s0
 800d062:	4621      	mov	r1, r4
 800d064:	dc0f      	bgt.n	800d086 <__ieee754_sqrt+0x62>
 800d066:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d06a:	4330      	orrs	r0, r6
 800d06c:	d0f2      	beq.n	800d054 <__ieee754_sqrt+0x30>
 800d06e:	b155      	cbz	r5, 800d086 <__ieee754_sqrt+0x62>
 800d070:	ee10 2a10 	vmov	r2, s0
 800d074:	4620      	mov	r0, r4
 800d076:	4629      	mov	r1, r5
 800d078:	f7f3 f90e 	bl	8000298 <__aeabi_dsub>
 800d07c:	4602      	mov	r2, r0
 800d07e:	460b      	mov	r3, r1
 800d080:	f7f3 fbec 	bl	800085c <__aeabi_ddiv>
 800d084:	e7e4      	b.n	800d050 <__ieee754_sqrt+0x2c>
 800d086:	151b      	asrs	r3, r3, #20
 800d088:	d073      	beq.n	800d172 <__ieee754_sqrt+0x14e>
 800d08a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d08e:	07dd      	lsls	r5, r3, #31
 800d090:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800d094:	bf48      	it	mi
 800d096:	0fc8      	lsrmi	r0, r1, #31
 800d098:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800d09c:	bf44      	itt	mi
 800d09e:	0049      	lslmi	r1, r1, #1
 800d0a0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800d0a4:	2500      	movs	r5, #0
 800d0a6:	1058      	asrs	r0, r3, #1
 800d0a8:	0fcb      	lsrs	r3, r1, #31
 800d0aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800d0ae:	0049      	lsls	r1, r1, #1
 800d0b0:	2316      	movs	r3, #22
 800d0b2:	462c      	mov	r4, r5
 800d0b4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800d0b8:	19a7      	adds	r7, r4, r6
 800d0ba:	4297      	cmp	r7, r2
 800d0bc:	bfde      	ittt	le
 800d0be:	19bc      	addle	r4, r7, r6
 800d0c0:	1bd2      	suble	r2, r2, r7
 800d0c2:	19ad      	addle	r5, r5, r6
 800d0c4:	0fcf      	lsrs	r7, r1, #31
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800d0cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d0d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d0d4:	d1f0      	bne.n	800d0b8 <__ieee754_sqrt+0x94>
 800d0d6:	f04f 0c20 	mov.w	ip, #32
 800d0da:	469e      	mov	lr, r3
 800d0dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d0e0:	42a2      	cmp	r2, r4
 800d0e2:	eb06 070e 	add.w	r7, r6, lr
 800d0e6:	dc02      	bgt.n	800d0ee <__ieee754_sqrt+0xca>
 800d0e8:	d112      	bne.n	800d110 <__ieee754_sqrt+0xec>
 800d0ea:	428f      	cmp	r7, r1
 800d0ec:	d810      	bhi.n	800d110 <__ieee754_sqrt+0xec>
 800d0ee:	2f00      	cmp	r7, #0
 800d0f0:	eb07 0e06 	add.w	lr, r7, r6
 800d0f4:	da42      	bge.n	800d17c <__ieee754_sqrt+0x158>
 800d0f6:	f1be 0f00 	cmp.w	lr, #0
 800d0fa:	db3f      	blt.n	800d17c <__ieee754_sqrt+0x158>
 800d0fc:	f104 0801 	add.w	r8, r4, #1
 800d100:	1b12      	subs	r2, r2, r4
 800d102:	428f      	cmp	r7, r1
 800d104:	bf88      	it	hi
 800d106:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800d10a:	1bc9      	subs	r1, r1, r7
 800d10c:	4433      	add	r3, r6
 800d10e:	4644      	mov	r4, r8
 800d110:	0052      	lsls	r2, r2, #1
 800d112:	f1bc 0c01 	subs.w	ip, ip, #1
 800d116:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800d11a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d11e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d122:	d1dd      	bne.n	800d0e0 <__ieee754_sqrt+0xbc>
 800d124:	430a      	orrs	r2, r1
 800d126:	d006      	beq.n	800d136 <__ieee754_sqrt+0x112>
 800d128:	1c5c      	adds	r4, r3, #1
 800d12a:	bf13      	iteet	ne
 800d12c:	3301      	addne	r3, #1
 800d12e:	3501      	addeq	r5, #1
 800d130:	4663      	moveq	r3, ip
 800d132:	f023 0301 	bicne.w	r3, r3, #1
 800d136:	106a      	asrs	r2, r5, #1
 800d138:	085b      	lsrs	r3, r3, #1
 800d13a:	07e9      	lsls	r1, r5, #31
 800d13c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800d140:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800d144:	bf48      	it	mi
 800d146:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800d14a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800d14e:	461c      	mov	r4, r3
 800d150:	e780      	b.n	800d054 <__ieee754_sqrt+0x30>
 800d152:	0aca      	lsrs	r2, r1, #11
 800d154:	3815      	subs	r0, #21
 800d156:	0549      	lsls	r1, r1, #21
 800d158:	2a00      	cmp	r2, #0
 800d15a:	d0fa      	beq.n	800d152 <__ieee754_sqrt+0x12e>
 800d15c:	02d6      	lsls	r6, r2, #11
 800d15e:	d50a      	bpl.n	800d176 <__ieee754_sqrt+0x152>
 800d160:	f1c3 0420 	rsb	r4, r3, #32
 800d164:	fa21 f404 	lsr.w	r4, r1, r4
 800d168:	1e5d      	subs	r5, r3, #1
 800d16a:	4099      	lsls	r1, r3
 800d16c:	4322      	orrs	r2, r4
 800d16e:	1b43      	subs	r3, r0, r5
 800d170:	e78b      	b.n	800d08a <__ieee754_sqrt+0x66>
 800d172:	4618      	mov	r0, r3
 800d174:	e7f0      	b.n	800d158 <__ieee754_sqrt+0x134>
 800d176:	0052      	lsls	r2, r2, #1
 800d178:	3301      	adds	r3, #1
 800d17a:	e7ef      	b.n	800d15c <__ieee754_sqrt+0x138>
 800d17c:	46a0      	mov	r8, r4
 800d17e:	e7bf      	b.n	800d100 <__ieee754_sqrt+0xdc>
 800d180:	7ff00000 	.word	0x7ff00000

0800d184 <matherr>:
 800d184:	2000      	movs	r0, #0
 800d186:	4770      	bx	lr

0800d188 <_init>:
 800d188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d18a:	bf00      	nop
 800d18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d18e:	bc08      	pop	{r3}
 800d190:	469e      	mov	lr, r3
 800d192:	4770      	bx	lr

0800d194 <_fini>:
 800d194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d196:	bf00      	nop
 800d198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d19a:	bc08      	pop	{r3}
 800d19c:	469e      	mov	lr, r3
 800d19e:	4770      	bx	lr
